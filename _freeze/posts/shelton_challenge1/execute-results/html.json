{
  "hash": "1dbba8fb734430431300d8f781976d5c",
  "result": {
    "markdown": "---\ntitle: \"Challenge 1 Solution\"\nauthor: \"Dane Shelton\"\ndesription: \"Reading in data and creating a post\"\ndate: \"09/16/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_1\n  - shelton\n  - faostat\neditor: \n  markdown: \n    wrap: 72\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge 1 Tasks\n\n1)  read in a dataset, and\n\n2)  describe the dataset using both words and any supporting information\n    (e.g., tables, etc)\n\n### Task 1: Reading in the Data\n\nUsed function `read_csv()` to read in FAO Country Groups dataset.\n\nData was clean for Tibbles format already, did not need to alter any\narguments other than filename.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Block output from showing\n\n#| include: false\n\n# Using Readr package function read_csv() to Import FAO Stat Country\n\n# Assigning variable name \"country_code\" to tibble created from read_csv\n\n country_code <- read_csv(\"_data/FAOSTAT_country_groups.csv\")\n\n# Remember to add desired data into working directory before calling read_csv \n```\n:::\n\n\n### Task 2: Describing the Country Group Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checking to type of country_code\n# str(country_code)\n\n# r-default dataframe\n\n# Coercing to a Tibble and viewing\n\n# country_code <- as_tibble(country_code)\n\n# country_code\n# 1947 x 7 \n\n# Viewed Tibble in Another Window\n# Viewed Head to determine variable types\n\nhead(country_code)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  `Country Group Code` `Country Group` Country…¹ Country M49 C…² ISO2 …³ ISO3 …⁴\n                 <dbl> <chr>               <dbl> <chr>   <chr>   <chr>   <chr>  \n1                 5100 Africa                  4 Algeria 012     DZ      DZA    \n2                 5100 Africa                  7 Angola  024     AO      AGO    \n3                 5100 Africa                 53 Benin   204     BJ      BEN    \n4                 5100 Africa                 20 Botswa… 072     BW      BWA    \n5                 5100 Africa                233 Burkin… 854     BF      BFA    \n6                 5100 Africa                 29 Burundi 108     BI      BDI    \n# … with abbreviated variable names ¹​`Country Code`, ²​`M49 Code`, ³​`ISO2 Code`,\n#   ⁴​`ISO3 Code`\n```\n:::\n\n```{.r .cell-code}\n# which(is.na(country_code[,'M49 Code']==TRUE))\n\n# Used to determine whether any countries in the dataset were not in UN\n```\n:::\n\n\n#### Description of Country Groups Data\n\nCountry Groups contains 1943 observations (rows) and 7 variables\n(columns).\n\nThe variables and their types are as follows: \"Country Group Code\" <dbl>\n(double-precision), \"Country Group\" <chr> (character), \"Country Code\"\n<dbl>, \"Country\" <chr>, \"M49 Code\" <chr>, \"ISO2 Code\" <chr>, \"ISO3 Code\"\n<chr>.\n\nThis data meticulously categorizes all the countries recognized by the\nUnited Nations, first by region (Africa, Americas, Asia...), then\nfurther geographically (South America, Central Asia, East Africa...).\nEach observation has standardized codes in multiple formats representing\nthe associated nation.\n\nWithin the variable \"Country Group\" , which already categorized\ncountries geographically in detail, the countries are *further*\nclassified by socioeconomic indicators like \"Low Income Economy\" , \"High\nIncome Economy\" , \"Net Food Importing Country\". This data was likely\ncollected from an organization like the United Nations as it uses common\nlanguage in the manner it categorizes countries.\n\n##### Other Useful Functions and Notes\n\n`which((is.na(...)))`: directly return index of vals missing\n\n`complete.cases()`: return all complete obs\n\n`na.omit()` : omits all obs with missing values\n\n`na.rm()` : Logical argument option within some functions to remove NA\nfor a calculation\n\n`summary()`: more in depth, shows what variables have missing vals etc\n\n`glimpse()`: less in depth\n\n`min()`, `max()`\n\n`IQR()`, `range()`, `diff()`\n\n`dim(`), `colnames()`, `starts/ends_with()`, `contains()`\n\n`length()`, `str()`, `typeof()`\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}