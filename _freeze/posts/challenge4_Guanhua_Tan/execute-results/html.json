{
  "hash": "3d59a2f45be0e8afe4e6953a72d9133e",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4\"\nauthor: \"Guanhua Tan\"\ndesription: \"More data wrangling: pivoting\"\ndate: \"10/1/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - eggs\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   abc_poll.csv ⭐\n-   poultry_tidy.xlsx or organiceggpoultry.xls⭐⭐\n-   FedFundsRate.csv⭐⭐⭐\n-   hotel_bookings.csv⭐⭐⭐⭐\n-   debt_in_trillions.xlsx ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(readxl) \npoultry<-read_excel(\"_data/poultry_tidy.xlsx\")\npoultry\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 × 4\n   Product  Year Month     Price_Dollar\n   <chr>   <dbl> <chr>            <dbl>\n 1 Whole    2013 January           2.38\n 2 Whole    2013 February          2.38\n 3 Whole    2013 March             2.38\n 4 Whole    2013 April             2.38\n 5 Whole    2013 May               2.38\n 6 Whole    2013 June              2.38\n 7 Whole    2013 July              2.38\n 8 Whole    2013 August            2.38\n 9 Whole    2013 September         2.38\n10 Whole    2013 October           2.38\n# … with 590 more rows\n```\n:::\n:::\n\n### Briefly describe the data\nThe dataset records the prices of Chicken and its different parts from Jan. 2004 to Jan 2013. The column names includes Product, Year, Month, Price_Dollar. There are a few values (price) missing.\n\n## Tidy Data (as needed)\n\nFirst, I want data have a clearer order so I move Year and Month column names to the first two columns. Additionally, I'd like to recreate column names as Chicken's different parts. So I use pivot_wider function to rearrange the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tidy data, use Chicken's different parts as column names\ndf <-poultry %>% select(Year, Month, Product, Price_Dollar) %>% pivot_wider(names_from = Product, values_from = Price_Dollar)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 7\n    Year Month     Whole `B/S Breast` `Bone-in Breast` `Whole Legs` Thighs\n   <dbl> <chr>     <dbl>        <dbl>            <dbl>        <dbl>  <dbl>\n 1  2013 January    2.38         7.04             3.90         2.04   2.16\n 2  2013 February   2.38         7.04             3.90         2.04   2.16\n 3  2013 March      2.38         7.04             3.90         2.04   2.16\n 4  2013 April      2.38         7.04             3.90         2.04   2.16\n 5  2013 May        2.38         7.04             3.90         2.04   2.16\n 6  2013 June       2.38         7.04             3.90         2.04   2.16\n 7  2013 July       2.38         7.04             3.90         2.04   2.16\n 8  2013 August     2.38         7.04             3.90         2.04   2.16\n 9  2013 September  2.38         7.04             3.90         2.04   2.16\n10  2013 October    2.38         7.04             3.90         2.04   2.16\n# … with 110 more rows\n```\n:::\n:::\n\n\n\n## Identify variables that need to be mutated\n\nI found I may mutate the average price of every part of Chicken per year.\n\nI grouped the data by year and mutate 5 columns to calculate the mean of every part of Chiken every year.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mutate data\ndf %>% \n  group_by(Year) %>% \n  mutate(whole_ave = mean(Whole),\n         breast_ave= mean(`B/S Breast`),\n         bone_in_ave = mean (`Bone-in Breast`),\n         whole_legs_ave = mean (`Whole Legs`),\n         thighs_ave = mean(`Thighs`)\n         )%>%\n  select(Year, Month, Whole, whole_ave, `B/S Breast`, breast_ave, `Bone-in Breast`, bone_in_ave, `Whole Legs`, whole_legs_ave, Thighs, thighs_ave)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 12\n# Groups:   Year [10]\n    Year Month     Whole whole…¹ B/S B…² breas…³ Bone-…⁴ bone_…⁵ Whole…⁶ whole…⁷\n   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1  2013 January    2.38    2.38    7.04    7.04    3.90    3.90    2.04    2.04\n 2  2013 February   2.38    2.38    7.04    7.04    3.90    3.90    2.04    2.04\n 3  2013 March      2.38    2.38    7.04    7.04    3.90    3.90    2.04    2.04\n 4  2013 April      2.38    2.38    7.04    7.04    3.90    3.90    2.04    2.04\n 5  2013 May        2.38    2.38    7.04    7.04    3.90    3.90    2.04    2.04\n 6  2013 June       2.38    2.38    7.04    7.04    3.90    3.90    2.04    2.04\n 7  2013 July       2.38    2.38    7.04    7.04    3.90    3.90    2.04    2.04\n 8  2013 August     2.38    2.38    7.04    7.04    3.90    3.90    2.04    2.04\n 9  2013 September  2.38    2.38    7.04    7.04    3.90    3.90    2.04    2.04\n10  2013 October    2.38    2.38    7.04    7.04    3.90    3.90    2.04    2.04\n# … with 110 more rows, 2 more variables: Thighs <dbl>, thighs_ave <dbl>, and\n#   abbreviated variable names ¹​whole_ave, ²​`B/S Breast`, ³​breast_ave,\n#   ⁴​`Bone-in Breast`, ⁵​bone_in_ave, ⁶​`Whole Legs`, ⁷​whole_legs_ave\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}