{
  "hash": "a88628249a5fbc442fa74b2bc6e89a98",
  "result": {
    "markdown": "---\ntitle: \"Homework 3\"\nauthor: \"Owen Tibby\"\ndesription: \"Homework 3\"\ndate: \"11/30/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - HW3\n  - Used Vehicle Data\n  - Owen Tibby\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(summarytools)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(readxl)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(vindecodr)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in library(vindecodr): there is no package called 'vindecodr'\n```\n:::\n\n```{.r .cell-code}\nlibrary(plotrix)\nlibrary(sparklyr)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in library(sparklyr): there is no package called 'sparklyr'\n```\n:::\n\n```{.r .cell-code}\nlibrary(purrr)\n\n\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n## Instructions\n\nThe emphasis in this homework is on exploratory data analysis using both graphics and statistics. You should build on your prior homework - incorporating any feedback and adjusting the code and text as needed. These homeworks are intended to be cumulative. Therefore, while it is fine to switch datasets, you will need to include all of the information from HW1 for your new (or old) dataset in this hw submission as well.\n\n-   Include descriptive statistics (e.g, mean, median, and standard deviation for numerical variables, and frequencies and/or mode for categorical variables\n\n-   Include relevant visualizations using ggplot2 to complement these descriptive statistics. Be sure to use faceting, coloring, and titles as needed. Each visualization should be accompanied by descriptive text that highlights:\n\n-   the variable(s) used\n\n-   what questions might be answered with the visualizations\n\n-   what conclusions you can draw\n\n-   Use group_by() and summarise() to compute descriptive stats and/or visualizations for any relevant groupings. For example, if you were interested in how average income varies by state, you might compute mean income for all states combined, and then compare this to the range and distribution of mean income for each individual state in the US.\n\n-   Identify limitations of your visualization, such as:\n\n-   What questions are left unanswered with your visualizations\n\n-   What about the visualizations may be unclear to a naive viewer\n\n-   How could you improve the visualizations for the final project\n\n\n## \n\n## Reading in the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# #RStudio Desktop\ncarprices <- read_csv(\"car_prices.csv\", col_types = cols(mmr = col_number(), year = col_character(), sellingprice = col_number(), ...17 = col_skip()))\nca_catalog <- read_csv(\"Catalog.csv\", col_types = cols(Brand = col_skip(), ModelName = col_skip()))  #, Trim = col_skip()))\nexchange_rate <- read_excel(\"HistoricalPrices.xlsx\", col_types = c(\"numeric\", \"text\", \"skip\", \"skip\", \"skip\", \"numeric\"))\n# # #RStudio Cloud\n#  carprices <-read_csv(\"/cloud/project/Final_project/car_prices.csv\",\n#      col_types = cols(mmr = col_number(), year = col_character(), sellingprice = col_number(), ...17 = col_skip()))\n#   ca_catalog <- read_csv(\"/cloud/project/Final_project/Catalog.csv\", col_types = cols(Brand = col_skip(), ModelName = col_skip()))  #, Trim = col_skip()))\n#  exchange_rate <- read_excel(\"/cloud/project/Final_project/HistoricalPrices.xlsx\",  col_types = c(\"numeric\", \"text\", \"skip\", \"skip\", \"skip\", \"numeric\"))\n```\n:::\n\n\n## Brief Description of the data\n\nThis data set contains historical used vehicle auction prices that took place between 1982 and 2015.\n\nFirst, lets take a look at the variables in the data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(carprices)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     year               make              model               trim          \n Length:558837      Length:558837      Length:558837      Length:558837     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n     body           transmission           vin               state          \n Length:558837      Length:558837      Length:558837      Length:558837     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   condition        odometer         color             interior        \n Min.   :1.000   Min.   :     1   Length:558837      Length:558837     \n 1st Qu.:2.700   1st Qu.: 28371   Class :character   Class :character  \n Median :3.600   Median : 52254   Mode  :character   Mode  :character  \n Mean   :3.425   Mean   : 68320                                        \n 3rd Qu.:4.200   3rd Qu.: 99109                                        \n Max.   :5.000   Max.   :999999                                        \n NA's   :11820   NA's   :94                                            \n    seller               mmr          sellingprice      saledate        \n Length:558837      Min.   :    25   Min.   :     1   Length:558837     \n Class :character   1st Qu.:  7100   1st Qu.:  6900   Class :character  \n Mode  :character   Median : 12250   Median : 12100   Mode  :character  \n                    Mean   : 13769   Mean   : 13611                     \n                    3rd Qu.: 18300   3rd Qu.: 18200                     \n                    Max.   :182000   Max.   :230000                     \n                    NA's   :26                                          \n```\n:::\n:::\n\n\n\n ## Cleaning the Data\n\nI've noticed a few records belonging to Canadian provinces. \"ab\" is Alberta, \"on\" is Ontario, \"qc\" is Quebec & \"ns\" represents Nova Scotia.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Observing the amount of NAs in our most important variables\n# carprices %>% \n#   filter(is.na(model), is.na(make)) %>% \n#   dim()\n\n\n\n#Justify dropping NAs... Why did i exclude it\n\ncarprices <- carprices %>% \n  filter(!is.na(make), !is.na(model), !is.na(odometer), !is.na(mmr)) \n  #dfSummary(carprices)\n\n#Observing all records for model year 2007 and newer\ncarprices<- carprices %>% \n  filter(`year`> 2006, sellingprice>100, condition>2.41)\n  dim(carprices)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 388155     16\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Checking the consistency in the names of states and body types\n  carprices %>% \n  select(state) %>% \n  distinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 38 × 1\n   state\n   <chr>\n 1 ca   \n 2 tx   \n 3 pa   \n 4 mn   \n 5 az   \n 6 tn   \n 7 md   \n 8 ne   \n 9 oh   \n10 fl   \n# … with 28 more rows\n```\n:::\n\n```{.r .cell-code}\ncarprices$state <- toupper(carprices$state)\n\n\n\ncarprices %>% \n  select(body) %>% \n  distinct() %>%print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 83 × 1\n   body         \n   <chr>        \n 1 SUV          \n 2 Sedan        \n 3 Convertible  \n 4 Wagon        \n 5 Coupe        \n 6 Crew Cab     \n 7 G Coupe      \n 8 G Sedan      \n 9 Hatchback    \n10 Elantra Coupe\n# … with 73 more rows\n```\n:::\n\n```{.r .cell-code}\ncarprices$body <- toupper(carprices$body)\n```\n:::\n\n\nI notice that there are 76 distinct values for body. I'll explore and condense them into fewer categories in a new column called \"Body_type\" below\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Checking the consistency in the names of Body types}\ncarprices %>% \nselect(body) %>% \ndistinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 43 × 1\n   body         \n   <chr>        \n 1 SUV          \n 2 SEDAN        \n 3 CONVERTIBLE  \n 4 WAGON        \n 5 COUPE        \n 6 CREW CAB     \n 7 G COUPE      \n 8 G SEDAN      \n 9 HATCHBACK    \n10 ELANTRA COUPE\n# … with 33 more rows\n```\n:::\n\n```{.r .cell-code}\n#Creating a Body Type column\ncarprices <- mutate(carprices, Body_Type = case_when(str_detect(body, \"EDAN\")~ \"Sedan\", str_detect(body, \"SUV\") ~ \"SUV\", str_detect(body, \"AB\") ~ \"Pickup\", str_detect(body, \"OUP\")~ \"Coupe\", str_detect(`body`, \"VAN\")~ \"Minivan\", str_detect(`body`,\"ONV\")~ \"Convertible\", str_detect(`body`,\"AGO\") ~ \"Wagon\", str_detect(`body`,\"ATCH\")~ \"Hatchback\", str_detect(`body`,\"CREW\")~ \"Pickup\" ))\n# print(head(carprices))\n\n\ncount(carprices)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n       n\n   <int>\n1 388155\n```\n:::\n:::\n\n\nNext step is to link multiple files to get the MSRP from a historical catalog. We'll need this in order to get AV/MSRP ratios.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creating a Key in the CDN catalog\nca_catalog <-  ca_catalog %>% \nmutate(YearOfLaunch= `Model Year`-1)\n\n\n\n\n#Creating Catalog with MSRP in CAD\nca_catalog <- ca_catalog %>% \ngroup_by(`Combined`, `YearOfLaunch`, `Segment` ) %>% \nsummarise( Trim_Count=n(), AVG_MSRP_CAD= mean(`MSRP`, na.rm= TRUE), MSRP_Range_CAD= (max(`MSRP`)- min(`MSRP`)), StdDev_MSRP_CAD= sd(`MSRP`, na.rm=FALSE), Error.MSRP_CAD= std.error(`MSRP`, na.rm=FALSE))%>% \nungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Joining the data to convert CAD MSRP to USD MSRP later\nca_catalog <- left_join(ca_catalog, exchange_rate, c(\"YearOfLaunch\"= \"Year\"))\n\n\n#Creating US$ Catalog and Converting to MSRP from CAD to USD\nus_catalog <- ca_catalog %>% \n  mutate(AVG_MSRP= round((`AVG_MSRP_CAD` / `Close`), digits = 0), MSRP_Range= `MSRP_Range_CAD` / `Close`, StdDev_MSRP= `StdDev_MSRP_CAD`/ `Close`, Error.MSRP= `Error.MSRP_CAD`/ `Close` )\n\n#Finalizing US Catalog for Joining\nus_catalog <- us_catalog %>% \nselect(Combined, Segment, AVG_MSRP, MSRP_Range, Trim_Count, StdDev_MSRP, Error.MSRP) %>% \n  mutate(`Error %`= round((`Error.MSRP`/ `AVG_MSRP` * 100), digits = 1), `%MSRP_Range` = round((`MSRP_Range`/ `AVG_MSRP` *100), digits=1))\n\n#Creating a common key to join carprices and us_catalog\ncarprices<- carprices %>% \n  mutate(year2=year, make2=make, model2=model)\ncarprices <- carprices %>%  unite(`YMM`, `year2`, `make2`, `model2`, sep=\" \")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Joining Data with us_catalog\n# carprices <- head(carprices) \ncarprices <- left_join(carprices, us_catalog, c(\"YMM\"= \"Combined\" )) \n\n\n\n#saving our raw records beofre filtering\nraw_carprices <- carprices\n\n\n#Filtering out the keys that were not mapped (Run these false keys through a vin decoder to get exact matches)\nfalse_keys <- carprices %>% \n  filter(is.na(AVG_MSRP))\n\n\n\n#Removing NAs in MSRP from main dataset\n\ncarprices <- carprices %>% \n  filter(!is.na(AVG_MSRP)) \n\n#replace_na(carprices$StdDev_MSRP, 0)\nprint(head(carprices))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 26\n  year  make  model    trim      body  trans…¹ vin   state condi…² odome…³ color\n  <chr> <chr> <chr>    <chr>     <chr> <chr>   <chr> <chr>   <dbl>   <dbl> <chr>\n1 2015  Kia   Sorento  LX        SUV   automa… 5xyk… CA        5     16639 white\n2 2015  Kia   Sorento  LX        SUV   automa… 5xyk… CA        5      9393 white\n3 2014  BMW   3 Series 328i SUL… SEDAN automa… wba3… CA        4.5    1331 gray \n4 2015  Volvo S60      T5        SEDAN automa… yv16… CA        4.1   14282 white\n5 2014  BMW   M5       Base      SEDAN automa… wbsf… CA        3.4   14943 black\n6 2014  Audi  A4       2.0T Pre… SEDAN automa… wauf… CA        4.2    9557 white\n# … with 15 more variables: interior <chr>, seller <chr>, mmr <dbl>,\n#   sellingprice <dbl>, saledate <chr>, Body_Type <chr>, YMM <chr>,\n#   Segment <chr>, AVG_MSRP <dbl>, MSRP_Range <dbl>, Trim_Count <int>,\n#   StdDev_MSRP <dbl>, Error.MSRP <dbl>, `Error %` <dbl>, `%MSRP_Range` <dbl>,\n#   and abbreviated variable names ¹​transmission, ²​condition, ³​odometer\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# To clean Year, make, Model fields in false_keys, Run Below \n\nVinIn <-false_keys %>% select(vin) \nVinIn <- VinIn$vin\n\ndecode <- function(x) {\n VIN<- decode_vin(x)}\n\ndecoded_keys <- map_dfr(VinIn,  decode)\n\n#Saving the above output as a CSV\nwrite.csv(decoded_keys, \"C:\\\\Users\\\\Owen-Matthew\\\\Documents\\\\Github\\\\601_Fall_2022\\\\posts\\\\decoded_keys.csv\", row.names=FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfalse_keys %>% \n  select(vin) %>% \n  distinct() %>% \n  dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46123     1\n```\n:::\n\n```{.r .cell-code}\n# #R Studio Desktop Read In\n# #Cleaning False keys\naction_keys <- read_csv(\"decoded_keys.csv\")\n\n\n# #R Studio Cloud Read In\n# #Cleaning False keys\n# action_keys <- read_csv(\"/cloud/project/Final_project/decoded_keys.csv\")\n\n\na_keys <- action_keys\n\na_keys <-  a_keys %>% \n  filter(!is.na(year)) %>% \nfilter(!is.na(make)) %>% \nfilter(!is.na(model)) %>% \n filter(!is.na(VIN)) \n\n#Join with Catalog\na_keys <-  a_keys %>% \n  select(model_year, make,model, VIN) %>% \n  mutate(year= model_year, make2=make, model2=model) %>% \n  unite (YMM, model_year, make2, model2, sep = \" \")\na_keys <- inner_join(a_keys, us_catalog, c(\"YMM\"= \"Combined\" )) \n\n#Checking to see if a vehicle was auctioned multiple times, to see if we need to include sale date as a matching key\nunique_check <- a_keys %>% \n  select(`VIN`) %>% \n  distinct() %>% \n  dim() \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Selecting useful columns in false_keys\nfalse_keys <- false_keys %>%\nselect(trim, body, Body_Type, transmission, vin, state , condition, odometer, color, interior,seller, mmr, sellingprice, saledate)\n\n#Join with false keys to get sale records\ncleaned_keys= inner_join(a_keys, false_keys, c(\"VIN\" = \"vin\")) %>% \n  select(1:26) %>% \n rename(\"vin\" = \"VIN\")\n\n\n#get column names & order from carprices\ncheck_cols <-  colnames(carprices) %>% as.factor()\n\n#checking to see if the column order is the same\ncleaned_keys <- cleaned_keys[, check_cols]\nprint(head(cleaned_keys))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 26\n   year make     model trim      body  trans…¹ vin   state condi…² odome…³ color\n  <dbl> <chr>    <chr> <chr>     <chr> <chr>   <chr> <chr>   <dbl>   <dbl> <chr>\n1  2013 INFINITI G37   G37 Sport G CO… automa… jn1c… CA        4.5   14716 white\n2  2013 INFINITI G37   G37 Jour… G SE… automa… jn1c… CA        4.6      68 black\n3  2013 INFINITI G37   G37 Jour… G SE… automa… jn1c… CA        4.5   24112 white\n4  2013 INFINITI G37   G37 Sport G CO… automa… jn1c… CA        4.7    4859 black\n5  2013 INFINITI G37   G37 Sport G CO… automa… jn1c… CA        4.5   21126 black\n6  2013 INFINITI G37   G37 Jour… G SE… automa… jn1c… CA        4.2   26675 blue \n# … with 15 more variables: interior <chr>, seller <chr>, mmr <dbl>,\n#   sellingprice <dbl>, saledate <chr>, Body_Type <chr>, YMM <chr>,\n#   Segment <chr>, AVG_MSRP <dbl>, MSRP_Range <dbl>, Trim_Count <int>,\n#   StdDev_MSRP <dbl>, Error.MSRP <dbl>, `Error %` <dbl>, `%MSRP_Range` <dbl>,\n#   and abbreviated variable names ¹​transmission, ²​condition, ³​odometer\n```\n:::\n\n```{.r .cell-code}\nprint(head(carprices))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 26\n  year  make  model    trim      body  trans…¹ vin   state condi…² odome…³ color\n  <chr> <chr> <chr>    <chr>     <chr> <chr>   <chr> <chr>   <dbl>   <dbl> <chr>\n1 2015  Kia   Sorento  LX        SUV   automa… 5xyk… CA        5     16639 white\n2 2015  Kia   Sorento  LX        SUV   automa… 5xyk… CA        5      9393 white\n3 2014  BMW   3 Series 328i SUL… SEDAN automa… wba3… CA        4.5    1331 gray \n4 2015  Volvo S60      T5        SEDAN automa… yv16… CA        4.1   14282 white\n5 2014  BMW   M5       Base      SEDAN automa… wbsf… CA        3.4   14943 black\n6 2014  Audi  A4       2.0T Pre… SEDAN automa… wauf… CA        4.2    9557 white\n# … with 15 more variables: interior <chr>, seller <chr>, mmr <dbl>,\n#   sellingprice <dbl>, saledate <chr>, Body_Type <chr>, YMM <chr>,\n#   Segment <chr>, AVG_MSRP <dbl>, MSRP_Range <dbl>, Trim_Count <int>,\n#   StdDev_MSRP <dbl>, Error.MSRP <dbl>, `Error %` <dbl>, `%MSRP_Range` <dbl>,\n#   and abbreviated variable names ¹​transmission, ²​condition, ³​odometer\n```\n:::\n\n```{.r .cell-code}\n#We managed to clean 30% of the previous NA records; 13632 of 46608 records\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#reorganize cleaned keys to rbind with carprices data\ncarprices <-  rbind(carprices, cleaned_keys)\ndim(carprices)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 367892     26\n```\n:::\n\n```{.r .cell-code}\n#Checking for NA values in AVG_MSRP and YMM\n# carprices %>% \n#   filter(is.na(AVG_MSRP)) %>% \n#   print()\n# carprices %>% \n#   filter(is.na(YMM)) %>%\n#   print()\n\n#Removing na records in Error%\ncarprices$`Error %` <- carprices$`Error %` %>% replace_na(0)\n\ncarprices <- carprices %>% filter(`Error %`< 7)\n\n#Removing 677 NA records for Bodytype\nna.body <- carprices %>%  filter(is.na(Body_Type))\n\ncarprices <- carprices %>%  filter(!is.na(Body_Type))\n```\n:::\n\n\n•\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Displaying the Canadian records\nsuppressWarnings({\n  \n  carprices %>%\n  filter(state== c(\"AB\", \"ON\", \"QC\", \"NS\")) \n\n# Excluding Canadian records\ncarprices<-carprices %>%\nfilter(state!= c(\"AB\", \"ON\", \"QC\", \"NS\"))\n\n})\n```\n:::\n\n\nI'll create a new variable called Launch_date. Since most vehicles of model year x are released in the fall of the the previous year, I'll follow that logic and assume that for all makes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creating Launch Date Step 1\ncarprices$year <- as.numeric(as.character(carprices$year))\n\ncarprices<- carprices %>% \n  mutate(launch_month= \"9\", launch_day= \"1\", launch_year= (`year`-1))\n\n#Creating Launch Date Step 2\ncarprices <- carprices %>% \nmutate(launch_date= make_date(year= `launch_year`, month = `launch_month`, day=`launch_day`))\n\n\n#Converting saledate to a date variable\ncarprices <- carprices %>% \n  separate(saledate, into= c(\"ddd\", \"sale_month\", \"sale_day\", \"sale_year\", \"sale_time\", \"GMT\", \"TMZ\"), sep=\" \")   \n\n#Recoding the format of the sale month\ncarprices <- mutate(carprices, sale_month2= recode(sale_month, `Jan` =\"1\", `Feb`= \"2\", `Mar`=\"3\", `Apr`=\"4\", `May`=\"5\", `Jun`=\"6\", `Jul`=\"7\", `Aug`=\"8\", `Sep`=\"9\", `Oct`=\"10\", `Nov`=\"11\", `Dec`=\"12\" ))\n\n#Creating Date_Sold\n#carprices <- mutate(carprices, sale_year2=sale_year)\ncarprices <- mutate(carprices, sale_year2=sale_year, Date_Sold = make_date(year=sale_year2, month = sale_month2, day = sale_day))\n\n# Tidyiing up: selecting important columns\ncarprices <- carprices %>% \nselect(year, make, model, trim, transmission, Body_Type, state, condition, odometer, color, mmr, sellingprice, sale_year, launch_date, Date_Sold, AVG_MSRP, Trim_Count, `Error %`, `%MSRP_Range`, Segment ) \n#print(head(carprices))\n```\n:::\n\n\nCalculating the age of the vehicle at the time of sale:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Age of vehicle\ncarprices <- mutate(carprices, Age_months= round(as.numeric(difftime(Date_Sold, launch_date, units= \"days\"))/30))\n\n#Checking for negatives in Vehicle Age\ncarprices %>% \n  select(Age_months) %>% \n  filter(Age_months<0)# %>% \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 1\n  Age_months\n       <dbl>\n1         -8\n2         -8\n3         -8\n4         -8\n5         -8\n```\n:::\n\n```{.r .cell-code}\n  #print.difftime()\n\n#Recoding Vehicle Age\ncarprices<-carprices %>% \n  mutate(Age_months=recode(Age_months, `-8`=0))\n\n#Creating Age in years\ncarprices<-carprices %>% \n  mutate(Age_years=round(Age_months/12, 0))\nprint(head(carprices))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 22\n   year make  model    trim    trans…¹ Body_…² state condi…³ odome…⁴ color   mmr\n  <dbl> <chr> <chr>    <chr>   <chr>   <chr>   <chr>   <dbl>   <dbl> <chr> <dbl>\n1  2015 Kia   Sorento  LX      automa… SUV     CA        5     16639 white 20500\n2  2015 Kia   Sorento  LX      automa… SUV     CA        5      9393 white 20800\n3  2014 BMW   3 Series 328i S… automa… Sedan   CA        4.5    1331 gray  31900\n4  2015 Volvo S60      T5      automa… Sedan   CA        4.1   14282 white 27500\n5  2014 BMW   M5       Base    automa… Sedan   CA        3.4   14943 black 69000\n6  2014 Audi  A4       2.0T P… automa… Sedan   CA        4.2    9557 white 32100\n# … with 11 more variables: sellingprice <dbl>, sale_year <chr>,\n#   launch_date <date>, Date_Sold <date>, AVG_MSRP <dbl>, Trim_Count <int>,\n#   `Error %` <dbl>, `%MSRP_Range` <dbl>, Segment <chr>, Age_months <dbl>,\n#   Age_years <dbl>, and abbreviated variable names ¹​transmission, ²​Body_Type,\n#   ³​condition, ⁴​odometer\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Retained value\ncarprices <- carprices %>% \nmutate(RV_percent= round(`sellingprice` / `AVG_MSRP` *100, digits = 1))\n\ncarprices <-  carprices %>% filter(RV_percent < 125)\n\nprint(head(carprices))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 23\n   year make  model    trim    trans…¹ Body_…² state condi…³ odome…⁴ color   mmr\n  <dbl> <chr> <chr>    <chr>   <chr>   <chr>   <chr>   <dbl>   <dbl> <chr> <dbl>\n1  2015 Kia   Sorento  LX      automa… SUV     CA        5     16639 white 20500\n2  2015 Kia   Sorento  LX      automa… SUV     CA        5      9393 white 20800\n3  2014 BMW   3 Series 328i S… automa… Sedan   CA        4.5    1331 gray  31900\n4  2015 Volvo S60      T5      automa… Sedan   CA        4.1   14282 white 27500\n5  2014 BMW   M5       Base    automa… Sedan   CA        3.4   14943 black 69000\n6  2014 Audi  A4       2.0T P… automa… Sedan   CA        4.2    9557 white 32100\n# … with 12 more variables: sellingprice <dbl>, sale_year <chr>,\n#   launch_date <date>, Date_Sold <date>, AVG_MSRP <dbl>, Trim_Count <int>,\n#   `Error %` <dbl>, `%MSRP_Range` <dbl>, Segment <chr>, Age_months <dbl>,\n#   Age_years <dbl>, RV_percent <dbl>, and abbreviated variable names\n#   ¹​transmission, ²​Body_Type, ³​condition, ⁴​odometer\n```\n:::\n\n```{.r .cell-code}\n#How does the distriburion of RV% look?\nsummary(carprices$RV_percent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.90   37.00   47.20   47.98   58.40  124.70 \n```\n:::\n:::\n\n\n\n## Narrative about the data set..\n\nThis data set contains historical used vehicle auction prices that took place between 1982 and 2015. The data was collected from all Manheim auction houses across the 34 states in the USA. Each observation details a wholesale auction transaction that includes: the vehicle information, state, selling price and the market average price i.e the Manheim Market Report price (MMR) and other specifics about the sale.\n\n\n## Potential Research Questions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Establishing vehicle groups\n#Error in Nissan records\nmainstream <- c(\"Toyota\", \"Honda\", \"Hyundai\", \"Nissan\", \"Hyundai\", \"Kia\", \"Mazda\", \"Subaru\", \"Volkswagen\")\nluxury <- c(\"BMW\", \"Audi\", \"Mercedes Benz\", \"Porsche\", \"Lexus\", \"INFINITI\", \"Acura\", \"Genesis\", \"Volvo\", \"Cadillac\", \"Lincoln\")\npassenger <-  c(\"Sedan\", \"SUV\", \"Coupe\", \"Convertible\", \"Wagon\", \"Hatchback\")\nJapanese4 <-  c(\"Toyota\", \"Honda\", \"Nissan\", \"Mazda\")\nKorean <- c(\"Kia\", \"Hyundai\", \"Genesis\")\nGerman <- c(\"Audi\", \"BMW\", \"Mercedes Benz\")\n```\n:::\n\n\n1.  Is there a correlation between mileage, age and condition?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot2 <- carprices %>% \n  filter(make== c(`mainstream`, `luxury`), Body_Type== c(passenger) )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in make == c(mainstream, luxury): longer object length is not a multiple\nof shorter object length\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in Body_Type == c(passenger): longer object length is not a multiple of\nshorter object length\n```\n:::\n\n```{.r .cell-code}\nggplot(data = plot2) + aes(x =condition , y = (odometer), color= Age_years) +\n geom_point(position = \"jitter\")+\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n```\n:::\n\n::: {.cell-output-display}\n![](OwenTibby_HW3_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n2.  How does mileage affect vehicle sale price/ RV?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot2 <- carprices %>% \n  filter(make== c(`mainstream`, `luxury`), Body_Type== c(passenger), RV_percent >15) %>% \n  arrange(desc(RV_percent)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in make == c(mainstream, luxury): longer object length is not a multiple\nof shorter object length\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in Body_Type == c(passenger): longer object length is not a multiple of\nshorter object length\n```\n:::\n\n```{.r .cell-code}\nggplot(data = plot2) + aes(y = RV_percent, x = (odometer)) +\n geom_point(position = \"jitter\")+\ngeom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](OwenTibby_HW3_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#Control for Age & condition\n```\n:::\n\n\n\n\n3. What is there a correlation between condition and Retained value?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot2 <- carprices %>% \n  filter(make== c(`mainstream`, `luxury`), Body_Type== c(passenger) ) %>% \ngroup_by(Age_years)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in make == c(mainstream, luxury): longer object length is not a multiple\nof shorter object length\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in Body_Type == c(passenger): longer object length is not a multiple of\nshorter object length\n```\n:::\n\n```{.r .cell-code}\nggplot(data = plot2) + aes(x =condition, y = (RV_percent)) +\n geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](OwenTibby_HW3_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n4.  How does the transaction volume vary by age across volume states\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Analyzing the number of transactions by state by the age \n\n\nvol.states<- carprices %>% \n  filter(Age_years < 7, Age_years >0) %>% \n  group_by(Age_years, state) %>% \n  tally() %>% \n  arrange(desc(n)) %>% \n  slice(1:5)\n\n\nvol.states %>% \n  ggplot()+ aes(x=reorder(state, -n), y= n) +\n  geom_bar(stat = \"identity\", fill= \"blue\") +\nlabs(x= \"State\", y=\"Number of Transactions\") +\nfacet_wrap(vars(Age_years))+\nggtitle(\"Number of Transactions by State faceted by Vehicle Age\")\n```\n\n::: {.cell-output-display}\n![](OwenTibby_HW3_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nFrom the above, we see that most vehicles are auctioned between ages 2 and 4 years. This corresponds to the popular lease terms of 24 to 48 months.\n\n2.  Which segment retains the best value?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nby_segment <- carprices %>% \n  filter(Age_years < 8, Age_years>0, !is.na(Segment), Body_Type== passenger, make==c(mainstream, luxury)) %>% \n  group_by(Age_years, Segment, sale_year, Age_months) %>% \n\n  summarise(Segment_RV= round(mean(RV_percent), digits=1)) %>% \n  arrange(desc(Segment_RV)) %>%\n  arrange((Age_years)) %>% \n  arrange((sale_year)) %>% \n slice(1:5) \n\n  print(head(by_segment))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n# Groups:   Age_years, Segment, sale_year [2]\n  Age_years Segment     sale_year Age_months Segment_RV\n      <dbl> <chr>       <chr>          <dbl>      <dbl>\n1         1 Compact Car 2014              16       70.3\n2         1 Compact Car 2015               8       94.3\n3         1 Compact Car 2015              10       80.5\n4         1 Compact Car 2015               9       77.4\n5         1 Compact Car 2015              17       65.2\n6         1 Compact Car 2015              16       63.3\n```\n:::\n\n```{.r .cell-code}\nggplot(data = by_segment) + \n  geom_smooth(mapping = aes(x = Age_months, y = Segment_RV, color = `Segment`), se= F) #+\n```\n\n::: {.cell-output-display}\n![](OwenTibby_HW3_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  # facet_wrap(~sale_year)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Finding the Segments with the highest RV\nbest_value_segments <- carprices %>%\n  filter(Age_years> 1, Age_years <6, Body_Type== passenger, `Error %` < 5, !is.na(Segment)) %>% \n  group_by(Segment,Age_years,  RV_percent, odometer, condition, model) %>% \n   tally() %>% \n  summarise(RV_percentage = mean(RV_percent), odometer=mean(odometer),condition=mean(condition), .groups = \"keep\") %>% \n  tally() %>% \n  \n  summarise(Segment=Segment, Age_years= Age_years, RV_percent= mean(RV_percent), odometer=mean(odometer),condition=mean(condition),  n = sum(n), .groups = \"keep\") %>%\n  ungroup() %>% \n   group_by(Segment, Age_years) %>% \n  summarise(Segment=Segment, Age_years= Age_years, RV_percent= mean(RV_percent),Mileage=mean(odometer), Condition=mean(condition),  Sample_Size = sum(n), .groups = \"keep\") %>%\n  slice(1:1) %>% \n  arrange(desc(RV_percent)) %>% \n  arrange((Age_years))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in Body_Type == passenger: longer object length is not a multiple of\nshorter object length\n```\n:::\n\n```{.r .cell-code}\nprint(best_value_segments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 36 × 6\n# Groups:   Segment, Age_years [36]\n   Segment                  Age_years RV_percent Mileage Condition Sample_Size\n   <chr>                        <dbl>      <dbl>   <dbl>     <dbl>       <int>\n 1 Mid-Size SUV/Crossover           2       63.2  31575.      4.16        1658\n 2 Subcompact SUV/Crossover         2       62.0  25790.      4.18         381\n 3 Compact SUV/Crossover            2       61.2  31791.      4.18        1892\n 4 Full-Size SUV/Crossover          2       61.1  35426.      4.13         415\n 5 Subcompact Car                   2       59.9  27101.      3.97         992\n 6 Compact Car                      2       57.9  28675.      3.94        3189\n 7 Sports Car                       2       52.1  27601.      4.00         651\n 8 Mid-Size Car                     2       50.5  29878.      3.99        4368\n 9 Full-Size Car                    2       47.8  33692.      3.95         868\n10 Mid-Size SUV/Crossover           3       54.1  40314.      4.00         919\n# … with 26 more rows\n```\n:::\n\n```{.r .cell-code}\n#Removing a few missing fields in Segments that were missing in Catalog\nBVS <- best_value_segments %>% \n  filter(!is.na(Segment)) \n  \n# ggplot(data = BVS) + \n#   geom_point(mapping = aes(x = Age_years, y = RV_percent, color = `Segment`)) +\n# geom_smooth(mapping = aes(x = Age_years, y = RV_percent, color = `Segment`), se= F)\n \nBVS %>% \nggplot() + aes(x = Age_years, y =(RV_percent)) +\n  geom_bar(stat= \"identity\", fill=\"darkred\") +\n  facet_wrap(~Segment)\n```\n\n::: {.cell-output-display}\n![](OwenTibby_HW3_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Volume models\n\nvol.models<- carprices %>% \nfilter( Age_years >0) %>% \n  group_by(model) %>% \n  tally() %>% \n  arrange(desc(n)) %>% \n  ungroup() %>% \n  slice(1:10)\n\nvol.models.passenger <- carprices %>% \nfilter(Age_years >0, Body_Type== passenger) %>% \n  group_by(model) %>% \n  tally() %>% \n  arrange(desc(n)) %>% \n  ungroup() %>% \n  slice(1:10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in Body_Type == passenger: longer object length is not a multiple of\nshorter object length\n```\n:::\n\n```{.r .cell-code}\npopular.models <-  vol.models.passenger$model\n\n\nvol.models %>% \n  ggplot()+ aes(x=reorder(model, -n), y= n) +\n  geom_bar(stat = \"identity\", fill= \"blue\") +\nlabs(x= \"Model\", y=\"Number of Wholesale Transactions\")+\n  ggtitle(\"Top Selling Used Vehicles\")\n```\n\n::: {.cell-output-display}\n![](OwenTibby_HW3_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n\n```{.r .cell-code}\nvol.models.passenger %>% \n  ggplot()+ aes(x=reorder(model, -n), y= n) +\n  geom_bar(stat = \"identity\", fill= \"blue\") +\nlabs(x= \"Model\", y=\"Number of Transactions for Top  Selling Models\")\n```\n\n::: {.cell-output-display}\n![](OwenTibby_HW3_files/figure-html/unnamed-chunk-24-2.png){width=672}\n:::\n:::\n\n\nDo the most popular vehicles retain the best value or is it the opposite? Let's explore below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Finding the models with the highest RV\nbest_value_models <- carprices %>%\n  filter(Age_years> 1, Age_years <6, Body_Type== passenger, `Error %` < 5) %>% \n  group_by(make, model,Age_years,  RV_percent, odometer, condition, Segment) %>% \n   tally() %>% \n  summarise(RV_percentage = mean(RV_percent), odometer=mean(odometer), condition=mean(condition), .groups = \"keep\") %>% \n  tally() %>% \n  \n  summarise(make=make, model=model, Age_years= Age_years, RV_percent= mean(RV_percent), odometer=mean(odometer),condition=mean(condition),  n = sum(n), .groups = \"keep\") %>%\n  ungroup() %>% \n   group_by(make, model, Age_years) %>% \n  summarise(make=make, model=model, Age_years= Age_years, RV_percent= mean(RV_percent), mileage=mean(odometer), condition=mean(condition),  n = sum(n), .groups = \"keep\") %>%\n  slice(1:1) %>% \n  arrange(desc(RV_percent)) %>% \n  \n  #Filtering a sample size 20 or more\n  filter(n>19) %>%\narrange((Age_years))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in Body_Type == passenger: longer object length is not a multiple of\nshorter object length\n```\n:::\n\n```{.r .cell-code}\n     print(best_value_models)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 366 × 7\n# Groups:   make, model, Age_years [366]\n   make   model        Age_years RV_percent mileage condition     n\n   <chr>  <chr>            <dbl>      <dbl>   <dbl>     <dbl> <int>\n 1 Jeep   Wrangler             2       86.0  22507.      4.55   119\n 2 Toyota 4Runner              2       85.6  26949.      4.47    30\n 3 Subaru XV Crosstrek         2       83.0  15515       4.68    21\n 4 Jeep   Cherokee             2       77.5  18633.      4.29    43\n 5 Toyota RAV4                 2       72.9  27580.      4.19    72\n 6 Toyota Highlander           2       72.0  28409.      4.10    33\n 7 Nissan Versa Note           2       71.9  17331.      4.16    54\n 8 Subaru Impreza              2       71.4  16454.      4.22    23\n 9 BMW    X3                   2       69.9  20962.      4.20    22\n10 Subaru Outback              2       69.3  28139.      4.29    69\n# … with 356 more rows\n```\n:::\n:::\n\n\n\nHow does the RV% compare among volume models?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# vol.models %>% \n#   ggplot()+ aes(y= RV_percent , x=Age_months)\n```\n:::\n\n\n\n\nPopular makes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Distribution of makes\n\nvol.brands<- carprices %>% \n  filter(Age_years < 7, Age_years >0) %>% \n  group_by(make) %>% \n  tally() %>% \n  arrange(desc(n)) %>% \n  slice(1:10)\n\nprint(vol.brands)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   make          n\n   <chr>     <int>\n 1 Ford      65459\n 2 Nissan    35946\n 3 Chevrolet 32329\n 4 Toyota    23732\n 5 Dodge     21475\n 6 Hyundai   15149\n 7 Honda     13749\n 8 Kia       13547\n 9 INFINITI  12451\n10 BMW       11348\n```\n:::\n\n```{.r .cell-code}\nvol.brands %>% \n  ggplot()+ aes(x=reorder(make, -n), y= n) +\n  geom_bar(stat = \"identity\", fill= \"blue\") +\nlabs(x= \"Brand\", y=\"Number of Transactions\") +\n#facet_wrap(vars(Age_years))+\nggtitle(\"Popular Brands\")\n```\n\n::: {.cell-output-display}\n![](OwenTibby_HW3_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Japanese makes\nplot <- carprices %>% \n  filter(Age_years<7, make== c(\"Toyota\", \"Honda\", \"Nissan\", \"Hyundai\"), Body_Type== (\"Sedan\"))\n\nggplot(data = plot) + \n  geom_smooth(mapping = aes(x = Age_months, y = RV_percent, color = `make`))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](OwenTibby_HW3_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\nBest mainstream cars to buy post-2015?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncarprices %>% \n  filter(make== mainstream, Age_years == 2, `%MSRP_Range` <50, Body_Type== passenger) %>% \n  group_by(model) %>% \n  arrange(desc(RV_percent)) %>% \n  slice(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 198 × 23\n# Groups:   model [25]\n    year make    model  trim   trans…¹ Body_…² state condi…³ odome…⁴ color   mmr\n   <dbl> <chr>   <chr>  <chr>  <chr>   <chr>   <chr>   <dbl>   <dbl> <chr> <dbl>\n 1  2014 Hyundai Accent GS     automa… Hatchb… TN        4.6    6566 blue  11300\n 2  2013 Hyundai Accent GS     automa… Hatchb… FL        4.8   14730 silv…  9875\n 3  2013 Hyundai Accent GS     automa… Hatchb… FL        2.7   21101 black  9350\n 4  2014 Hyundai Accent GS     <NA>    Hatchb… ON        2.8   40860 black 11100\n 5  2014 Nissan  Altima 2.5 S  automa… Sedan   WA        4.1    2371 white 17050\n 6  2014 Nissan  Altima 2.5 S  automa… Sedan   TN        4.1   22847 —     15600\n 7  2014 Nissan  Altima 2.5 S  automa… Sedan   TN        4.7   27050 black 15250\n 8  2013 Nissan  Altima 3.5 SL automa… Sedan   GA        3.7   19959 blue  16800\n 9  2013 Nissan  Altima 3.5 SL automa… Sedan   MO        4.7   18735 white 19200\n10  2014 Nissan  Altima 2.5 S  <NA>    Sedan   CA        2.9    2030 white 17250\n# … with 188 more rows, 12 more variables: sellingprice <dbl>, sale_year <chr>,\n#   launch_date <date>, Date_Sold <date>, AVG_MSRP <dbl>, Trim_Count <int>,\n#   `Error %` <dbl>, `%MSRP_Range` <dbl>, Segment <chr>, Age_months <dbl>,\n#   Age_years <dbl>, RV_percent <dbl>, and abbreviated variable names\n#   ¹​transmission, ²​Body_Type, ³​condition, ⁴​odometer\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Monthly mileage by state\nplot7 <- carprices %>% \n  filter(make== c(`mainstream`, `luxury`), Body_Type== c(passenger) )\n\nggplot(data = plot7) + aes(x =state , y = ((odometer)/ Age_months)) +\n geom_histogram(stat = \"identity\") \n```\n:::\n\n\n\n\n:::\n\n## \n",
    "supporting": [
      "OwenTibby_HW3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}