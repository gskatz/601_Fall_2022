{
  "hash": "24a797af57c17038ab8a357f504d5923",
  "result": {
    "markdown": "---\ntitle: \"Caitlin Rowley - HW3\"\nauthor: \"Caitlin Rowley\"\ndate: 11/25/2022\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#| label: setup\n#| warning: false\n#| message: false\n\n# install packages and load libraries:\n\ninstall.packages(\"readr\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nInstalling package into 'C:/Users/srika/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n```\n:::\n\n```{.r .cell-code}\ninstall.packages(\"readxl\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nInstalling package into 'C:/Users/srika/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(readxl)\nlibrary(dplyr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Read in Data\n\nI selected a data set from the Inside AirBnB website, capturing data related to summary information and metrics for listings in Boston, MA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in dataset:\n\nsetwd(\"C:/Users/caitr/OneDrive/Documents/DACSS/601_Fall_2022/posts\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in setwd(\"C:/Users/caitr/OneDrive/Documents/DACSS/601_Fall_2022/posts\"): cannot change working directory\n```\n:::\n\n```{.r .cell-code}\nBoston <- read_csv(\"Boston AirBnB Data.csv\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: 'Boston AirBnB Data.csv' does not exist in current working directory ('C:/Users/srika/OneDrive/Desktop/601_Fall_2022/posts').\n```\n:::\n:::\n\n\n## Tidy Data\n\nI will now tidy the data to look for missing values and duplicates. I will also rename columns as needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# look for duplicates\n# look for missing values\n# remember na.rm=TRUE for calculations\n\n# At first glance, it seems as though there are no values in the column titled \"neighbourhood_group.\" So, I will find all unique values within that column to determine whether it can be removed from my tidy data set.\n\nunique(Boston[c(\"neighbourhood_group\")])\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in unique(Boston[c(\"neighbourhood_group\")]): object 'Boston' not found\n```\n:::\n\n```{.r .cell-code}\n# I now know that there is no data within this column. I will remove it from my data set.\n\nBoston_tidy <- subset(Boston, select = -c(neighbourhood_group))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in subset(Boston, select = -c(neighbourhood_group)): object 'Boston' not found\n```\n:::\n\n```{.r .cell-code}\n# I can see from viewing this data frame that there are no other columns that are absent any values, so I will move on to other tidying tasks.\n\n# rename columns:\n\nnames(Boston_tidy) <- c('room_id', 'room_name', 'host_id', 'host_name', 'neighborhood', 'room_latitude', 'room_longitude', 'room_type', 'room_price', 'min_nights', 'number_reviews', 'last_review', 'reviews_per_month', 'host_listings', 'availability_next_365', 'number_reviews_LTM', 'room_license')\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in names(Boston_tidy) <- c(\"room_id\", \"room_name\", \"host_id\", \"host_name\", : object 'Boston_tidy' not found\n```\n:::\n\n```{.r .cell-code}\n# find duplicates:\n\nduplicates <- duplicated(Boston_tidy)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in duplicated(Boston_tidy): object 'Boston_tidy' not found\n```\n:::\n\n```{.r .cell-code}\n# reached \"max.print\", so I will increase the limit and identify if any values within the vector = TRUE:\n\noptions(max.print=999999)\nduplicates[\"TRUE\"]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'duplicates' not found\n```\n:::\n\n```{.r .cell-code}\nhead(Boston_tidy)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(Boston_tidy): object 'Boston_tidy' not found\n```\n:::\n:::\n\n\n## Summary of Data\n\n\"Boston_tidy\" represents AirBnB rental listing data for the city of Boston over the last twelve months. The data frame has 17 variables and 5,185 rows of data. Each row now represents one unique observation---or in this case, a unique rental listing---that includes data related to the following variables: (1) room/listing ID number, (2) name of the room/listing, (3) listing host ID number, (4) listing host name, (5) room/listing neighborhood, (6) room/listing latitude, (7) room/listing longitude, (8) type of room/listing, (9) room/listing price, (10) minimum number of nights for rent, (11) number of room/listing reviews, (12) most recent room/listing review, (13) number of room/listing reviews per month, (14) number room-specific host listings (i.e., the number of unique room listings by host), (15) room/listing availability over the next year, (16) number of reviews for room/listing over the past 12 months, and (17) room/listing licensure status.\n\nSome potential research questions include:\n\n-   Which neighborhoods have the most expensive price per bed?\n\n-   Which neighborhoods have the highest number of listings?\n\n-   Which property types are listed most frequently?\n\n-   What's the average listing price by property types?\n\n-   What's the average price per bed price by property type?\n\n-   What does the occupancy rate look like by neighborhood?\n\n-   What factors affect the price the most?\n\n-   Can the price be accurately predicted, given other information about the listing?\n\n-   Is there a correlation between number of reviews and occupancy?\n\n## Mutate\n\nNext, I will mutate variables. I will start off by adding the variable \"room_coordinates\" to my overall data set. I think this may come in handy if I choose to use a map for visualization, as I may need to match coordinates between my data set and those included in mapping packages such as 'map_data().'\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mutate lat and lon to create \"room_coordinates\"\n# keep lat and lon columns for now\n\nBoston_mutate <- Boston_tidy %>%\nmutate(\"room_coordinates\" = paste(room_latitude, room_longitude))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mutate(., room_coordinates = paste(room_latitude, room_longitude)): object 'Boston_tidy' not found\n```\n:::\n\n```{.r .cell-code}\ncolnames(Boston_mutate)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in is.data.frame(x): object 'Boston_mutate' not found\n```\n:::\n:::\n\n\n## Summary Statistics\n\nI will next create a subset of data that includes the new variable \"median_price,\" which will only include room prices greater than \\$0. This data set will also grouped by the original variables \"room_type\" and \"neighborhood.\" This will be useful in terms of both summary statistics and visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find median room prices by neighborhood and room type:\n\nBoston_median <- Boston_mutate%>%\n  filter(room_price>0) %>%\n  group_by(room_type, neighborhood)%>%\n    summarize(median_price = median(room_price))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(., room_price > 0): object 'Boston_mutate' not found\n```\n:::\n\n```{.r .cell-code}\nprint(head(Boston_median))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(Boston_median): object 'Boston_median' not found\n```\n:::\n\n```{.r .cell-code}\nsummary(Boston_median$median_price)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in summary(Boston_median$median_price): object 'Boston_median' not found\n```\n:::\n:::\n\n\nWe can see from this data set that the highest median room price is \\$750/night for a shared room in the Fenway neighborhood. The lowest median room price is \\$10/night for a shared room in Charlestown.\n\nI will next generate statistics using raw data (not excluding outliers or values equal to 0) related to room price, minimum number of nights per stay, number of reviews per room, and number of listings by host.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary statistics for entire data set: \n\nsummary.data.frame(Boston_mutate)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.list(object): object 'Boston_mutate' not found\n```\n:::\n\n```{.r .cell-code}\n# summary statistics for particular group of variables:\n\nBoston_mutate %>% \n  select(room_price, min_nights, number_reviews, host_listings, availability_next_365) %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in select(., room_price, min_nights, number_reviews, host_listings, : object 'Boston_mutate' not found\n```\n:::\n:::\n\n\nThis raw data indicates that room prices for Boston Airbnbs range from \\$0-\\$10,000 per night---both of which I would assume are outliers---with the median price equaling \\$179 per night and the average price equaling \\$231 per night. Regarding the minimum number of nights per stay, values ranged from 1-730 nights. At first, I assumed the maximum value was an outlier, but Airbnb does offer long-term stays (\"long-term\" being defined as more than 28 days), so it is possible that this particular listing is for long-terms stays only. I will dive deeper into this later to see if this is a commonality within the data set, or if it is truly an outlier. I also included the number of reviews per listing in this analysis to see if this may be an indicator of the popularity of certain rooms and, by extension, certain hosts. I will delve into this in my final project, as well. In the same vein, I included number of room-specific host listings in this summary, with the values ranging from 1-477 listings. The median number of room-specific listings per host is 6, while the average is 62. The final component of this analysis is listing availability over the next 365 days. The values range from 0-365 days, with the median value being 187 days and the average being 190 days.\n\nAs a precursor to a deeper analysis on number of host listings, I filtered the data set to include only values greater than one in the \"host_listings\" column, which tells us the number of rooms listed by the same host.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# filter by hosts with more than one listing:\n\nBoston_id <- Boston_mutate%>%\n  filter(host_listings>1)%>%\n  group_by(host_id, host_listings)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(., host_listings > 1): object 'Boston_mutate' not found\n```\n:::\n\n```{.r .cell-code}\nhead(Boston_id)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(Boston_id): object 'Boston_id' not found\n```\n:::\n:::\n\n\nThis output indicates that that there are 3,918 room-specfic listings whose hosts have more than one unique listing in Boston's Airbnb database.\n\nAdditionally, we can dig a little deeper into the number of room-specific listings by host.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_listings <- Boston_mutate%>%\n  select(host_id, host_name, room_name, neighborhood, host_listings)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in select(., host_id, host_name, room_name, neighborhood, host_listings): object 'Boston_mutate' not found\n```\n:::\n\n```{.r .cell-code}\nmax_listings[max_listings$host_listings == '477',]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'max_listings' not found\n```\n:::\n\n```{.r .cell-code}\nhead(max_listings)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(max_listings): object 'max_listings' not found\n```\n:::\n:::\n\n\nWe now know that there are 477 unique listings whose hosts also have 477 unique listings.\n\nI will next generate some summary statistics for the categorical variable indicating listing neighborhood.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary statistics by neighborhood:\n\nunique_neighbor <- unique(Boston_mutate$neighborhood)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in unique(Boston_mutate$neighborhood): object 'Boston_mutate' not found\n```\n:::\n\n```{.r .cell-code}\nunique[which.max(tabulate(match(Boston_mutate$neighborhood, unique)))]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in match(Boston_mutate$neighborhood, unique): object 'Boston_mutate' not found\n```\n:::\n:::\n\n\nWe can see from this tabulation that the most frequently listed neighborhood is Allston.\n\n## Visualization with Multiple Dimensions\n\nI will next focus on data visualization. I will first generate a bar chart portraying median room price by neighborhood. This visual does not exclude outliers, though it will exclude room prices that equal zero.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\nlibrary(ggtext)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in library(ggtext): there is no package called 'ggtext'\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# group median price by neighborhood:\n\nBoston_median_price <- Boston_mutate%>%\n  filter(room_price>0) %>%\n  group_by(neighborhood)%>%\n    summarize(median_price = median(room_price))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(., room_price > 0): object 'Boston_mutate' not found\n```\n:::\n\n```{.r .cell-code}\n# generate bar chart:\n\nggplot(Boston_median_price, aes(x=neighborhood, y=median_price, fill=neighborhood)) +\ngeom_bar(stat=\"identity\") +\nscale_fill_hue() +\n  theme_classic() +\n  labs(x=\"Neighborhood\",y=\"Median Price per Night\", title = \"Boston Airbnb Rental Prices by Neighborhood\")+\n  theme(axis.text.x = element_markdown(angle=90, hjust=1))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(Boston_median_price, aes(x = neighborhood, y = median_price, : object 'Boston_median_price' not found\n```\n:::\n:::\n\n\nThis bar chart tells us that the neighborhoods with the highest median room price per night are (1) Chinatown at just under \\$400/night , (2) Back Bay at just under \\$300/night, and (3) Downtown at about \\$260/night. The neighborhoods with the lowest median prices are Roxbury at about \\$80/night, (2) Dorchester at just under \\$100/night, and (3) Hyde Park at about \\$100/night. These values are confirmed in the data frame \"Boston_median_price.\"\n\nI will next generate a geom_point chart to visualize room price by neighborhood. I will also use facet wrapping to separate the values by room type. I will also apply a boxplot overlay to capture both the interquartile range and outliers. I will first need to exclude strong outliers\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove outliers:\n\nis_outlier <- function(x) {\n  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))\n}\n\nBoston_outlier <- Boston_mutate %>%\n  filter(!is_outlier(room_price))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(., !is_outlier(room_price)): object 'Boston_mutate' not found\n```\n:::\n\n```{.r .cell-code}\n# create dataframe:\n\nBoston_outlier%>%\n  filter(room_price>0, room_price<800) %>%\n  group_by(room_type, neighborhood)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(., room_price > 0, room_price < 800): object 'Boston_outlier' not found\n```\n:::\n\n```{.r .cell-code}\n# generate geom_point chart\n# facet wrap\n# boxplot overlay\n\nBoston_outlier%>%\n group_by(room_type, neighborhood)%>%\n  ggplot(aes(x=neighborhood, y=room_price)) +\n  geom_point(alpha=.08, size=3, color = \"light pink\")+\n  facet_wrap(\"room_type\")+\n  labs(x=\"Neighborhood\",y=\"Price per Night\", title = \"Boston Airbnb Rental Prices by Neighborhood and Room Type\")+\n  theme_light()+\n  geom_boxplot()+\n  theme(axis.text.x = element_markdown(angle = 90, hjust=1))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in group_by(., room_type, neighborhood): object 'Boston_outlier' not found\n```\n:::\n:::\n\n\nThis is very difficult to read due to the number of neighborhoods, so I am going to apply the three variables (room price, room type, and neighborhood) to another visual.\n\nIn the interim, I will display a simpler version of this geom_point chart without the facet wrap so that the visual only captures neighborhood and room price per night.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# generate geom_point chart with boxplot:\n\nBoston_outlier%>%\n group_by(room_type, neighborhood)%>%\n  ggplot(aes(x=neighborhood, y=room_price)) +\n  geom_point(alpha=.08, size=5, color = \"light pink\")+\n  labs(x=\"Neighborhood\",y=\"Price per Night\", title = \"Boston Airbnb Rental Prices by Neighborhood\")+\n  theme_light()+\n  geom_boxplot()+\n  theme(axis.text.x = element_markdown(angle = 90, hjust=1))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in group_by(., room_type, neighborhood): object 'Boston_outlier' not found\n```\n:::\n\n```{.r .cell-code}\n# want to add values: text(x = Boston_outlier$room_price, y = Boston_outlier$room_price, labels = Boston_outlier$room_price)\n```\n:::\n\n\nHere, we can see the distribution of prices across neighborhoods using individual data points. We can also see the spread of data points with the boxplot overlay, which includes the minimum value, the values within the 25th quartile, the median value, the values within the 75th quartile, and the maximum value. The boxplot also indicates outliers. With this visualization, we can see that neighborhoods with the narrowest distribution of data points---or, in this case, room prices---are Chinatown and the Leather District, while the neighborhoods with the broadest distribution of data points seem to be Charlestown, Harbor Islands and Mattapan. In my final project, I'd like to add the value lables to the boxplots to confirm this.\n\nI will next visualize the data using a choropleth map. I will generate a map of the Boston area and apply data related to neighborhood, room price, and room type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(maps)\nlibrary(viridisLite)\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n# generate map\n\nstates_map <- map_data(\"state\")\nhead(states_map)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      <NA>\n2 -87.48493 30.37249     1     2 alabama      <NA>\n3 -87.52503 30.37249     1     3 alabama      <NA>\n4 -87.53076 30.33239     1     4 alabama      <NA>\n5 -87.57087 30.32665     1     5 alabama      <NA>\n6 -87.58806 30.32665     1     6 alabama      <NA>\n```\n:::\n\n```{.r .cell-code}\nma_map <- filter(states_map, region==\"massachusetts\") %>%\nggplot(., aes(x=long, y=lat, group=group)) +\n  geom_polygon(fill=\"white\", color=\"black\")\nprint(ma_map)\n```\n\n::: {.cell-output-display}\n![](Caitlin-Rowley---HW3_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nI've generated the map of Massachusetts, so now I will work on merging my data sets to apply as an overlay to the map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# merge 'ma_map' and 'Boston_tidy' by coordinates\n\n# mutate and rename columns\n\nBoston_coord <- Boston_mutate %>%\n  rename(\"coordinates\" = \"room_coordinates\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in rename(., coordinates = \"room_coordinates\"): object 'Boston_mutate' not found\n```\n:::\n\n```{.r .cell-code}\nhead(Boston_coord)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(Boston_coord): object 'Boston_coord' not found\n```\n:::\n\n```{.r .cell-code}\nma_map_df <- filter(states_map, region==\"massachusetts\")\nma_mutate <- ma_map_df %>%\n  mutate(\"coordinates\" = paste(lat, long))\nhead(ma_mutate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       long      lat group order        region         subregion\n1 -70.45089 41.40193    20  5926 massachusetts martha's vineyard\n2 -70.45662 41.39047    20  5927 massachusetts martha's vineyard\n3 -70.45662 41.37328    20  5928 massachusetts martha's vineyard\n4 -70.46808 41.35609    20  5929 massachusetts martha's vineyard\n5 -70.50819 41.35609    20  5930 massachusetts martha's vineyard\n6 -70.56548 41.34464    20  5931 massachusetts martha's vineyard\n                         coordinates\n1  41.401927947998 -70.4508895874023\n2 41.3904724121094 -70.4566192626953\n3 41.3732833862305 -70.4566192626953\n4 41.3560943603516 -70.4680786132812\n5  41.3560943603516 -70.508186340332\n6 41.3446350097656 -70.5654830932617\n```\n:::\n\n```{.r .cell-code}\n# merge data \n\nmap_merge <- merge(ma_mutate, Boston_coord, by = \"coordinates\", all=T)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame(y): object 'Boston_coord' not found\n```\n:::\n\n```{.r .cell-code}\nhead(map_merge)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(map_merge): object 'map_merge' not found\n```\n:::\n\n```{.r .cell-code}\n# remove if room_id is NA when merged with map data\n\nmap_merged <- map_merge %>% filter(!is.na(map_merge$room_id))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(., !is.na(map_merge$room_id)): object 'map_merge' not found\n```\n:::\n\n```{.r .cell-code}\nhead(map_merged)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(map_merged): object 'map_merged' not found\n```\n:::\n:::\n\n\nI now have my map and my merged data, but I'd like to zoom in on Boston, as the data would be illegible if it the map is kept at its current scale. I will try an iteration of the above code to generate this visual.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load map, plot data\n\nMA_map <- map_data(\"state\")\nfilter(states_map, region == \"massachusetts\")%>%\n  ggplot() + geom_polygon(data = map_merged, aes(x = long, y = lat, group = group), colour = \"black\", fill = NA) + geom_point(data = Boston_mutate, aes(x = room_latitude, y = room_longitude, size = room_price, color = neighborhood)) + coord_map()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in fortify(data): object 'map_merged' not found\n```\n:::\n:::\n\n\nThis x-axis range on this visual is too narrow, and there are too many data points included. For my final project, I will work on expanding the limits of the x-axis, and I will also consider ways that I can slice or group the data to make the visual more readable. I will also consider additional variables that I can visualize.\n",
    "supporting": [
      "Caitlin-Rowley---HW3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}