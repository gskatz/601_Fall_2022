{
  "hash": "f62d271177b23f8f62bc72fa4102b6f7",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4 Instructions\"\nauthor: \"Darron Bunt\"\ndesription: \"More data wrangling: pivoting\"\ndate: \"10/16/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - fed_rates\n  - hotel_bookings\n  - darron_bunt\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   FedFundsRate.csv⭐⭐⭐\n-   hotel_bookings.csv⭐⭐⭐⭐\n\n## Datasets Used \n::: panel-tabset\n\n### Fed Funds \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFedFundsRate <- read_csv(\"_data/FedFundsRate.csv\")\n```\n:::\n\n\nThis dataset is 904 rows long and has 10 columns. It examines historical Federal Funds data across 67 years (broken up by a YYYY-MM-DD variable). The Federal Funds Rate is the target interest rate that's set by the Federal Open Market Committee (FOMC) and is the target rate at which commercial banks lend their excess reserves to each other overnight.\n\nThe date-specific information in the dataset is broken down across seven different variables. Four are related to the Federal Funds Rate (the target rate, upper and lower target rates, and the effective rate), and three are related to economic indicators (% Change in Real GDP, the Unemployment Rate, and the Inflation Rate).\n\nSadly, the data is not currently tidy. The date data, currently in three columns, can be combined into one YYYY-MM-DD column. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nFedFundsRate2 <- FedFundsRate %>%\n  mutate(FullDate = make_date(Year, Month, Day)\n         )\nFedFundsRate2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 904 × 11\n    Year Month   Day Federal F…¹ Feder…² Feder…³ Effec…⁴ Real …⁵ Unemp…⁶ Infla…⁷\n   <dbl> <dbl> <dbl>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1  1954     7     1          NA      NA      NA    0.8      4.6     5.8      NA\n 2  1954     8     1          NA      NA      NA    1.22    NA       6        NA\n 3  1954     9     1          NA      NA      NA    1.06    NA       6.1      NA\n 4  1954    10     1          NA      NA      NA    0.85     8       5.7      NA\n 5  1954    11     1          NA      NA      NA    0.83    NA       5.3      NA\n 6  1954    12     1          NA      NA      NA    1.28    NA       5        NA\n 7  1955     1     1          NA      NA      NA    1.39    11.9     4.9      NA\n 8  1955     2     1          NA      NA      NA    1.29    NA       4.7      NA\n 9  1955     3     1          NA      NA      NA    1.35    NA       4.6      NA\n10  1955     4     1          NA      NA      NA    1.43     6.7     4.7      NA\n# … with 894 more rows, 1 more variable: FullDate <date>, and abbreviated\n#   variable names ¹​`Federal Funds Target Rate`, ²​`Federal Funds Upper Target`,\n#   ³​`Federal Funds Lower Target`, ⁴​`Effective Federal Funds Rate`,\n#   ⁵​`Real GDP (Percent Change)`, ⁶​`Unemployment Rate`, ⁷​`Inflation Rate`\n```\n:::\n:::\n\n\nYay, better!\n\n### Hotel Bookings \n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   -   hotel_bookings.csv⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHotels <- read_csv(\"_data/hotel_bookings.csv\")\n```\n:::\n\n\nSo first off, I'm going to combine the the arrival year, month and day into one single value. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nHotels2 <- Hotels %>%\n  mutate(FullArrDate = str_c(arrival_date_month,\n                          arrival_date_day_of_month,\n                          arrival_date_year, sep = \"/\"),\n         FullArrivalDate = mdy(FullArrDate)\n  )\nHotels2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 34\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 Resor…       0     342    2015 July         27       1       0       0      2\n 2 Resor…       0     737    2015 July         27       1       0       0      2\n 3 Resor…       0       7    2015 July         27       1       0       1      1\n 4 Resor…       0      13    2015 July         27       1       0       1      1\n 5 Resor…       0      14    2015 July         27       1       0       2      2\n 6 Resor…       0      14    2015 July         27       1       0       2      2\n 7 Resor…       0       0    2015 July         27       1       0       2      2\n 8 Resor…       0       9    2015 July         27       1       0       2      2\n 9 Resor…       1      85    2015 July         27       1       0       3      2\n10 Resor…       1      75    2015 July         27       1       0       3      2\n# … with 119,380 more rows, 24 more variables: children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\nI also just want to know how many people stayed in the hotel room, total. So I'm going to combine adults, children and babies into one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHotels3 <- Hotels2 %>%\n  mutate(TotalGuests = adults + children + babies)\nHotels3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 35\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 Resor…       0     342    2015 July         27       1       0       0      2\n 2 Resor…       0     737    2015 July         27       1       0       0      2\n 3 Resor…       0       7    2015 July         27       1       0       1      1\n 4 Resor…       0      13    2015 July         27       1       0       1      1\n 5 Resor…       0      14    2015 July         27       1       0       2      2\n 6 Resor…       0      14    2015 July         27       1       0       2      2\n 7 Resor…       0       0    2015 July         27       1       0       2      2\n 8 Resor…       0       9    2015 July         27       1       0       2      2\n 9 Resor…       1      85    2015 July         27       1       0       3      2\n10 Resor…       1      75    2015 July         27       1       0       3      2\n# … with 119,380 more rows, 25 more variables: children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}