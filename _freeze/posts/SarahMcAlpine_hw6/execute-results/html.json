{
  "hash": "ce43b2b70e6017c4b9ba193038a7f1ec",
  "result": {
    "markdown": "---\ntitle: \"Sarah McAlpine - Challenge 6\"\nauthor: \"Sarah McAlpine\"\ndesription: \"Homework Challenge #6\"\ndate: \"10/25/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_6\n  - sarahmcalpine\n  - AB_NYC\n  - ggplot2\n  - summarytools\n  - ggridges\n  - treemap\n  \n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(summarytools)\nlibrary(ggridges)\nlibrary(treemap)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n## Read in Data\n\n::: {.cell}\n\n```{.r .cell-code}\n#initial read-in for summary\nairbnb_orig <- read_csv(\"_data/AB_NYC_2019.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 48895 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# print(dfSummary(airbnb_orig,\n#           varnumbers = FALSE,\n#                         plain.ascii  = FALSE,\n#                         style        = \"grid\",\n#                         graph.magnif = 0.70,\n#                         valid.col    = FALSE),\n#       method = 'render',\n#       table.classes = 'table-condensed')\n```\n:::\n\n\n### Briefly Describe the Data\n\nThe original data lists 48,895 distinct Airbnb rentals in New York City, almost 80% of which were reviewed between 2011 to 2019. The data include information that guests would want, such as listing names, host names, location in terms of the neighborhoods as well as latitude and longitude, room types, price, and minimum nights. It also includes the number of reviews, date of the last review, number of reviews per month (possibly calculated from the total months of the review period represented?), calculated host listings, and a count available days of the year. \n\n## Tidy Data (as needed)\nI am suspicious of some values that will require some investigation: prices range from \\$0 to $10,000, minimum nights range from 1 to 1250 (nearly 3.5 years), and the dates of the last review span over 8 years, from 2011 to 2019. I could check to see if the calculated host listings count is consistent with what's here, and therefore exclude it from my read-in. I will also want to address the two neighborhood variables. My data frame summary already confirmed that each ID is distinct.\n\nA few are missing rental names and host names--I wonder if these will align with some of the other errant data such as prices of $0 or minimum nights that don't make sense in a real world application.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_name_1 <- airbnb_orig %>%\n  filter(is.na(name)) %>%\n  arrange(desc(availability_365)) %>%\n  select(name, price, minimum_nights, availability_365)\n\n\nno_name_2 <-airbnb_orig %>%\n  filter(is.na(name)) %>%\n  arrange(desc(last_review)) %>%\n  select(name, last_review, number_of_reviews)\n\nno_name_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 4\n   name  price minimum_nights availability_365\n   <chr> <dbl>          <dbl>            <dbl>\n 1 <NA>    130              1              365\n 2 <NA>    400           1000              362\n 3 <NA>     50              3              362\n 4 <NA>    200              1              341\n 5 <NA>    225              1                0\n 6 <NA>    215              7                0\n 7 <NA>    150              1                0\n 8 <NA>     70              1                0\n 9 <NA>     40              1                0\n10 <NA>     45              1                0\n11 <NA>    190              4                0\n12 <NA>    300              5                0\n13 <NA>     67              4                0\n14 <NA>    100              1                0\n15 <NA>     70              3                0\n16 <NA>    110              4                0\n```\n:::\n\n```{.r .cell-code}\nno_name_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 3\n   name  last_review number_of_reviews\n   <chr> <date>                  <dbl>\n 1 <NA>  2018-08-13                  5\n 2 <NA>  2016-08-18                  3\n 3 <NA>  2016-01-05                  1\n 4 <NA>  2016-01-02                  5\n 5 <NA>  2015-06-08                 28\n 6 <NA>  2015-01-01                  1\n 7 <NA>  NA                          0\n 8 <NA>  NA                          0\n 9 <NA>  NA                          0\n10 <NA>  NA                          0\n11 <NA>  NA                          0\n12 <NA>  NA                          0\n13 <NA>  NA                          0\n14 <NA>  NA                          0\n15 <NA>  NA                          0\n16 <NA>  NA                          0\n```\n:::\n:::\n\nAs expected, the rentals with missing names tend to have availability of 0 or nearly 365, and many have no reviews. I want to know if the ones that have reviews tend to be some of the oldest reviews. (I will test that theory once I graph the reviews on a timeline.) One has a minimum stay of 1000 nights (but I still haven't found the one requiring 1250 nights!). All of them have prices within a realistic range, generally speaking, so I would guess these were discontinued listings. \n\nIn order for this data to be tidy, it needs to represent one case per row with variables that are all independent from one another. Location information seems to be the most duplicative, so I will tidy that now. I will elect to keep the more specific neighborhood names with the borough in parentheses afterward, which will require a `unite` function. I am not sure if longitude and latitude are redundant locations, but I will keep them in case I want to map these later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairbnb <- airbnb_orig %>% \n  #combine neighbourhood and neighbourhood group\n  unite(\"location\",neighbourhood_group:neighbourhood)\n\nairbnb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48,895 × 15\n      id name      host_id host_…¹ locat…² latit…³ longi…⁴ room_…⁵ price minim…⁶\n   <dbl> <chr>       <dbl> <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>   <dbl>\n 1  2539 Clean & …    2787 John    Brookl…    40.6   -74.0 Privat…   149       1\n 2  2595 Skylit M…    2845 Jennif… Manhat…    40.8   -74.0 Entire…   225       1\n 3  3647 THE VILL…    4632 Elisab… Manhat…    40.8   -73.9 Privat…   150       3\n 4  3831 Cozy Ent…    4869 LisaRo… Brookl…    40.7   -74.0 Entire…    89       1\n 5  5022 Entire A…    7192 Laura   Manhat…    40.8   -73.9 Entire…    80      10\n 6  5099 Large Co…    7322 Chris   Manhat…    40.7   -74.0 Entire…   200       3\n 7  5121 BlissArt…    7356 Garon   Brookl…    40.7   -74.0 Privat…    60      45\n 8  5178 Large Fu…    8967 Shunic… Manhat…    40.8   -74.0 Privat…    79       2\n 9  5203 Cozy Cle…    7490 MaryEl… Manhat…    40.8   -74.0 Privat…    79       2\n10  5238 Cute & C…    7549 Ben     Manhat…    40.7   -74.0 Entire…   150       1\n# … with 48,885 more rows, 5 more variables: number_of_reviews <dbl>,\n#   last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​location, ³​latitude, ⁴​longitude,\n#   ⁵​room_type, ⁶​minimum_nights\n```\n:::\n:::\n\n\n## Time Dependent Visualization\n\nNow I'm ready to plot the reviews on a timeline. \n\n::: {.cell}\n\n```{.r .cell-code}\n# set up viz data object\nreviews_timing <- airbnb %>%\n  #include only the rows with reviews\n  filter(number_of_reviews > 0) %>%\n    # set up the x \n  ggplot(aes(x=last_review)) +\n  #select density plot and set airbnb official color\n  geom_density(fill=\"#FF5A5F\")+\n  #rename x axis\n  labs(x=\"Date of Last Review\", title = \"Airbnb NYC 2019, Density of Last Review Date\")+\n  # make it shiny\n  theme_gray()\n  \n  reviews_timing\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw6_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\nThere is a huge uptick in last review dates at the end of timeframe covered. I imagine this is good news for hosts who want up-to-date reviews. I selected the `geom_density` plot because I couldn't calculate counts of dates without binning them, which I first tried with `geom_line`.\n\n\nTo make it interesting, I will plot different lines for each borough.\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up viz data object\nreviews_by_borough <- airbnb_orig %>%\n  #include only the rows with reviews\n  filter(number_of_reviews > 0) %>%\n  filter(last_review > '2019-01-01') %>%\n  #create groups by borough\n  group_by(neighbourhood_group)\n\nreviews_by_borough %>%\n  # set up the x and y and group and color\n  ggplot(aes(x=last_review, y=neighbourhood_group, fill= neighbourhood_group)) +\n  geom_density_ridges(alpha=0.6, ) +\n    theme_ridges() +\n    theme(\n      legend.position=\"none\",\n      panel.spacing = unit(0.1, \"lines\")) +\n  #rename x axis\n  labs(x=\"Date of Last Review\", y= \"Borough\", title = \"Date of Last Reviews in 2019, Airbnb Listings NYC\")+\n  # make it shiny\n  theme_gray()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 4.43\n```\n:::\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw6_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  reviews_by_borough\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24,811 × 16\n# Groups:   neighbourhood_group [5]\n      id name      host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n   <dbl> <chr>       <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  2595 Skylit M…    2845 Jennif… Manhat… Midtown    40.8   -74.0 Entire…   225\n 2  3831 Cozy Ent…    4869 LisaRo… Brookl… Clinto…    40.7   -74.0 Entire…    89\n 3  5099 Large Co…    7322 Chris   Manhat… Murray…    40.7   -74.0 Entire…   200\n 4  5178 Large Fu…    8967 Shunic… Manhat… Hell's…    40.8   -74.0 Privat…    79\n 5  5238 Cute & C…    7549 Ben     Manhat… Chinat…    40.7   -74.0 Entire…   150\n 6  5295 Beautifu…    7702 Lena    Manhat… Upper …    40.8   -74.0 Entire…   135\n 7  5441 Central …    7989 Kate    Manhat… Hell's…    40.8   -74.0 Privat…    85\n 8  5803 Lovely R…    9744 Laurie  Brookl… South …    40.7   -74.0 Privat…    89\n 9  6021 Wonderfu…   11528 Claudio Manhat… Upper …    40.8   -74.0 Privat…    85\n10  6848 Only 2 s…   15991 Allen … Brookl… Willia…    40.7   -74.0 Entire…   140\n# … with 24,801 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n```\n:::\n:::\n\nI first graphed this as another `geom_density` but couldn't see everything since it's all so uniform and stacked together. So I tried a ridgeline plot. I also limited to the year 2019 to see if I could find any remarkable variation, and there doesn't seem to be any. Another analysis could look at any differences about price bins.\n\n## Visualizing Part-Whole Relationships\nI want to learn more about how neighborhoods make up the NYC boroughs, as they are listed in this data set. I selected `treemap` because I want to show subgroups within groups, and also to see how each neighborhood and borough are represented in the data by count of listing. This graph will allow me to easily see how much area each covers.\n\n::: {.cell}\n\n```{.r .cell-code}\n#prep the data frame\nboroughs <- airbnb_orig %>%\n  # select just the variables I want\n  select(neighbourhood, neighbourhood_group) %>%\n  count(neighbourhood, neighbourhood_group)\nboroughs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 221 × 3\n   neighbourhood              neighbourhood_group     n\n   <chr>                      <chr>               <int>\n 1 Allerton                   Bronx                  42\n 2 Arden Heights              Staten Island           4\n 3 Arrochar                   Staten Island          21\n 4 Arverne                    Queens                 77\n 5 Astoria                    Queens                900\n 6 Bath Beach                 Brooklyn               17\n 7 Battery Park City          Manhattan              70\n 8 Bay Ridge                  Brooklyn              141\n 9 Bay Terrace                Queens                  6\n10 Bay Terrace, Staten Island Staten Island           2\n# … with 211 more rows\n```\n:::\n\n```{.r .cell-code}\nboroughs %>%\ntreemap(boroughs,\n        index= c(\"neighbourhood_group\", \"neighbourhood\"),\n        vSize = \"n\",\n        type = \"index\",\n        title = \"Count of Listings by Neighborhood, Airbnb NYC 2019\"\n)\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw6_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\nWow. This really paints a picture regarding where the listings are located. I can easily see that Manhattan and Brooklyn are by far the most popular, with Queens in third, and the Bronx and Staten Island having a very small proportion of rows.\n\nIt would be interesting to create another treemap of average prices in each neighborhood.\n\n::: {.cell}\n\n```{.r .cell-code}\n#prep the data frame\nboroughs_price <- airbnb_orig %>%\n  select(neighbourhood, neighbourhood_group, price) %>%\n  group_by(neighbourhood, neighbourhood_group) %>%\n  summarize(median(price))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'neighbourhood'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nboroughs_price\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 221 × 3\n# Groups:   neighbourhood [221]\n   neighbourhood              neighbourhood_group `median(price)`\n   <chr>                      <chr>                         <dbl>\n 1 Allerton                   Bronx                          66.5\n 2 Arden Heights              Staten Island                  72.5\n 3 Arrochar                   Staten Island                  65  \n 4 Arverne                    Queens                        125  \n 5 Astoria                    Queens                         85  \n 6 Bath Beach                 Brooklyn                       69  \n 7 Battery Park City          Manhattan                     195  \n 8 Bay Ridge                  Brooklyn                       85  \n 9 Bay Terrace                Queens                        142. \n10 Bay Terrace, Staten Island Staten Island                 102. \n# … with 211 more rows\n```\n:::\n\n```{.r .cell-code}\nboroughs_price %>%\ntreemap(boroughs,\n        index= c(\"neighbourhood_group\", \"neighbourhood\"),\n        vSize = \"median(price)\",\n        type = \"index\",\n        title = \"Median Listing Price by Neighborhood, Airbnb NYC 2019\"\n)\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw6_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\nCool! Fort Wadsworth and then Woodrow are clearly the most expensive. Is that the castle, and/or the outliers I never dealt with? \n\n",
    "supporting": [
      "SarahMcAlpine_hw6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}