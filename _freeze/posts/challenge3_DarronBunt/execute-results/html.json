{
  "hash": "125336c2d20393ea1ac3982ded629a65",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"Darron Bunt\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"10/16/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  -  eggs\n  - darron_bunt\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Step 1 - Read in data\n\n**Read in one (or more) of the following datasets, using the correct R package and command.**\n\n-   eggs_tidy.csv ⭐⭐ \n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs <- read_csv(\"_data/eggs_tidy.csv\")\n```\n:::\n\n\n### Step 2 - Briefly describe the data\n\n**Describe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"**\n\nThe dataset examines the monthly price (in cents) of large and extra large eggs, sold by either the half dozen or by the dozen, between 2004-2013.\n\nFor data to be tidy, it must meet three criteria:\n1. each variable must have its own column.\n2. each observation must have its own row.\n3. each value must have its own cell.\n\nThe month and the year are good to go - they are their own variable, and in their own columns. \n\nIn the remaining four columns, however, there are two egg size variables (large and extra large) two egg quantity variables (half dozen and dozen), as well as a price variable. \n\nAccordingly, to tidy this data, I want to pivot the data such that I will have five columns instead of six. Two of these columns will be the same as the original dataset - month and year - while three will be new - egg size, egg quantity, and egg price.\n\n## Step 3 - Anticipate the End Result\n\n**The first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.**\n\nWhen we consider the full dataset, there are 480 potential egg values - 120 month/year combinations, multiplied by four variables (half/full dozen, large/extra large size).\n\nIf I want to pivot to five variables - month/year, egg size, egg quantity, and price - there are four variables that are going to dictate the final size of the dataset (egg size (2) and egg quantity (2)). 120 multiplied by 4 is 480, so I'm expecting to have a pivoted dataset that is 480 rows long and has the five identified columns. \n\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\nThere are two different variables contained within each of the four egg-related columns - the size (large/extra large) and the quantity (dozen/half dozen). I'm going to need to create TWO columns from the values in each of the original columns.\n\nI can use the names_sep option in pivot functions to help me do this. But if my sep is going to be _ I'm going to need some new column names first (because three of the four original columns actually contain two _ each).\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_new <- eggs %>%\n  rename(\"Xlarge_halfdozen\" = \"extra_large_half_dozen\",\n         \"Xlarge_dozen\" = \"extra_large_dozen\",\n         \"large_halfdozen\" = \"large_half_dozen\"\n         )\neggs_new\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 6\n   month      year large_halfdozen large_dozen Xlarge_halfdozen Xlarge_dozen\n   <chr>     <dbl>           <dbl>       <dbl>            <dbl>        <dbl>\n 1 January    2004            126         230              132          230 \n 2 February   2004            128.        226.             134.         230 \n 3 March      2004            131         225              137          230 \n 4 April      2004            131         225              137          234.\n 5 May        2004            131         225              137          236 \n 6 June       2004            134.        231.             137          241 \n 7 July       2004            134.        234.             137          241 \n 8 August     2004            134.        234.             137          241 \n 9 September  2004            130.        234.             136.         241 \n10 October    2004            128.        234.             136.         241 \n# … with 110 more rows\n```\n:::\n:::\n\nOk, now I have column names that I can use to pivot_longer and create the tibble I'm looking for.\n\n## Step 4- Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_by_type <- eggs_new %>%\n  pivot_longer(cols = contains(\"large\"),\n               names_to = c(\"Size\", \"Quantity\"),\n               names_sep= \"_\",\n               values_to = \"AvgPrice\"\n               )\neggs_by_type\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 480 × 5\n   month     year Size   Quantity  AvgPrice\n   <chr>    <dbl> <chr>  <chr>        <dbl>\n 1 January   2004 large  halfdozen     126 \n 2 January   2004 large  dozen         230 \n 3 January   2004 Xlarge halfdozen     132 \n 4 January   2004 Xlarge dozen         230 \n 5 February  2004 large  halfdozen     128.\n 6 February  2004 large  dozen         226.\n 7 February  2004 Xlarge halfdozen     134.\n 8 February  2004 Xlarge dozen         230 \n 9 March     2004 large  halfdozen     131 \n10 March     2004 large  dozen         225 \n# … with 470 more rows\n```\n:::\n:::\n\nThis meets the case for tidy data because:\n1. each variable has its own column (month, year, size, quantity, price)\n2. Each observation has its own row \n3. Every value has its own cell\n\nBoom. Did the thing.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}