{
  "hash": "ac0ab7613f9a90832664e9601f1df03d",
  "result": {
    "markdown": "---\ntitle: \"Challenge 8 Instructions\"\nauthor: \"Meredith Rolfe\"\ndescription: \"Joining Data\"\ndate: \"08/25/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_8\n  - railroads\n  - snl\n  - faostat\n  - debt\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(reshape2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in multiple data sets, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  join two or more data sets and analyze some aspect of the joined data\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n  - military marriages ⭐⭐\n  - faostat ⭐⭐\n  - railroads  ⭐⭐⭐\n  - fed_rate ⭐⭐⭐\n  - debt ⭐⭐⭐\n  - us_hh ⭐⭐⭐⭐\n  - snl ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsnl_actors <- read_csv(\"_data/snl_actors.csv\", show_col_types = FALSE)\nsnl_casts <- read_csv(\"_data/snl_casts.csv\", show_col_types = FALSE)\nsnl_seasons <- read_csv(\"_data/snl_seasons.csv\", show_col_types = FALSE)\n\nhead(snl_actors)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  aid            url           type  gender \n  <chr>          <chr>         <chr> <chr>  \n1 Kate McKinnon  /Cast/?KaMc   cast  female \n2 Alex Moffat    /Cast/?AlMo   cast  male   \n3 Ego Nwodim     /Cast/?EgNw   cast  unknown\n4 Chris Redd     /Cast/?ChRe   cast  male   \n5 Kenan Thompson /Cast/?KeTh   cast  male   \n6 Carey Mulligan /Guests/?3677 guest andy   \n```\n:::\n\n```{.r .cell-code}\nhead(snl_casts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  aid                sid featured first_epid last_epid update_…¹ n_epi…² seaso…³\n  <chr>            <dbl> <lgl>         <dbl>     <dbl> <lgl>       <dbl>   <dbl>\n1 A. Whitney Brown    11 TRUE       19860222        NA FALSE           8   0.444\n2 A. Whitney Brown    12 TRUE             NA        NA FALSE          20   1    \n3 A. Whitney Brown    13 TRUE             NA        NA FALSE          13   1    \n4 A. Whitney Brown    14 TRUE             NA        NA FALSE          20   1    \n5 A. Whitney Brown    15 TRUE             NA        NA FALSE          20   1    \n6 A. Whitney Brown    16 TRUE             NA        NA FALSE          20   1    \n# … with abbreviated variable names ¹​update_anchor, ²​n_episodes,\n#   ³​season_fraction\n```\n:::\n\n```{.r .cell-code}\nhead(snl_seasons)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n    sid  year first_epid last_epid n_episodes\n  <dbl> <dbl>      <dbl>     <dbl>      <dbl>\n1     1  1975   19751011  19760731         24\n2     2  1976   19760918  19770521         22\n3     3  1977   19770924  19780520         20\n4     4  1978   19781007  19790526         20\n5     5  1979   19791013  19800524         20\n6     6  1980   19801115  19810411         13\n```\n:::\n:::\n\nWe first read in the 3 csv files associated with the SNL dataset, snl_actors, snl_casts and snl_seasons. Going further, we will check which of the columns have NA values in the first dataframe we consider, which is the snl_actors dataframe. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_na_col_count <-sapply(snl_actors, function(col_name) sum(length(which(is.na(col_name)))))\nna_col_count <- data.frame(get_na_col_count)\nna_col_count\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       get_na_col_count\naid                   0\nurl                  57\ntype                  0\ngender                0\n```\n:::\n:::\n\n### Briefly describe the data\n\nThe data consists of 3 separate files, each containing information about the actors, cast and seasons of artists who have featured on the program \"Saturday Night Live\". This data gives us information about in what capacity each individual featured as (cast, crew, guest), which season had how many episodes, etc. \n\n\nWe can observe that only the url column contains NA values. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl_na <- subset(snl_actors, is.na(snl_actors$url))\nurl_na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 57 × 4\n   aid               url   type    gender\n   <chr>             <chr> <chr>   <chr> \n 1 Don Roy King      <NA>  unknown male  \n 2 Liam Payne        <NA>  unknown male  \n 3 Louis Tomlinson   <NA>  unknown male  \n 4 Zayn Malik        <NA>  unknown male  \n 5 Caleb Followill   <NA>  unknown male  \n 6 Jared Followill   <NA>  unknown male  \n 7 Matthew Followill <NA>  unknown male  \n 8 Nathan Followill  <NA>  unknown male  \n 9 Regine Chassagne  <NA>  unknown female\n10 William Butler    <NA>  unknown male  \n# … with 47 more rows\n```\n:::\n:::\n\nOn further investigation, we can see that all of these entries have unknown type, i.e. it is unknown whether the actor is a crew, cast or guest, except for one. \"Jack Handey\", a crew, has NA url type. \n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\n\n::: {.cell}\n\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n### Join \n\nBe sure to include a sanity check, and double-check that case count is correct!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join actors and casts dataframes. \na_c_join = merge(x=snl_actors, y=snl_casts, by =\"aid\")\n\n# Select specific columns for visualization\na_c <- a_c_join %>%\n  select(aid, type, gender, sid, featured, n_episodes)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Most featured actors by  no. of highest episodes by seasons\nhighest_episodes_by_season_by_aid <- a_c[a_c$featured==TRUE, ] %>%\n  group_by(sid, aid) %>%\n  summarise(\n    total_ep = sum(n_episodes)\n  ) %>%\n  #arrange(sid, desc(total_ep))\n  summarise(\n    max_val = max(total_ep)\n  )\n\nhighest_episodes_by_season <- a_c[a_c$featured==TRUE, ] %>%\n  group_by(sid) %>%\n  summarise(\n    total_ep = sum(n_episodes)\n  )\n\nggplot(highest_episodes_by_season, aes(x=sid)) + \n geom_histogram(aes(y=..density..), colour=\"black\", fill=\"white\")+\n geom_density(alpha=.2, fill=\"#FF6666\") + \n  ggtitle(\"Density plot of most featured actors by season\") + \n  labs(\n    x=\"Density\",\n    y=\"Season\"\n  )\n```\n\n::: {.cell-output-display}\n![](challenge8_SahasraIyer_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge the previous dataframe with the seasons dataframe\na_c_s_join <- merge(x=a_c, y=snl_seasons, by=\"sid\")\n\n# Select required columns\na_c_s <- a_c_s_join %>%\n  select(sid, aid, type, gender, featured, first_epid, last_epid, n_episodes.x)\n\noptions(dplyr.summarise.inform = FALSE)\n\n# Group data by season and gender, basis if the individual featured in the season, to get total gender counts\ndata <- a_c_s %>%\n  group_by(sid) %>%\n  summarise(\n    Male = sum(gender=='male'),\n    Female = sum(gender=='female')\n  )\n\ndata <- melt(data, \"sid\")\n\n# Render bar plot for side-by-side male vs female representation by season \nggplot(data, aes(factor(sid), value, fill = variable)) + \n    geom_bar(stat = \"identity\", position = \"dodge\") + \n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +\n    labs(title=\"Gender representation across seasons\", \n         x = \"Season\", y = \"Gender Participation\", fill=\"Gender\")\n```\n\n::: {.cell-output-display}\n![](challenge8_SahasraIyer_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\nFrom the above graph, we observe that the overall female participation has seen an increase in the recent years.\nLet us now take a look at a stacked plot of the same. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngender_to_cat <- data %>%\n  mutate(variable=as.character(variable))\n\ngender_to_cat <- gender_to_cat %>%\n  rename(\n    Gender = variable\n  )\n\nggplot(gender_to_cat, aes(x = sid, y = value)) +\n  geom_bar(\n    aes(color = Gender, fill = Gender),\n    stat = \"identity\") + \n  labs(\n    x = \"Seasons\",\n    y = \"Frequency\",\n    title = \"Stacked plot of participation through seasons\"\n  )\n```\n\n::: {.cell-output-display}\n![](challenge8_SahasraIyer_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\nOn observing the above plot, we can see that while the overall number of women to participate has increased across the seasons, the proportion of women that have featured since the show's inception has not seen a significant rise. \n\n\n\n\n\n",
    "supporting": [
      "challenge8_SahasraIyer_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}