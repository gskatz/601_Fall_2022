{
  "hash": "9691330c41a181b3adcb8c0bd17ba9bc",
  "result": {
    "markdown": "---\ntitle: \"Challenge 6 Instructions\"\nauthor: \"Meredith Rolfe\"\ndescription: \"Visualizing Time and Relationships\"\ndate: \"08/23/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_6\n  - hotel_bookings\n  - air_bnb\n  - fed_rate\n  - debt\n  - usa_households\n  - abc_poll\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(lubridate)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least one graph including time (evolution)\n\n-   try to make them \"publication\" ready (optional)\n-   Explain why you choose the specific graph type\n\n5)  Create at least one graph depicting part-whole or flow relationships\n\n-   try to make them \"publication\" ready (optional)\n-   Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   debt ⭐\n-   fed_rate ⭐⭐\n-   abc_poll ⭐⭐⭐\n-   usa_hh ⭐⭐⭐\n-   hotel_bookings ⭐⭐⭐⭐\n-   AB_NYC ⭐⭐⭐⭐⭐\n\n## Hotels booking data- (hotel_bookings.csv)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotel <- read_csv(\"_data/hotel_bookings.csv\", show_col_types = FALSE)\nhotel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 Resor…       0     342    2015 July         27       1       0       0      2\n 2 Resor…       0     737    2015 July         27       1       0       0      2\n 3 Resor…       0       7    2015 July         27       1       0       1      1\n 4 Resor…       0      13    2015 July         27       1       0       1      1\n 5 Resor…       0      14    2015 July         27       1       0       2      2\n 6 Resor…       0      14    2015 July         27       1       0       2      2\n 7 Resor…       0       0    2015 July         27       1       0       2      2\n 8 Resor…       0       9    2015 July         27       1       0       2      2\n 9 Resor…       1      85    2015 July         27       1       0       3      2\n10 Resor…       1      75    2015 July         27       1       0       3      2\n# … with 119,380 more rows, 22 more variables: children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n\n### Briefly describe the data\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\nTo count the number of unique values in all the columns we will do,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrapply(hotel,function(x)length(unique(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         hotel                    is_canceled \n                             2                              2 \n                     lead_time              arrival_date_year \n                           479                              3 \n            arrival_date_month       arrival_date_week_number \n                            12                             53 \n     arrival_date_day_of_month        stays_in_weekend_nights \n                            31                             17 \n          stays_in_week_nights                         adults \n                            35                             14 \n                      children                         babies \n                             6                              5 \n                          meal                        country \n                             5                            178 \n                market_segment           distribution_channel \n                             8                              5 \n             is_repeated_guest         previous_cancellations \n                             2                             15 \nprevious_bookings_not_canceled             reserved_room_type \n                            73                             10 \n            assigned_room_type                booking_changes \n                            12                             21 \n                  deposit_type                          agent \n                             3                            334 \n                       company           days_in_waiting_list \n                           353                            128 \n                 customer_type                            adr \n                             4                           8879 \n   required_car_parking_spaces      total_of_special_requests \n                             5                              6 \n            reservation_status        reservation_status_date \n                             3                            926 \n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\nTo find the unique values for the hotel we will do,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(hotel$hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Resort Hotel\" \"City Hotel\"  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(hotel$country)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  ABW   AGO   AIA   ALB   AND   ARE   ARG   ARM   ASM   ATA   ATF   AUS   AUT \n    2   362     1    12     7    51   214     8     1     2     1   426  1263 \n  AZE   BDI   BEL   BEN   BFA   BGD   BGR   BHR   BHS   BIH   BLR   BOL   BRA \n   17     1  2342     3     1    12    75     5     1    13    26    10  2224 \n  BRB   BWA   CAF   CHE   CHL   CHN   CIV   CMR    CN   COL   COM   CPV   CRI \n    4     1     5  1730    65   999     6    10  1279    71     2    24    19 \n  CUB   CYM   CYP   CZE   DEU   DJI   DMA   DNK   DOM   DZA   ECU   EGY   ESP \n    8     1    51   171  7287     1     1   435    14   103    27    32  8568 \n  EST   ETH   FIN   FJI   FRA   FRO   GAB   GBR   GEO   GGY   GHA   GIB   GLP \n   83     3   447     1 10415     5     4 12129    22     3     4    18     2 \n  GNB   GRC   GTM   GUY   HKG   HND   HRV   HUN   IDN   IMN   IND   IRL   IRN \n    9   128     4     1    29     1   100   230    35     2   152  3375    83 \n  IRQ   ISL   ISR   ITA   JAM   JEY   JOR   JPN   KAZ   KEN   KHM   KIR   KNA \n   14    57   669  3766     6     8    21   197    19     6     2     1     2 \n  KOR   KWT   LAO   LBN   LBY   LCA   LIE   LKA   LTU   LUX   LVA   MAC   MAR \n  133    16     2    31     8     1     3     7    81   287    55    16   259 \n  MCO   MDG   MDV   MEX   MKD   MLI   MLT   MMR   MNE   MOZ   MRT   MUS   MWI \n    4     1    12    85    10     1    18     1     5    67     1     7     2 \n  MYS   MYT   NAM   NCL   NGA   NIC   NLD   NOR   NPL  NULL   NZL   OMN   PAK \n   28     2     1     1    34     1  2104   607     1   488    74    18    14 \n  PAN   PER   PHL   PLW   POL   PRI   PRT   PRY   PYF   QAT   ROU   RUS   RWA \n    9    29    40     1   919    12 48590     4     1    15   500   632     2 \n  SAU   SDN   SEN   SGP   SLE   SLV   SMR   SRB   STP   SUR   SVK   SVN   SWE \n   48     1    11    39     1     2     1   101     2     5    65    57  1024 \n  SYC   SYR   TGO   THA   TJK   TMP   TUN   TUR   TWN   TZA   UGA   UKR   UMI \n    2     3     2    59     9     3    39   248    51     5     2    68     1 \n  URY   USA   UZB   VEN   VGB   VNM   ZAF   ZMB   ZWE \n   32  2097     4    26     1     8    80     2     4 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(hotel, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$hotel\n[1] \"character\"\n\n$is_canceled\n[1] \"numeric\"\n\n$lead_time\n[1] \"numeric\"\n\n$arrival_date_year\n[1] \"numeric\"\n\n$arrival_date_month\n[1] \"character\"\n\n$arrival_date_week_number\n[1] \"numeric\"\n\n$arrival_date_day_of_month\n[1] \"numeric\"\n\n$stays_in_weekend_nights\n[1] \"numeric\"\n\n$stays_in_week_nights\n[1] \"numeric\"\n\n$adults\n[1] \"numeric\"\n\n$children\n[1] \"numeric\"\n\n$babies\n[1] \"numeric\"\n\n$meal\n[1] \"character\"\n\n$country\n[1] \"character\"\n\n$market_segment\n[1] \"character\"\n\n$distribution_channel\n[1] \"character\"\n\n$is_repeated_guest\n[1] \"numeric\"\n\n$previous_cancellations\n[1] \"numeric\"\n\n$previous_bookings_not_canceled\n[1] \"numeric\"\n\n$reserved_room_type\n[1] \"character\"\n\n$assigned_room_type\n[1] \"character\"\n\n$booking_changes\n[1] \"numeric\"\n\n$deposit_type\n[1] \"character\"\n\n$agent\n[1] \"character\"\n\n$company\n[1] \"character\"\n\n$days_in_waiting_list\n[1] \"numeric\"\n\n$customer_type\n[1] \"character\"\n\n$adr\n[1] \"numeric\"\n\n$required_car_parking_spaces\n[1] \"numeric\"\n\n$total_of_special_requests\n[1] \"numeric\"\n\n$reservation_status\n[1] \"character\"\n\n$reservation_status_date\n[1] \"Date\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(hotel$hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Resort Hotel\" \"City Hotel\"  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhotelmut <- hotel %>% \n  mutate(arrival_date = str_c(arrival_date_day_of_month,\n                              arrival_date_month,\n                              arrival_date_year, sep=\"/\"),\n         arrival_date = dmy(arrival_date),\n         total_guests = adults + children + babies) %>% \n  select(-c(arrival_date_day_of_month,arrival_date_month,arrival_date_year))\n\nhotelmut\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 31\n   hotel     is_ca…¹ lead_…² arriv…³ stays…⁴ stays…⁵ adults child…⁶ babies meal \n   <chr>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl> <chr>\n 1 Resort H…       0     342      27       0       0      2       0      0 BB   \n 2 Resort H…       0     737      27       0       0      2       0      0 BB   \n 3 Resort H…       0       7      27       0       1      1       0      0 BB   \n 4 Resort H…       0      13      27       0       1      1       0      0 BB   \n 5 Resort H…       0      14      27       0       2      2       0      0 BB   \n 6 Resort H…       0      14      27       0       2      2       0      0 BB   \n 7 Resort H…       0       0      27       0       2      2       0      0 BB   \n 8 Resort H…       0       9      27       0       2      2       0      0 FB   \n 9 Resort H…       1      85      27       0       3      2       0      0 BB   \n10 Resort H…       1      75      27       0       3      2       0      0 HB   \n# … with 119,380 more rows, 21 more variables: country <chr>,\n#   market_segment <chr>, distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n\n\nTo change the data type of the agent and company variables from character to numeric.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotelmut <- hotelmut %>%\n  mutate(across(c(agent, company),~ replace(.,str_detect(., \"NULL\"), NA))) %>% mutate_at(vars(agent, company),as.numeric)\nis.numeric(hotelmut$agent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Time Dependent Visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewplot <- hotelmut %>% select(total_guests, arrival_date) %>%\n  group_by(arrival_date) %>%\n  summarise(net_guests = sum(total_guests, na.rm=TRUE))\n\nnewplot\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 793 × 2\n   arrival_date net_guests\n   <date>            <dbl>\n 1 2015-07-01          225\n 2 2015-07-02          190\n 3 2015-07-03          116\n 4 2015-07-04          181\n 5 2015-07-05          113\n 6 2015-07-06          154\n 7 2015-07-07          114\n 8 2015-07-08          139\n 9 2015-07-09          169\n10 2015-07-10          120\n# … with 783 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(newplot$arrival_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Min.      1st Qu.       Median         Mean      3rd Qu.         Max. \n\"2015-07-01\" \"2016-01-15\" \"2016-07-31\" \"2016-07-31\" \"2017-02-14\" \"2017-08-31\" \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnewplot1 <- ggplot(newplot, aes(x = arrival_date, y = net_guests)) +\n             ggtitle(\"Guest Count Vs. Arrival Date Trend: Jul 2015 - Jun 2016\") +\n             geom_line(color = \"darkgreen\") +\n             xlab(\"\") +\n             theme(axis.text.x = element_text(angle = 60, hjust = 1, colour = \"red\"),\n                   axis.text.y = element_text(colour = \"red\"),\n                   plot.background = element_rect(fill = \"lightblue\"),\n                   text = element_text(family = \"Courier New\")) +\n             scale_x_date(date_labels = \"%Y %b %d\", date_minor_breaks = \"1 month\",\n                          limit = c(as.Date(\"2015-07-01\"), as.Date(\"2016-07-01\")))\nnewplot1\n```\n\n::: {.cell-output-display}\n![](Manan_Patel_challenge6_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\ndata in the newplot data frame, with the x-axis showing the arrival_date variable and the y-axis showing the net_guests variable. The plot has a title, Guest Count Vs. Arrival Date Trend: Jul 2015 - Jun 2016, and the line is colored dark green.The x-axis uses custom date labels, shows minor breaks every month, and it is limited to the range of dates from July 1, 2015 to July 1, 2016. So, basically it creates a line graph to visualize trends for one year, from July 2015 to July 2016, using time series data. The graph shows the total number of guests who arrived on each day during this period. It also displays minor breaks for each month. The data reveals that the highest number of guests arrived during the first week of December 2015, followed by a sharp decrease. The number of guests appears to be consistent during the summer months of April, May, and June, which may be due to increased vacation travel during this period.\n\n## Visualizing Part-Whole Relationships\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a bar graph based on deposit_type\nlibrary(ggplot2)\nggplot(hotel, aes(deposit_type, fill = hotel)) +\n  geom_bar(color = \"black\", size = 0.5) +\n  scale_fill_manual(values = c(\"#FF0000\", \"#00FF00\", \"#0000FF\")) +\n  theme(panel.background = element_rect(fill = \"gray\"))\n```\n\n::: {.cell-output-display}\n![](Manan_Patel_challenge6_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nI selected a bar graph with the deposit type on the x-axis because it effectively illustrates the counts of each deposit type by hotel. The graph demonstrates that the majority of bookings from both hotels do not require a deposit. If a deposit is required, the city hotel has a higher number of non-refundable deposits than the resort hotel, which has a small number of refundable deposits. This visual representation clearly shows the differences between the two hotels and the types of deposits they require.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewplot2 <- hotelmut %>% \n  filter(reservation_status != 'Canceled', arrival_date >= as.Date(\"2015-07-01\") & arrival_date < as.Date(\"2016-07-01\")) %>%\n  select(meal) %>%\n  group_by(meal) %>%\n  summarise(total_count = n(), .groups = 'drop') %>%\n  filter(meal != \"Undefined\")\nnewplot2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  meal  total_count\n  <chr>       <int>\n1 BB          25591\n2 FB            210\n3 HB           4180\n4 SC           1828\n```\n:::\n:::\n\n\nWe uses the filter function to keep only rows that have a reservation_status value other than canceled and an arrival_date within the given date range then it selects only the meal column from the resulting data frame after it groups the data by meal and uses the summarise function to calculate the total count of reservations for each meal plan type. The .groups argument is used to specify that the grouping should be dropped from the output. Finally, the filter function is used again to remove rows with a meal value of Undefined.\n",
    "supporting": [
      "Manan_Patel_challenge6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}