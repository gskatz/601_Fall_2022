{
  "hash": "8907a3268c473d3c093db237abd0ccf2",
  "result": {
    "markdown": "---\ntitle: \"Challenge 6 Solutions\"\nauthor: \"Vishnupriya Varadharaju\"\ndescription: \"Visualizing Time and Relationships\"\ndate: \"11/30/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_6\n  - hotel_bookings\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(treemap)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nWorking with the Hotel Bookings Dataset\n\n## Read in data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reading in the CSV data\nh_book <- read_csv(\"_data/hotel_bookings.csv\", show_col_types = FALSE)\n\nh_book\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 Resor…       0     342    2015 July         27       1       0       0      2\n 2 Resor…       0     737    2015 July         27       1       0       0      2\n 3 Resor…       0       7    2015 July         27       1       0       1      1\n 4 Resor…       0      13    2015 July         27       1       0       1      1\n 5 Resor…       0      14    2015 July         27       1       0       2      2\n 6 Resor…       0      14    2015 July         27       1       0       2      2\n 7 Resor…       0       0    2015 July         27       1       0       2      2\n 8 Resor…       0       9    2015 July         27       1       0       2      2\n 9 Resor…       1      85    2015 July         27       1       0       3      2\n10 Resor…       1      75    2015 July         27       1       0       3      2\n# … with 119,380 more rows, 22 more variables: children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nThe following dataset has 119390 observations and 32 different fields. This is basically the data from two hotels - City Hotel & Resort Hotel. Each entry corresponds to a booking made by a customer. There are various information that are recorded with each booking. It includes the arrival date, number of days of stay, meal, type of room reserved, customer type, reservation status, number of adult/children and many more. The data consists of entries from countries all over the world.\n \n## Tidy Data (as needed)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To check the number of unique values in all the columns\nrapply(h_book,function(x)length(unique(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         hotel                    is_canceled \n                             2                              2 \n                     lead_time              arrival_date_year \n                           479                              3 \n            arrival_date_month       arrival_date_week_number \n                            12                             53 \n     arrival_date_day_of_month        stays_in_weekend_nights \n                            31                             17 \n          stays_in_week_nights                         adults \n                            35                             14 \n                      children                         babies \n                             6                              5 \n                          meal                        country \n                             5                            178 \n                market_segment           distribution_channel \n                             8                              5 \n             is_repeated_guest         previous_cancellations \n                             2                             15 \nprevious_bookings_not_canceled             reserved_room_type \n                            73                             10 \n            assigned_room_type                booking_changes \n                            12                             21 \n                  deposit_type                          agent \n                             3                            334 \n                       company           days_in_waiting_list \n                           353                            128 \n                 customer_type                            adr \n                             4                           8879 \n   required_car_parking_spaces      total_of_special_requests \n                             5                              6 \n            reservation_status        reservation_status_date \n                             3                            926 \n```\n:::\n\n```{.r .cell-code}\n# To check the unique values of hotel\nunique(h_book$hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Resort Hotel\" \"City Hotel\"  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# in country we can see that there is a field call NULL that can be removed\ntable(h_book$country)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  ABW   AGO   AIA   ALB   AND   ARE   ARG   ARM   ASM   ATA   ATF   AUS   AUT \n    2   362     1    12     7    51   214     8     1     2     1   426  1263 \n  AZE   BDI   BEL   BEN   BFA   BGD   BGR   BHR   BHS   BIH   BLR   BOL   BRA \n   17     1  2342     3     1    12    75     5     1    13    26    10  2224 \n  BRB   BWA   CAF   CHE   CHL   CHN   CIV   CMR    CN   COL   COM   CPV   CRI \n    4     1     5  1730    65   999     6    10  1279    71     2    24    19 \n  CUB   CYM   CYP   CZE   DEU   DJI   DMA   DNK   DOM   DZA   ECU   EGY   ESP \n    8     1    51   171  7287     1     1   435    14   103    27    32  8568 \n  EST   ETH   FIN   FJI   FRA   FRO   GAB   GBR   GEO   GGY   GHA   GIB   GLP \n   83     3   447     1 10415     5     4 12129    22     3     4    18     2 \n  GNB   GRC   GTM   GUY   HKG   HND   HRV   HUN   IDN   IMN   IND   IRL   IRN \n    9   128     4     1    29     1   100   230    35     2   152  3375    83 \n  IRQ   ISL   ISR   ITA   JAM   JEY   JOR   JPN   KAZ   KEN   KHM   KIR   KNA \n   14    57   669  3766     6     8    21   197    19     6     2     1     2 \n  KOR   KWT   LAO   LBN   LBY   LCA   LIE   LKA   LTU   LUX   LVA   MAC   MAR \n  133    16     2    31     8     1     3     7    81   287    55    16   259 \n  MCO   MDG   MDV   MEX   MKD   MLI   MLT   MMR   MNE   MOZ   MRT   MUS   MWI \n    4     1    12    85    10     1    18     1     5    67     1     7     2 \n  MYS   MYT   NAM   NCL   NGA   NIC   NLD   NOR   NPL  NULL   NZL   OMN   PAK \n   28     2     1     1    34     1  2104   607     1   488    74    18    14 \n  PAN   PER   PHL   PLW   POL   PRI   PRT   PRY   PYF   QAT   ROU   RUS   RWA \n    9    29    40     1   919    12 48590     4     1    15   500   632     2 \n  SAU   SDN   SEN   SGP   SLE   SLV   SMR   SRB   STP   SUR   SVK   SVN   SWE \n   48     1    11    39     1     2     1   101     2     5    65    57  1024 \n  SYC   SYR   TGO   THA   TJK   TMP   TUN   TUR   TWN   TZA   UGA   UKR   UMI \n    2     3     2    59     9     3    39   248    51     5     2    68     1 \n  URY   USA   UZB   VEN   VGB   VNM   ZAF   ZMB   ZWE \n   32  2097     4    26     1     8    80     2     4 \n```\n:::\n\n```{.r .cell-code}\nh_book <- h_book %>% \n  filter(!(country == \"NULL\"))\n```\n:::\n\n\nIn country, there are entries called NULL, which can be removed as it may not be useful for the analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# to check the different types of the fields\nhead(h_book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n\n```{.r .cell-code}\nsapply(h_book, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         hotel                    is_canceled \n                   \"character\"                      \"numeric\" \n                     lead_time              arrival_date_year \n                     \"numeric\"                      \"numeric\" \n            arrival_date_month       arrival_date_week_number \n                   \"character\"                      \"numeric\" \n     arrival_date_day_of_month        stays_in_weekend_nights \n                     \"numeric\"                      \"numeric\" \n          stays_in_week_nights                         adults \n                     \"numeric\"                      \"numeric\" \n                      children                         babies \n                     \"numeric\"                      \"numeric\" \n                          meal                        country \n                   \"character\"                    \"character\" \n                market_segment           distribution_channel \n                   \"character\"                    \"character\" \n             is_repeated_guest         previous_cancellations \n                     \"numeric\"                      \"numeric\" \nprevious_bookings_not_canceled             reserved_room_type \n                     \"numeric\"                    \"character\" \n            assigned_room_type                booking_changes \n                   \"character\"                      \"numeric\" \n                  deposit_type                          agent \n                   \"character\"                    \"character\" \n                       company           days_in_waiting_list \n                   \"character\"                      \"numeric\" \n                 customer_type                            adr \n                   \"character\"                      \"numeric\" \n   required_car_parking_spaces      total_of_special_requests \n                     \"numeric\"                      \"numeric\" \n            reservation_status        reservation_status_date \n                   \"character\"                         \"Date\" \n```\n:::\n:::\n\n\nFrom the above analysis, we can see that two fields, Agents and Company have numerical values in them, but have the datatype marked as character. These NULL entries can be changed to NA and the datatype can be changed to numeric. Also, the arrival date in year, month and date can be combined into a single field called as arrival date. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# combining the arrival date into a single field\n# to find the total number of guests in the hotel - add adults, children and babies\n\nh_book_mut <- h_book %>% \n  mutate(arrival_date = str_c(arrival_date_day_of_month,\n                              arrival_date_month,\n                              arrival_date_year, sep=\"/\"),\n         arrival_date = dmy(arrival_date),\n         total_guests = adults + children + babies) %>% \n  select(-c(arrival_date_day_of_month,arrival_date_month,arrival_date_year))\n\nh_book_mut\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 118,902 × 31\n   hotel     is_ca…¹ lead_…² arriv…³ stays…⁴ stays…⁵ adults child…⁶ babies meal \n   <chr>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl> <chr>\n 1 Resort H…       0     342      27       0       0      2       0      0 BB   \n 2 Resort H…       0     737      27       0       0      2       0      0 BB   \n 3 Resort H…       0       7      27       0       1      1       0      0 BB   \n 4 Resort H…       0      13      27       0       1      1       0      0 BB   \n 5 Resort H…       0      14      27       0       2      2       0      0 BB   \n 6 Resort H…       0      14      27       0       2      2       0      0 BB   \n 7 Resort H…       0       0      27       0       2      2       0      0 BB   \n 8 Resort H…       0       9      27       0       2      2       0      0 FB   \n 9 Resort H…       1      85      27       0       3      2       0      0 BB   \n10 Resort H…       1      75      27       0       3      2       0      0 HB   \n# … with 118,892 more rows, 21 more variables: country <chr>,\n#   market_segment <chr>, distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n\nChanging the datatype of agent and company from char to numeric\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mutating the datatype of the agent and company field from char to numeric\n\nh_book_mut <- h_book_mut %>%\n  mutate(across(c(agent, company),~ replace(.,str_detect(., \"NULL\"), NA))) %>% mutate_at(vars(agent, company),as.numeric)\n\nis.numeric(h_book_mut$agent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.numeric(h_book_mut$company)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Time Dependent Visualization\n\nFor the time dependent visualization I want to see how many guests are arriving over a period of time on a daily basis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot1_data <- h_book_mut %>% select(total_guests, arrival_date) %>%\n  group_by(arrival_date) %>%\n  summarise(net_guests = sum(total_guests, na.rm=TRUE))\n\nplot1_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 793 × 2\n   arrival_date net_guests\n   <date>            <dbl>\n 1 2015-07-01          220\n 2 2015-07-02          190\n 3 2015-07-03          116\n 4 2015-07-04          181\n 5 2015-07-05          113\n 6 2015-07-06          152\n 7 2015-07-07          114\n 8 2015-07-08          139\n 9 2015-07-09          166\n10 2015-07-10          118\n# … with 783 more rows\n```\n:::\n\n```{.r .cell-code}\n# finding the date ranges of the arrival date of this data\n\nsummary(plot1_data$arrival_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Min.      1st Qu.       Median         Mean      3rd Qu.         Max. \n\"2015-07-01\" \"2016-01-15\" \"2016-07-31\" \"2016-07-31\" \"2017-02-14\" \"2017-08-31\" \n```\n:::\n:::\n\n\nFrom above, we can see that the arrival dates lie between July 2015 - August 2017.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(plot1_data, aes(x=arrival_date, y=net_guests)) + ggtitle(\"Guest Count Vs. Arrival Date Trend: Jul 2015 - Jun 2016\") +\n  geom_line(color=\"maroon\") + \n  xlab(\"\") + theme(axis.text.x=element_text(angle=60, hjust=1)) +\n  scale_x_date(date_labels = \"%Y %b %d\", date_minor_breaks = \"1 month\", limit=c(as.Date(\"2015-07-01\"),as.Date(\"2016-07-01\")))\n\np\n```\n\n::: {.cell-output-display}\n![](VishnupriyaVaradharaju_Challenge6_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nHere, I am visualizing the trends for a period of one year from Jul 2015 - Jul 2016 by using a line graph as it can precisely be used to see trends for time series data. In the above visualization we can see the total guests who have arrived on a particular day. Furthermore, we can see the monthly breaks as well. The influx of guests peaked during the first week of December 2015 and dipped sharply the following week. During the months of summer i.e. April, May, June, the number of incoming guests seem to be consistent. This can be because of the vacation that many families might take during the summer break.\n\n\n## Visualizing Part-Whole Relationships\n\nFor visualizing part-whole relationship, I want to see the proportion of guests who have chosen different categories for meal. Firstly, I want need to group-by to get the count of each meal category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(h_book_mut$meal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"BB\"        \"FB\"        \"HB\"        \"SC\"        \"Undefined\"\n```\n:::\n:::\n\n\nThere are 5 meal categories here.\nBB - 'Bed & Breakfast'\nFB - 'Full Board' - Breakfast, Lunch, Dinner\nHB - 'Half Board' - Breakfast & Dinner\nSC - 'Self-Catering' - No meals included\nUndefined - which can be ignored\n\nI want to gather arrival date data of one year from Jul 2015 to Jun 2016 and exclude reservation status which says canceled. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot2_data <- h_book_mut %>% \n  filter(reservation_status != 'Canceled', arrival_date >= as.Date(\"2015-07-01\") & arrival_date < as.Date(\"2016-07-01\")) %>%\n  select(meal) %>%\n  group_by(meal) %>%\n  summarise(total_count = n(), .groups = 'drop') %>%\n  filter(meal != \"Undefined\")\n\nplot2_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  meal  total_count\n  <chr>       <int>\n1 BB          25353\n2 FB            210\n3 HB           4170\n4 SC           1827\n```\n:::\n:::\n\n\nPlotting the above data using a tree map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(plot2_data,\n            index=\"meal\",\n            vSize=\"total_count\",\n            type=\"index\",\n            title = \"Meal Cateogries :Jul 2015 - Jun 2016\",\n            palette = \"Set3\",\n            border.lwds = 1.5\n            )\n```\n\n::: {.cell-output-display}\n![](VishnupriyaVaradharaju_Challenge6_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nThe most preferred meal scheme was BB, followed by HB, SC and finally FB. The reason for choosing a treemap is to give an easy overview of which category is the most preferred in the meal type. This can help with the initial analysis and we can further dive deep into why BB is preferred most, in which countries and by which demography. Maybe guests who have children tend to choose that option or guests who are just staying only for a night, etc. \n\n",
    "supporting": [
      "VishnupriyaVaradharaju_Challenge6_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}