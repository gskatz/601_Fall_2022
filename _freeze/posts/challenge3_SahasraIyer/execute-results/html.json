{
  "hash": "f6cba034ab01e01c5a113f6ad01b253e",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 Instructions\"\nauthor: \"Meredith Rolfe\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"08/17/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - eggs\n  - australian_marriage\n  - usa_households\n  - sce_labor\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reading animal_weight.csv into a dataframe\nanimal_wt = read_csv(\"_data/animal_weight.csv\")\n\n\n# Displaying the top 5 rows in the dataframe\nhead(animal_wt, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 17\n  IPCC A‚Ä¶¬π Cattl‚Ä¶¬≤ Cattl‚Ä¶¬≥ Buffa‚Ä¶‚Å¥ Swine‚Ä¶‚Åµ Swine‚Ä¶‚Å∂ Chick‚Ä¶‚Å∑ Chick‚Ä¶‚Å∏ Ducks Turkeys\n  <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl>\n1 Indian ‚Ä¶     275     110     295      28      28     0.9     1.8   2.7     6.8\n2 Eastern‚Ä¶     550     391     380      50     180     0.9     1.8   2.7     6.8\n3 Africa       275     173     380      28      28     0.9     1.8   2.7     6.8\n4 Oceania      500     330     380      45     180     0.9     1.8   2.7     6.8\n5 Western‚Ä¶     600     420     380      50     198     0.9     1.8   2.7     6.8\n# ‚Ä¶ with 7 more variables: Sheep <dbl>, Goats <dbl>, Horses <dbl>, Asses <dbl>,\n#   Mules <dbl>, Camels <dbl>, Llamas <dbl>, and abbreviated variable names\n#   ¬π‚Äã`IPCC Area`, ¬≤‚Äã`Cattle - dairy`, ¬≥‚Äã`Cattle - non-dairy`, ‚Å¥‚ÄãBuffaloes,\n#   ‚Åµ‚Äã`Swine - market`, ‚Å∂‚Äã`Swine - breeding`, ‚Å∑‚Äã`Chicken - Broilers`,\n#   ‚Å∏‚Äã`Chicken - Layers`\n```\n:::\n\n```{.r .cell-code}\n# Checking for any NaN values in columns\napply(animal_wt, 2, anyNA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         IPCC Area     Cattle - dairy Cattle - non-dairy          Buffaloes \n             FALSE              FALSE              FALSE              FALSE \n    Swine - market   Swine - breeding Chicken - Broilers   Chicken - Layers \n             FALSE              FALSE              FALSE              FALSE \n             Ducks            Turkeys              Sheep              Goats \n             FALSE              FALSE              FALSE              FALSE \n            Horses              Asses              Mules             Camels \n             FALSE              FALSE              FALSE              FALSE \n            Llamas \n             FALSE \n```\n:::\n\n```{.r .cell-code}\n# Column names of the dataframe\ncolnames(animal_wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"IPCC Area\"          \"Cattle - dairy\"     \"Cattle - non-dairy\"\n [4] \"Buffaloes\"          \"Swine - market\"     \"Swine - breeding\"  \n [7] \"Chicken - Broilers\" \"Chicken - Layers\"   \"Ducks\"             \n[10] \"Turkeys\"            \"Sheep\"              \"Goats\"             \n[13] \"Horses\"             \"Asses\"              \"Mules\"             \n[16] \"Camels\"             \"Llamas\"            \n```\n:::\n:::\n\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\nThe data looks to be sourced to collect data for different breeds of farm-bred animals, both animals and poultry (cattle, chicken, buffaloes, etc.) and their corresponding weights. It also contains the area that these animals are native to. Pivoting this data will tidy it up, as the only differentiator for all the rows is the weight value, which can be converted to a single column. \n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA    1012.    1850.\n2 USA      1990 NAFTA     735.    1075.\n3 France   1980 EU        188.    1190.\n4 Mexico   1990 NAFTA    1449.    1194.\n5 USA      1980 NAFTA    1314.     311.\n6 France   1990 EU        190.     554.\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(animal_wt, 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 √ó 17\n  IPCC A‚Ä¶¬π Cattl‚Ä¶¬≤ Cattl‚Ä¶¬≥ Buffa‚Ä¶‚Å¥ Swine‚Ä¶‚Åµ Swine‚Ä¶‚Å∂ Chick‚Ä¶‚Å∑ Chick‚Ä¶‚Å∏ Ducks Turkeys\n  <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl>\n1 Indian ‚Ä¶     275     110     295      28      28     0.9     1.8   2.7     6.8\n2 Eastern‚Ä¶     550     391     380      50     180     0.9     1.8   2.7     6.8\n3 Africa       275     173     380      28      28     0.9     1.8   2.7     6.8\n4 Oceania      500     330     380      45     180     0.9     1.8   2.7     6.8\n5 Western‚Ä¶     600     420     380      50     198     0.9     1.8   2.7     6.8\n6 Latin A‚Ä¶     400     305     380      28      28     0.9     1.8   2.7     6.8\n7 Asia         350     391     380      50     180     0.9     1.8   2.7     6.8\n8 Middle ‚Ä¶     275     173     380      28      28     0.9     1.8   2.7     6.8\n9 Norther‚Ä¶     604     389     380      46     198     0.9     1.8   2.7     6.8\n# ‚Ä¶ with 7 more variables: Sheep <dbl>, Goats <dbl>, Horses <dbl>, Asses <dbl>,\n#   Mules <dbl>, Camels <dbl>, Llamas <dbl>, and abbreviated variable names\n#   ¬π‚Äã`IPCC Area`, ¬≤‚Äã`Cattle - dairy`, ¬≥‚Äã`Cattle - non-dairy`, ‚Å¥‚ÄãBuffaloes,\n#   ‚Åµ‚Äã`Swine - market`, ‚Å∂‚Äã`Swine - breeding`, ‚Å∑‚Äã`Chicken - Broilers`,\n#   ‚Å∏‚Äã`Chicken - Layers`\n```\n:::\n\n```{.r .cell-code}\n# Existing rows\nnrow(animal_wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\n# Existing cols\nncol(animal_wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n:::\n\n\nAny additional comments?\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing              1012.\n 2 Mexico   1980 NAFTA incoming              1850.\n 3 USA      1990 NAFTA outgoing               735.\n 4 USA      1990 NAFTA incoming              1075.\n 5 France   1980 EU    outgoing               188.\n 6 France   1980 EU    incoming              1190.\n 7 Mexico   1990 NAFTA outgoing              1449.\n 8 Mexico   1990 NAFTA incoming              1194.\n 9 USA      1980 NAFTA outgoing              1314.\n10 USA      1980 NAFTA incoming               311.\n11 France   1990 EU    outgoing               190.\n12 France   1990 EU    incoming               554.\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\nEvery row is uniquely identified by 1 variable i.e. the country column which represents the area that the particular animal belongs to.\nThus we have k-1 = 17-1 = 16 variables that are being pivoted. \n16 columns consist of the animal weights of animals of different breeds belonging to a particular sub-region, which will all be pivoted and transformed to a single weight column, which will make the data neat.\nThe new dataframe will be expected to consist of n * (k-1) rows = 9 * (17 - 1) rows = 144 rows\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fetching column names of the animal_wt dataframe\ncol_names <- names(animal_wt)\n\n# Printing column names\ncol_names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"IPCC Area\"          \"Cattle - dairy\"     \"Cattle - non-dairy\"\n [4] \"Buffaloes\"          \"Swine - market\"     \"Swine - breeding\"  \n [7] \"Chicken - Broilers\" \"Chicken - Layers\"   \"Ducks\"             \n[10] \"Turkeys\"            \"Sheep\"              \"Goats\"             \n[13] \"Horses\"             \"Asses\"              \"Mules\"             \n[16] \"Camels\"             \"Llamas\"            \n```\n:::\n\n```{.r .cell-code}\n# Pivoting the dataframe\npivoted_animal_wt <- pivot_longer(animal_wt, cols=col_names[-1], \n                          names_to = \"animal_breed\",\n                          values_to = \"weight\")\npivoted_animal_wt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 √ó 3\n   `IPCC Area`         animal_breed       weight\n   <chr>               <chr>               <dbl>\n 1 Indian Subcontinent Cattle - dairy      275  \n 2 Indian Subcontinent Cattle - non-dairy  110  \n 3 Indian Subcontinent Buffaloes           295  \n 4 Indian Subcontinent Swine - market       28  \n 5 Indian Subcontinent Swine - breeding     28  \n 6 Indian Subcontinent Chicken - Broilers    0.9\n 7 Indian Subcontinent Chicken - Layers      1.8\n 8 Indian Subcontinent Ducks                 2.7\n 9 Indian Subcontinent Turkeys               6.8\n10 Indian Subcontinent Sheep                28  \n# ‚Ä¶ with 134 more rows\n```\n:::\n\n```{.r .cell-code}\ndim(pivoted_animal_wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 144   3\n```\n:::\n:::\n\n\nAny additional comments?\n\nThe pivoted dataframe looks much tidier with a more descriptive view of the animal weight of each animal belonging to a sub-region.\n\nReading and analysing the file eggs_tidy.csv.\nEvery row is uniquely identified by 2 variables i.e. the month and year columns which represent the month and year for the cost of different egg brackets.\nThus we have k-2 = 6-2 = 4 variables that are being pivoted. \n4 columns consist of the different egg bracket costs for the particular moth and year, which will all be pivoted and transformed to a single cost column, which will make the data neat.\nThe new dataframe will be expected to consist of n * (k-1) rows = 120 * (6 - 2) rows = 480 rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the csv file\negg_data <- read_csv(\"_data/eggs_tidy.csv\", show_col_types = FALSE)\n\n# Displaying top 5 rows in the dataframe\ntail(egg_data, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 6\n  month      year large_half_dozen large_dozen extra_large_half_dozen extra_la‚Ä¶¬π\n  <chr>     <dbl>            <dbl>       <dbl>                  <dbl>      <dbl>\n1 August     2013              178        268.                   188.        290\n2 September  2013              178        268.                   188.        290\n3 October    2013              178        268.                   188.        290\n4 November   2013              178        268.                   188.        290\n5 December   2013              178        268.                   188.        290\n# ‚Ä¶ with abbreviated variable name ¬π‚Äãextra_large_dozen\n```\n:::\n\n```{.r .cell-code}\n# Dimensions of the dataframe\ndim(egg_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120   6\n```\n:::\n\n```{.r .cell-code}\n# Get column names of the dataframe\ncol_names <- names(egg_data)\n\n# Exclude month and year columns from pivoting, as they uniquely identify each row case\ncol_names <- col_names[!col_names %in% c(\"month\",\"year\")]\n\n# Pivoting longer for tidier dataframe\npivoted_egg_data <- pivot_longer(egg_data, cols=col_names, \n                          names_to = \"egg_qty\",\n                          values_to = \"cost\")\n\npivoted_egg_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 480 √ó 4\n   month     year egg_qty                 cost\n   <chr>    <dbl> <chr>                  <dbl>\n 1 January   2004 large_half_dozen        126 \n 2 January   2004 large_dozen             230 \n 3 January   2004 extra_large_half_dozen  132 \n 4 January   2004 extra_large_dozen       230 \n 5 February  2004 large_half_dozen        128.\n 6 February  2004 large_dozen             226.\n 7 February  2004 extra_large_half_dozen  134.\n 8 February  2004 extra_large_dozen       230 \n 9 March     2004 large_half_dozen        131 \n10 March     2004 large_dozen             225 \n# ‚Ä¶ with 470 more rows\n```\n:::\n\n```{.r .cell-code}\n# Dimensions of pivoted dataframe\ndim(pivoted_egg_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 480   4\n```\n:::\n:::\n\nAs above, the pivoted dataframe looks much tidier with a more descriptive view of the egg quantity (carton type) and their corresponding costs.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}