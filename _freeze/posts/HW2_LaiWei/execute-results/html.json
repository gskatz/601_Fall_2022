{
  "hash": "f1b25df35964cc0013e0d53132fcd277",
  "result": {
    "markdown": "---\ntitle: \"HW2\"\nauthor: \"Lai Wei\"\ndescription: \"Introduction to Visualization\"\ndate: \"11/15/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - hw2\n---\n\n\n- Goals of this HW: \n  gain experience with working with external data, dplyr, and the pipe operator.\n\nBackground for  mmr_2015.csv: \nThe maternal mortality ratio (MMR) is defined as the number of maternal deaths per 100,000 live births. The UN maternal mortality estimation group produces estimates of the MMR for all countries in the world.\n\nIn this HW, I will use mmr_2015.csv, which is a data set that contains a subset of the (real) data that were used to generate the United Nations Maternal mortality estimates, as published in the year 2015. Variables in the data set mmr_2015.csv are as follows:\n\n-\tIso = ISO code\n-\tName = country name\n-\tYear = observation year\n-\tMMR = observed maternal mortality ratio, which is defined as the number of maternal deaths/total number of births*100,000\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(babynames)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in library(babynames): there is no package called 'babynames'\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\n1. using mmr_2015.csv: Read in mmr_2015.csv. Then construct a graph that shows the observed values of the MMR plotted against year (starting in 2000) for India and Thailand, as in the example Figure 1 below. Use the pipe operator so that the graph follows from a multi-line command that starts with “mmr %>%”. Hint 1: Use data transformation functions to filter rows with i. year >= 2000 and ii. countries India and Thailand only. Hint 2: Use ggplot() to display the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmr <- read.csv(\"D:/Umass Amherst/BIOSTATS 597D/HW/mmr_2015.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in file(file, \"rt\"): cannot open file 'D:/Umass Amherst/BIOSTATS\n597D/HW/mmr_2015.csv': No such file or directory\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in file(file, \"rt\"): cannot open the connection\n```\n:::\n\n```{.r .cell-code}\ndata_IT = filter(mmr,country == \"India\"|country == \"Thailand\",year >= 2000)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(mmr, country == \"India\" | country == \"Thailand\", year >= : object 'mmr' not found\n```\n:::\n\n```{.r .cell-code}\nggplot(data = data_IT,aes(x = year,y= mmr))+\n  geom_point(aes(group = country,color = country))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(data = data_IT, aes(x = year, y = mmr)): object 'data_IT' not found\n```\n:::\n:::\n\n\n2. using babynames as used in the lecture slides: \n\nReproduce the example Figure 2 below where babynames was filtered to include only those rows with year > 1975, sex equal to male, and either prop > 0.025 or n > 50000. Note that the y-axis starts at zero.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames %>% \n  filter(year > 1975, sex == \"M\",prop > 0.025|n > 50000) %>% \n  ggplot(aes(x = year, y = prop))+\n  geom_point(aes(group = name,color = name), size = 2)+\n  geom_line(aes(group = name, color = name))+\n  expand_limits(y = 0)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(., year > 1975, sex == \"M\", prop > 0.025 | n > 50000): object 'babynames' not found\n```\n:::\n:::\n\n\n3. Construct and print a tibble that shows the countries sorted by their average observed MMR (rounded to zero digits), with the country with the highest average MMR listed first, as example Figure 3 below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1<- group_by(mmr,country) %>% \n  summarise_at(vars(mmr),list(name = mean))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in group_by(mmr, country): object 'mmr' not found\n```\n:::\n\n```{.r .cell-code}\n  names(data1)[2] = \"ave\" \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in names(data1)[2] = \"ave\": object 'data1' not found\n```\n:::\n\n```{.r .cell-code}\n  data1$ave <- round(data1$ave,0)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'data1' not found\n```\n:::\n\n```{.r .cell-code}\n  arrange(data1,desc(ave))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in arrange(data1, desc(ave)): object 'data1' not found\n```\n:::\n:::\n\n\n4. Continuing with the mmr data set\n\nPart a: For each year\n- first calculate the mean observed value for each country (to allow for settings where countries may have more than 1 value per year; note that this is not true in this data set). \n- then rank countries by increasing MMR for each year. \n\nCalculate the mean ranking across all years, extract the mean ranking for 10 countries with the lowest ranking across all years, and print the resulting table. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2<-\n  mmr %>% \n  group_by(year) %>% \n  mutate(Mean = mean(mmr,na.rm = TRUE)) %>% \n  arrange(desc(mmr))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in group_by(., year): object 'mmr' not found\n```\n:::\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'data2' not found\n```\n:::\n\n```{.r .cell-code}\n  arrange(data2,desc(Mean)) \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in arrange(data2, desc(Mean)): object 'data2' not found\n```\n:::\n\n```{.r .cell-code}\nlowest10 <- print(tail(data2,10))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in tail(data2, 10): object 'data2' not found\n```\n:::\n:::\n\n\nPart b: do the same thing but now with rankings calculated separately for two periods, with period 1 referring to years < 2000 and period 2 referring to years >= 2000. \nFor each period\n\n- first calculate the mean observed value for each country (to allow for settings where countries may have more than 1 value per period)\n- then rank countries by increasing MMR for each period. \n\nCalculate the mean ranking across all periods, extract the 10 countries with the lowest ranking across all periods, and print the table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbefore_2000<-mmr %>% \n  filter(year < 2000) %>% \n  group_by(country) %>% \n  mutate(Mean = mean(mmr,na.rm = TRUE)) %>% \n  arrange(desc(mmr))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(., year < 2000): object 'mmr' not found\n```\n:::\n\n```{.r .cell-code}\nbefore_2000\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'before_2000' not found\n```\n:::\n\n```{.r .cell-code}\n  print(tail(before_2000,10))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in tail(before_2000, 10): object 'before_2000' not found\n```\n:::\n\n```{.r .cell-code}\nafter_2000 <- mmr %>% \n  filter(year >= 2000) %>% \n  group_by(country) %>% \n  mutate(Mean = mean(mmr,na.rm = TRUE)) %>% \n  arrange(desc(mmr))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in filter(., year >= 2000): object 'mmr' not found\n```\n:::\n\n```{.r .cell-code}\nafter_2000\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'after_2000' not found\n```\n:::\n\n```{.r .cell-code}\n  print(tail(after_2000,10))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in tail(after_2000, 10): object 'after_2000' not found\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}