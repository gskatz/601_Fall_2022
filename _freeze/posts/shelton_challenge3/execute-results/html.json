{
  "hash": "380904512d43efc5c280276eabf32018",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"Dane Shelton\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"10/05/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - shelton\n  - eggs\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge 3 Tasks: \n\n\n1.)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.)  identify what needs to be done to tidy the current data\n3.)  anticipate the shape of pivoted data\n4.) pivot the data into tidy format using `pivot_longer`\n\n## Task 1.) Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n\n-   eggs_tidy.csv ⭐⭐ organiceggpoultry.xls⭐⭐⭐\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 120\nColumns: 6\n$ month                  <chr> \"January\", \"February\", \"March\", \"April\", \"May\",…\n$ year                   <dbl> 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,…\n$ large_half_dozen       <dbl> 126.00, 128.50, 131.00, 131.00, 131.00, 133.50,…\n$ large_dozen            <dbl> 230.000, 226.250, 225.000, 225.000, 225.000, 23…\n$ extra_large_half_dozen <dbl> 132.000, 134.500, 137.000, 137.000, 137.000, 13…\n$ extra_large_dozen      <dbl> 230.0, 230.0, 230.0, 234.5, 236.0, 241.0, 241.0…\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 2\n   month      year\n   <chr>     <dbl>\n 1 January    2004\n 2 February   2004\n 3 March      2004\n 4 April      2004\n 5 May        2004\n 6 June       2004\n 7 July       2004\n 8 August     2004\n 9 September  2004\n10 October    2004\n# … with 110 more rows\n```\n:::\n:::\n\n\n### Description of Eggs_Tidy\n\nWe can see that `eggs_tidy` represents the price of various sizes and quantities of eggs each month for the 10 year period between January 2004 to December 2013. The prices were originally listed in cents, but we transformed the columns to show the prices in dollars.\n\nUnfortunately, our observations represent more that one case, so we'll need to use `pivot_longer` to tidy up our data so that one row represents a single observation. The variables that will be used in the final data set to identify a single observation are month, year, size (large or extra large), and quantity (half dozen or dozen)\n\n\n## Task 2.) Anticipate the End Result \n\n### Pivoting Steps\n\nCurrently, we only have $2$ of our $6$ varibales identifying a case - month and year. This means we will have to pivot longer $6 - 2 = 4$ columns total: `large_half_dozen`, `large dozen`, `extra_large_half_dozen`, and `extra_large_dozen`. We will split the descriptions by size and quantity using the `names_sep` argument, their values will go into a `price` column.\n\n\n\n## Task 3.) Calculate Final Dimensions\n\nFirst, let's take a look at the current dimensions of `eggs_tidy`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(eggs_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120   6\n```\n:::\n:::\n\n\n\nOur current dimensions are 120 rows, by 6 columns. As mentioned, we are pivoting 4 of the 6 columns into 3 new columns, which should result in $120 * (6-2) = 480$ rows and $2 + 3 = 5$ columns: month, year, size, quantity, price.\n\n\n## Task 4.) Pivot the Data\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'final_eggs' not found\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'final_eggs' not found\n```\n:::\n:::\n\n### Description of Pivoted Data\n\nNow, after pivoting `eggs_tidy` into our final dataset `final_eggs`, we can see that the dimensions match our prediction (480 x 5), and an individual case containing date, size, quantity, and price information is identified by each row. Each column represents a variable, each row a case, and each cell is a value - our data is tidy!\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}