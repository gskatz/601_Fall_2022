{
  "hash": "c264f144693e9884feba2dfc5a415ffc",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 Instructions\"\nauthor: \"Tejaswini_Ketineni\"\ndesription: \"Reading in data and creating a post\"\ndate: \"08/21/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_1\n  - railroads\n  - faostat\n  - wildbirds\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\n\n## Read in data\n\nThe data that we consider for doing the current challenge is animal weight\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nanimal_weight <- read_csv(\"_data/animal_weight.csv\")\n```\n:::\n\n\n### Briefly describe the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"IPCC Area\"          \"Cattle - dairy\"     \"Cattle - non-dairy\"\n [4] \"Buffaloes\"          \"Swine - market\"     \"Swine - breeding\"  \n [7] \"Chicken - Broilers\" \"Chicken - Layers\"   \"Ducks\"             \n[10] \"Turkeys\"            \"Sheep\"              \"Goats\"             \n[13] \"Horses\"             \"Asses\"              \"Mules\"             \n[16] \"Camels\"             \"Llamas\"            \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\nIt has 9 rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n:::\n\n\nIt has 17 columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 17\n```\n:::\n:::\n\n\nThe dimensions of the table : 9,17\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  IPCC Area         Cattle - dairy  Cattle - non-dairy   Buffaloes    \n Length:9           Min.   :275.0   Min.   :110        Min.   :295.0  \n Class :character   1st Qu.:275.0   1st Qu.:173        1st Qu.:380.0  \n Mode  :character   Median :400.0   Median :330        Median :380.0  \n                    Mean   :425.4   Mean   :298        Mean   :370.6  \n                    3rd Qu.:550.0   3rd Qu.:391        3rd Qu.:380.0  \n                    Max.   :604.0   Max.   :420        Max.   :380.0  \n Swine - market  Swine - breeding Chicken - Broilers Chicken - Layers\n Min.   :28.00   Min.   : 28.0    Min.   :0.9        Min.   :1.8     \n 1st Qu.:28.00   1st Qu.: 28.0    1st Qu.:0.9        1st Qu.:1.8     \n Median :45.00   Median :180.0    Median :0.9        Median :1.8     \n Mean   :39.22   Mean   :116.4    Mean   :0.9        Mean   :1.8     \n 3rd Qu.:50.00   3rd Qu.:180.0    3rd Qu.:0.9        3rd Qu.:1.8     \n Max.   :50.00   Max.   :198.0    Max.   :0.9        Max.   :1.8     \n     Ducks        Turkeys        Sheep           Goats           Horses     \n Min.   :2.7   Min.   :6.8   Min.   :28.00   Min.   :30.00   Min.   :238.0  \n 1st Qu.:2.7   1st Qu.:6.8   1st Qu.:28.00   1st Qu.:30.00   1st Qu.:238.0  \n Median :2.7   Median :6.8   Median :48.50   Median :38.50   Median :377.0  \n Mean   :2.7   Mean   :6.8   Mean   :39.39   Mean   :34.72   Mean   :315.2  \n 3rd Qu.:2.7   3rd Qu.:6.8   3rd Qu.:48.50   3rd Qu.:38.50   3rd Qu.:377.0  \n Max.   :2.7   Max.   :6.8   Max.   :48.50   Max.   :38.50   Max.   :377.0  \n     Asses         Mules         Camels        Llamas   \n Min.   :130   Min.   :130   Min.   :217   Min.   :217  \n 1st Qu.:130   1st Qu.:130   1st Qu.:217   1st Qu.:217  \n Median :130   Median :130   Median :217   Median :217  \n Mean   :130   Mean   :130   Mean   :217   Mean   :217  \n 3rd Qu.:130   3rd Qu.:130   3rd Qu.:217   3rd Qu.:217  \n Max.   :130   Max.   :130   Max.   :217   Max.   :217  \n```\n:::\n:::\n\n\nwhile we observe the data set, we see that there are no missing values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 17\n  IPCC A…¹ Cattl…² Cattl…³ Buffa…⁴ Swine…⁵ Swine…⁶ Chick…⁷ Chick…⁸ Ducks Turkeys\n  <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl>\n1 Indian …     275     110     295      28      28     0.9     1.8   2.7     6.8\n2 Eastern…     550     391     380      50     180     0.9     1.8   2.7     6.8\n3 Africa       275     173     380      28      28     0.9     1.8   2.7     6.8\n4 Oceania      500     330     380      45     180     0.9     1.8   2.7     6.8\n5 Western…     600     420     380      50     198     0.9     1.8   2.7     6.8\n6 Latin A…     400     305     380      28      28     0.9     1.8   2.7     6.8\n# … with 7 more variables: Sheep <dbl>, Goats <dbl>, Horses <dbl>, Asses <dbl>,\n#   Mules <dbl>, Camels <dbl>, Llamas <dbl>, and abbreviated variable names\n#   ¹​`IPCC Area`, ²​`Cattle - dairy`, ³​`Cattle - non-dairy`, ⁴​Buffaloes,\n#   ⁵​`Swine - market`, ⁶​`Swine - breeding`, ⁷​`Chicken - Broilers`,\n#   ⁸​`Chicken - Layers`\n```\n:::\n:::\n\nwhen we observe the data using head, we see that weight of the category of types of animals is distributed across the regions, performing pivot would help to avoid the reccurence of weights across the regions. All the types of animals can be named as the Animal type and it would have 3 columns : IPCC Area, weight, Animaltype.\n\n## Anticipate the End Result\n\nAs we have already computed the no.of rows and columns, now we must compute the total expected rows in the pivoted data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(animal_weight)*(ncol(animal_weight)-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 144\n```\n:::\n:::\n\n\nAs per the discussions above, there must be 144 rows and 3 columns\n\n## Pivot the Data\n\nNow we will pivot the data, \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf<- pivot_longer(animal_weight,\n                         col = c('Cattle - dairy', 'Cattle - non-dairy', 'Buffaloes', 'Swine - market', 'Swine - breeding', 'Chicken - Broilers', 'Chicken - Layers', 'Ducks', 'Turkeys', 'Sheep', 'Goats', 'Horses', 'Asses', 'Mules', 'Camels', 'Llamas'), names_to = 'Animal Type', values_to = 'Weight')\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 × 3\n   `IPCC Area`         `Animal Type`      Weight\n   <chr>               <chr>               <dbl>\n 1 Indian Subcontinent Cattle - dairy      275  \n 2 Indian Subcontinent Cattle - non-dairy  110  \n 3 Indian Subcontinent Buffaloes           295  \n 4 Indian Subcontinent Swine - market       28  \n 5 Indian Subcontinent Swine - breeding     28  \n 6 Indian Subcontinent Chicken - Broilers    0.9\n 7 Indian Subcontinent Chicken - Layers      1.8\n 8 Indian Subcontinent Ducks                 2.7\n 9 Indian Subcontinent Turkeys               6.8\n10 Indian Subcontinent Sheep                28  \n# … with 134 more rows\n```\n:::\n:::\n\n\n### cross checking if the pivoted data has met the expectations\n\nComputing the number of rows and columns for the pivoted data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 144\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 144   3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  IPCC Area         Animal Type            Weight     \n Length:144         Length:144         Min.   :  0.9  \n Class :character   Class :character   1st Qu.: 22.7  \n Mode  :character   Mode  :character   Median :130.0  \n                                       Mean   :146.6  \n                                       3rd Qu.:217.0  \n                                       Max.   :604.0  \n```\n:::\n:::\n\n\nperforming summary function ensures that there are three columns and there are no missing values as well, which ensures that the quality of the data is ensured.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}