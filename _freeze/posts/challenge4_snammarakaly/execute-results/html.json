{
  "hash": "1937b97a5a23727d60908c3381e78c4f",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4 Instructions\"\nauthor: \"Siddharth Nammara Kalyana Raman\"\ndesription: \"More data wrangling: pivoting\"\ndate: \"12/02/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - abc_poll\n  - eggs\n  - fed_rates\n  - hotel_bookings\n  - debt\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   abc_poll.csv ⭐\n-   poultry_tidy.xlsx or organiceggpoultry.xls⭐⭐\n-   FedFundsRate.csv⭐⭐⭐\n-   hotel_bookings.csv⭐⭐⭐⭐\n-   debt_in_trillions.xlsx ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#read the data\nhotel_booking_data <- read_csv(\"_data/hotel_bookings.csv\")\n\nhotel_booking_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 Resor…       0     342    2015 July         27       1       0       0      2\n 2 Resor…       0     737    2015 July         27       1       0       0      2\n 3 Resor…       0       7    2015 July         27       1       0       1      1\n 4 Resor…       0      13    2015 July         27       1       0       1      1\n 5 Resor…       0      14    2015 July         27       1       0       2      2\n 6 Resor…       0      14    2015 July         27       1       0       2      2\n 7 Resor…       0       0    2015 July         27       1       0       2      2\n 8 Resor…       0       9    2015 July         27       1       0       2      2\n 9 Resor…       1      85    2015 July         27       1       0       3      2\n10 Resor…       1      75    2015 July         27       1       0       3      2\n# … with 119,380 more rows, 22 more variables: children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# find the unique values in all the columns\nrapply(hotel_booking_data,function(x)length(unique(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         hotel                    is_canceled \n                             2                              2 \n                     lead_time              arrival_date_year \n                           479                              3 \n            arrival_date_month       arrival_date_week_number \n                            12                             53 \n     arrival_date_day_of_month        stays_in_weekend_nights \n                            31                             17 \n          stays_in_week_nights                         adults \n                            35                             14 \n                      children                         babies \n                             6                              5 \n                          meal                        country \n                             5                            178 \n                market_segment           distribution_channel \n                             8                              5 \n             is_repeated_guest         previous_cancellations \n                             2                             15 \nprevious_bookings_not_canceled             reserved_room_type \n                            73                             10 \n            assigned_room_type                booking_changes \n                            12                             21 \n                  deposit_type                          agent \n                             3                            334 \n                       company           days_in_waiting_list \n                           353                            128 \n                 customer_type                            adr \n                             4                           8879 \n   required_car_parking_spaces      total_of_special_requests \n                             5                              6 \n            reservation_status        reservation_status_date \n                             3                            926 \n```\n:::\n:::\n\n### Briefly describe the data\n\nThe following dataset comprises 32 distinct fields and 119390 observations. Each record relates to a reservation that a client has made. With each booking, numerous pieces of information are recorded. It contains information such as arrival date, length of stay, meals, kind of reserved accommodation, client type, reservation status, number of adults/children, and many other things. Entries in the data come from many countries throughout the world.\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\n::: {.cell}\n\n```{.r .cell-code}\n# in order to check whether there are NULL fields\ntable(hotel_booking_data$country)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  ABW   AGO   AIA   ALB   AND   ARE   ARG   ARM   ASM   ATA   ATF   AUS   AUT \n    2   362     1    12     7    51   214     8     1     2     1   426  1263 \n  AZE   BDI   BEL   BEN   BFA   BGD   BGR   BHR   BHS   BIH   BLR   BOL   BRA \n   17     1  2342     3     1    12    75     5     1    13    26    10  2224 \n  BRB   BWA   CAF   CHE   CHL   CHN   CIV   CMR    CN   COL   COM   CPV   CRI \n    4     1     5  1730    65   999     6    10  1279    71     2    24    19 \n  CUB   CYM   CYP   CZE   DEU   DJI   DMA   DNK   DOM   DZA   ECU   EGY   ESP \n    8     1    51   171  7287     1     1   435    14   103    27    32  8568 \n  EST   ETH   FIN   FJI   FRA   FRO   GAB   GBR   GEO   GGY   GHA   GIB   GLP \n   83     3   447     1 10415     5     4 12129    22     3     4    18     2 \n  GNB   GRC   GTM   GUY   HKG   HND   HRV   HUN   IDN   IMN   IND   IRL   IRN \n    9   128     4     1    29     1   100   230    35     2   152  3375    83 \n  IRQ   ISL   ISR   ITA   JAM   JEY   JOR   JPN   KAZ   KEN   KHM   KIR   KNA \n   14    57   669  3766     6     8    21   197    19     6     2     1     2 \n  KOR   KWT   LAO   LBN   LBY   LCA   LIE   LKA   LTU   LUX   LVA   MAC   MAR \n  133    16     2    31     8     1     3     7    81   287    55    16   259 \n  MCO   MDG   MDV   MEX   MKD   MLI   MLT   MMR   MNE   MOZ   MRT   MUS   MWI \n    4     1    12    85    10     1    18     1     5    67     1     7     2 \n  MYS   MYT   NAM   NCL   NGA   NIC   NLD   NOR   NPL  NULL   NZL   OMN   PAK \n   28     2     1     1    34     1  2104   607     1   488    74    18    14 \n  PAN   PER   PHL   PLW   POL   PRI   PRT   PRY   PYF   QAT   ROU   RUS   RWA \n    9    29    40     1   919    12 48590     4     1    15   500   632     2 \n  SAU   SDN   SEN   SGP   SLE   SLV   SMR   SRB   STP   SUR   SVK   SVN   SWE \n   48     1    11    39     1     2     1   101     2     5    65    57  1024 \n  SYC   SYR   TGO   THA   TJK   TMP   TUN   TUR   TWN   TZA   UGA   UKR   UMI \n    2     3     2    59     9     3    39   248    51     5     2    68     1 \n  URY   USA   UZB   VEN   VGB   VNM   ZAF   ZMB   ZWE \n   32  2097     4    26     1     8    80     2     4 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#removing the null entries found above\nhotel_booking_data <- hotel_booking_data %>% \n  filter(!(country == \"NULL\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#in order to know the data type of each field\nsapply(hotel_booking_data, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         hotel                    is_canceled \n                   \"character\"                      \"numeric\" \n                     lead_time              arrival_date_year \n                     \"numeric\"                      \"numeric\" \n            arrival_date_month       arrival_date_week_number \n                   \"character\"                      \"numeric\" \n     arrival_date_day_of_month        stays_in_weekend_nights \n                     \"numeric\"                      \"numeric\" \n          stays_in_week_nights                         adults \n                     \"numeric\"                      \"numeric\" \n                      children                         babies \n                     \"numeric\"                      \"numeric\" \n                          meal                        country \n                   \"character\"                    \"character\" \n                market_segment           distribution_channel \n                   \"character\"                    \"character\" \n             is_repeated_guest         previous_cancellations \n                     \"numeric\"                      \"numeric\" \nprevious_bookings_not_canceled             reserved_room_type \n                     \"numeric\"                    \"character\" \n            assigned_room_type                booking_changes \n                   \"character\"                      \"numeric\" \n                  deposit_type                          agent \n                   \"character\"                    \"character\" \n                       company           days_in_waiting_list \n                   \"character\"                      \"numeric\" \n                 customer_type                            adr \n                   \"character\"                      \"numeric\" \n   required_car_parking_spaces      total_of_special_requests \n                     \"numeric\"                      \"numeric\" \n            reservation_status        reservation_status_date \n                   \"character\"                         \"Date\" \n```\n:::\n:::\n\n\nWe can observe from the analysis above that two fields, Agents and Company, both have numerical values but are tagged as character datatypes. This is because it has NULL values in it. We can remove the NULL values converting it NA and alter the datatype to numeric. This change will help us for easier analysis. A single field named arrival date can also be used to combine the arrival date in year, month, and date formats.\n## Identify variables that need to be mutated\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, are all time variables correctly coded as dates? Are all string variables reduced and cleaned to sensible categories? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh_book_mut <- hotel_booking_data %>% \n  mutate(arrival_date = str_c(arrival_date_day_of_month,\n                              arrival_date_month,\n                              arrival_date_year, sep=\"/\"),\n         arrival_date = dmy(arrival_date),\n         total_guests = adults + children + babies) %>% \n  select(-c(arrival_date_day_of_month,arrival_date_month,arrival_date_year))\n\nh_book_mut\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 118,902 × 31\n   hotel     is_ca…¹ lead_…² arriv…³ stays…⁴ stays…⁵ adults child…⁶ babies meal \n   <chr>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl> <chr>\n 1 Resort H…       0     342      27       0       0      2       0      0 BB   \n 2 Resort H…       0     737      27       0       0      2       0      0 BB   \n 3 Resort H…       0       7      27       0       1      1       0      0 BB   \n 4 Resort H…       0      13      27       0       1      1       0      0 BB   \n 5 Resort H…       0      14      27       0       2      2       0      0 BB   \n 6 Resort H…       0      14      27       0       2      2       0      0 BB   \n 7 Resort H…       0       0      27       0       2      2       0      0 BB   \n 8 Resort H…       0       9      27       0       2      2       0      0 FB   \n 9 Resort H…       1      85      27       0       3      2       0      0 BB   \n10 Resort H…       1      75      27       0       3      2       0      0 HB   \n# … with 118,892 more rows, 21 more variables: country <chr>,\n#   market_segment <chr>, distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# to find the range of the arrival date\nsummary(h_book_mut$arrival_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Min.      1st Qu.       Median         Mean      3rd Qu.         Max. \n\"2015-07-01\" \"2016-03-14\" \"2016-09-07\" \"2016-08-29\" \"2017-03-19\" \"2017-08-31\" \n```\n:::\n:::\n\n\nThe dates of arrival, as seen from above, range from July 2015 to August 2017.\n\nThe lead time indicates the beginning of the entire hotel reservation. By deducting the lead time from the arrival date, one may determine the booking date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh_book_mut <- h_book_mut %>%\n  mutate(booking_date = arrival_date - lead_time)\n\nh_book_mut\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 118,902 × 32\n   hotel     is_ca…¹ lead_…² arriv…³ stays…⁴ stays…⁵ adults child…⁶ babies meal \n   <chr>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl> <chr>\n 1 Resort H…       0     342      27       0       0      2       0      0 BB   \n 2 Resort H…       0     737      27       0       0      2       0      0 BB   \n 3 Resort H…       0       7      27       0       1      1       0      0 BB   \n 4 Resort H…       0      13      27       0       1      1       0      0 BB   \n 5 Resort H…       0      14      27       0       2      2       0      0 BB   \n 6 Resort H…       0      14      27       0       2      2       0      0 BB   \n 7 Resort H…       0       0      27       0       2      2       0      0 BB   \n 8 Resort H…       0       9      27       0       2      2       0      0 FB   \n 9 Resort H…       1      85      27       0       3      2       0      0 BB   \n10 Resort H…       1      75      27       0       3      2       0      0 HB   \n# … with 118,892 more rows, 22 more variables: country <chr>,\n#   market_segment <chr>, distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>,\n#   total_of_special_requests <dbl>, reservation_status <chr>, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(hotel_booking_data$reservation_status)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Check-Out\" \"Canceled\"  \"No-Show\"  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nh_book_mut <- h_book_mut %>%\n  mutate(across(c(agent, company),~ replace(.,str_detect(., \"NULL\"), NA))) %>% mutate_at(vars(agent, company),as.numeric)\n\nis.numeric(h_book_mut$agent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis.numeric(h_book_mut$company)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::",
    "supporting": [
      "challenge4_snammarakaly_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}