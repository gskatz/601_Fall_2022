{
  "hash": "7ff7fd9fd1955e3fe3d819e4e8d4caff",
  "result": {
    "markdown": "---\ntitle: \"Challenge 6 Instructions\"\nauthor: \"Matthew Norberg\"\ndescription: \"Visualizing Time and Relationships\"\ndate: \"10/17/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_6\n  - usa_households\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(readxl)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least one graph including time (evolution)\n   - try to make them \"publication\" ready (optional)\n   - Explain why you choose the specific graph type\n5)  Create at least one graph depicting part-whole or flow relationships\n   - try to make them \"publication\" ready (optional)\n   - Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n## Read in data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_excel('./_data/USA Households by Total Money Income, Race, and Hispanic Origin of Householder 1967 to 2019.xlsx', skip = 4)\ndf <- select(df, -(Total)) %>%\n       rename(Number = ...2,\n              MedianEstimate = Estimate...13, \n              MeanEstimate = Estimate...15,\n              MedianEstimateMOE = `Margin of error1 (±)...14`,\n              MeanEstimateMOE = `Margin of error1 (±)...16`) %>%\n       head(-31)\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 15\n  ...1    Number Under…¹ $15,0…² $25,0…³ $35,0…⁴ $50,0…⁵ $75,0…⁶ $100,…⁷ $150,…⁸\n  <chr>   <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 ALL RA… <NA>      NA      NA      NA      NA      NA      NA      NA      NA  \n2 2019    128451     9.1     8       8.3    11.7    16.5    12.3    15.5     8.3\n3 2018    128579    10.1     8.8     8.7    12      17      12.5    15       7.2\n4 2017 2  127669    10       9.1     9.2    12      16.4    12.4    14.7     7.3\n5 2017    127586    10.1     9.1     9.2    11.9    16.3    12.6    14.8     7.5\n6 2016    126224    10.4     9       9.2    12.3    16.7    12.2    15       7.2\n# … with 5 more variables: `$200,000 and over` <dbl>, MedianEstimate <dbl>,\n#   MedianEstimateMOE <dbl>, MeanEstimate <chr>, MeanEstimateMOE <chr>, and\n#   abbreviated variable names ¹​`Under $15,000`, ²​`$15,000\\r\\nto\\r\\n$24,999`,\n#   ³​`$25,000\\r\\nto\\r\\n$34,999`, ⁴​`$35,000\\r\\nto\\r\\n$49,999`,\n#   ⁵​`$50,000\\r\\nto\\r\\n$74,999`, ⁶​`$75,000\\r\\nto\\r\\n$99,999`,\n#   ⁷​`$100,000\\r\\nto\\r\\n$149,999`, ⁸​`$150,000\\r\\nto\\r\\n$199,999`\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nThe data set looks at total income by race and Hispanic origin of United States Households from 1967 to 2019.  The initial representation of the data is unorganized.  An arbitrary row describes total income distribution for a given race and Hispanic origin by year.  Note that a row represents a population of households, not just one.  \n\nIt is hard to interpret the data while it is stored in the current format because the first column is not tidy.  The first column is describing not only the year variable but the race variable as well.  For instance, the second row is for the all race category in the year 2019.  This is readable in excel format, but confusing in a tibble. \n\n## Tidy Data (as needed)\n\nFirst, note that the only columns in the data set which are missing are included in rows which currently describe the race and hispanic category.  This is confirmed with the query below.  This fact will become important later. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  filter(if_any(.cols = everything(), ~ is.na(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 15\n   ...1   Number Under…¹ $15,0…² $25,0…³ $35,0…⁴ $50,0…⁵ $75,0…⁶ $100,…⁷ $150,…⁸\n   <chr>  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 ALL R… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n 2 WHITE… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n 3 WHITE… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n 4 WHITE… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n 5 WHITE… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n 6 BLACK… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n 7 BLACK… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n 8 BLACK… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n 9 ASIAN… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n10 ASIAN… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n11 ASIAN… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n12 HISPA… <NA>        NA      NA      NA      NA      NA      NA      NA      NA\n# … with 5 more variables: `$200,000 and over` <dbl>, MedianEstimate <dbl>,\n#   MedianEstimateMOE <dbl>, MeanEstimate <chr>, MeanEstimateMOE <chr>, and\n#   abbreviated variable names ¹​`Under $15,000`, ²​`$15,000\\r\\nto\\r\\n$24,999`,\n#   ³​`$25,000\\r\\nto\\r\\n$34,999`, ⁴​`$35,000\\r\\nto\\r\\n$49,999`,\n#   ⁵​`$50,000\\r\\nto\\r\\n$74,999`, ⁶​`$75,000\\r\\nto\\r\\n$99,999`,\n#   ⁷​`$100,000\\r\\nto\\r\\n$149,999`, ⁸​`$150,000\\r\\nto\\r\\n$199,999`\n```\n:::\n:::\n\n\nTo tidy the tibble, we need to clean up the left column.  The first loop cleans up footnotes and any excess information in the column.  After the first loop, the leftmost column is reset.  However, it is not clean yet.  The second loop creates a vector containing the race information for each row such that the ith item in the vector corresponded to the ith row of the tibble.  I added the new column to the data set and renamed the first and second column for clarity.  Then I removed any rows containing NA.  In doing so, I know that I am not losing any information because I verified earlier that the only missing values in the data set correspond to the rows describing the race and Hispanic origin information for the current group.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clean the leftmost column\nc1 <- df$...1\nfor (i in seq_along(c1)) {\n  item <- c1[[i]]\n  # Case where item is a category containing a number -> \"WHITE ALONE 24\"\n  if (!(is.na(slice(df, i)$Number)) & str_detect(item, \" \")) {\n    pieces <- str_split(item, \" \")[[1]]\n    c1[i] = pieces[1]\n  }\n  # Case where item is has superscript -> \"2017 2\"\n  else if (is.na(slice(df, i)$Number)){\n    c1[i] = str_squish(gsub('[0-9]+', '', item))\n  }\n}\n\n# Reset leftmost column \ndf$...1 <- c1\n\n# Create a new column describing race information\nc2 <- df$...1\ncategory <- c2[[1]]\nfor (i in seq_along(c2)) {\n  item <- c2[[i]]\n  if (!(str_detect(item, \"[0-9][0-9][0-9][0-9]\")))\n      category <- item\n  c2[i] = category\n}\n\n# Add new column to tibble, remove old column\ndf <- mutate(df, `Race/Hispanic` = c2) %>% \n      relocate(`Race/Hispanic`, .after = `...1`) %>%\n      rename(Year = `...1`)\n\n# Remove old rows\ndf <- na.omit(df)\nhead(df, n = 15)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 16\n   Year  Race/H…¹ Number Under…² $15,0…³ $25,0…⁴ $35,0…⁵ $50,0…⁶ $75,0…⁷ $100,…⁸\n   <chr> <chr>    <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 2019  ALL RAC… 128451     9.1     8       8.3    11.7    16.5    12.3    15.5\n 2 2018  ALL RAC… 128579    10.1     8.8     8.7    12      17      12.5    15  \n 3 2017  ALL RAC… 127669    10       9.1     9.2    12      16.4    12.4    14.7\n 4 2017  ALL RAC… 127586    10.1     9.1     9.2    11.9    16.3    12.6    14.8\n 5 2016  ALL RAC… 126224    10.4     9       9.2    12.3    16.7    12.2    15  \n 6 2015  ALL RAC… 125819    10.6    10       9.6    12.1    16.1    12.4    14.9\n 7 2014  ALL RAC… 124587    11.4    10.5     9.6    12.6    16.4    12.1    14  \n 8 2013  ALL RAC… 123931    11.4    10.3     9.5    12.5    16.8    12      13.9\n 9 2013  ALL RAC… 122952    11.3    10.4     9.7    13.1    17      12.5    13.6\n10 2012  ALL RAC… 122459    11.4    10.6    10.1    12.5    17.4    12      13.9\n11 2011  ALL RAC… 121084    11.6    10.2    10.2    13.1    17.2    11.9    13.8\n12 2010  ALL RAC… 119927    11.2    10.7     9.4    13.3    16.8    12.4    14.1\n13 2009  ALL RAC… 117538    10.4    10       9.7    13.2    17.4    12.4    14.5\n14 2008  ALL RAC… 117181    10.4    10       9.4    13.4    17      12.5    15  \n15 2007  ALL RAC… 116783    10      10       9      12.8    17.3    12.6    15.3\n# … with 6 more variables: `$150,000\\r\\nto\\r\\n$199,999` <dbl>,\n#   `$200,000 and over` <dbl>, MedianEstimate <dbl>, MedianEstimateMOE <dbl>,\n#   MeanEstimate <chr>, MeanEstimateMOE <chr>, and abbreviated variable names\n#   ¹​`Race/Hispanic`, ²​`Under $15,000`, ³​`$15,000\\r\\nto\\r\\n$24,999`,\n#   ⁴​`$25,000\\r\\nto\\r\\n$34,999`, ⁵​`$35,000\\r\\nto\\r\\n$49,999`,\n#   ⁶​`$50,000\\r\\nto\\r\\n$74,999`, ⁷​`$75,000\\r\\nto\\r\\n$99,999`,\n#   ⁸​`$100,000\\r\\nto\\r\\n$149,999`\n```\n:::\n:::\n\n\nThe 'MeanEstimate' and 'MeanEstimateMOE' columns are character type, but it would be much more sensible if they were of type double.  They are of character type because a few of the rows contain \"N\" to indicate that the data is missing.  I am going to replace these values with NA so we can convert the type of the column.  This will make the visualizations easier. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove \"N\" in MeanEstimate\nc1 = df$MeanEstimate\nfor (i in seq_along(c1)) {\n  item <- c1[[i]]\n  if (item == \"N\")\n    c1[i] = NA\n}\n\n# Remove \"N\" in MeanEstimateMOE\nc2 = df$MeanEstimateMOE\nfor (i in seq_along(c2)) {\n  item <- c2[[i]]\n  if (item == \"N\")\n    c2[i] = NA\n}\n\n# Reset columns to clean version\ndf$MeanEstimate = c1\ndf$MeanEstimateMOE = c2\n\n# Convert type of columns \ndf <- type_convert(df)\n```\n:::\n\n\n## Time Dependent Visualization\n\nFirst, let's look at the column names to get an idea about what we may want to visualize with the data set.  The column names are printed out using the code below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Year\"                       \"Race/Hispanic\"             \n [3] \"Number\"                     \"Under $15,000\"             \n [5] \"$15,000\\r\\nto\\r\\n$24,999\"   \"$25,000\\r\\nto\\r\\n$34,999\"  \n [7] \"$35,000\\r\\nto\\r\\n$49,999\"   \"$50,000\\r\\nto\\r\\n$74,999\"  \n [9] \"$75,000\\r\\nto\\r\\n$99,999\"   \"$100,000\\r\\nto\\r\\n$149,999\"\n[11] \"$150,000\\r\\nto\\r\\n$199,999\" \"$200,000 and over\"         \n[13] \"MedianEstimate\"             \"MedianEstimateMOE\"         \n[15] \"MeanEstimate\"               \"MeanEstimateMOE\"           \n```\n:::\n:::\n\n\nWhen I look at the column names, the one that sticks out in particular is \"MeanEstimate\".  I would like to know if the mean income estimate for each group of people in the data set has improved with time or not.  To figure out the answer to this question, we could make a scatter plot of the mean income estimate versus time.  Additionally, we can use ggplot to make one plot for each group of people in the data set.  The code below generates the plot. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, mapping = aes(x = Year, y = MeanEstimate, color = `Race/Hispanic`)) + \n  geom_line(na.rm = TRUE) + \n  geom_point(na.rm = TRUE) + \n  labs(\n    x = \"Year\",\n    y = \"Average Income Estimate\",\n    title = \"Average Income Estimate By Year And Hispanic Origin\"\n  )\n```\n\n::: {.cell-output-display}\n![](challenge6_MatthewNorberg_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThis plot is very interesting, but it is a little hard to interpret because there are so many categories.  It may be better visualized if we combine categories together.  For instance, we could consider the categories \"ASIAN ALONE\", \"ASIAN ALONE OR IN COMBINATION\", \"ASIAN AND PACIFIC ISLANDER\" all to be the category \"ASIAN\".  The code chunk below first reduces possible categories in the 'Race/Hispanic' column to the set (\"ALL\", \"ASIAN\", \"BLACK\", \"HISPANIC\", \"WHITE\").  Afterwards, the code generates a similar plot and adds a smoothed line to the data to better visualize the trends.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdf <- df %>% mutate(`Race/Hispanic` = case_when(str_detect(`Race/Hispanic`, 'ASIAN') ~ 'ASIAN',\n                                             str_detect(`Race/Hispanic`, 'BLACK') ~ 'BLACK',\n                                             str_detect(`Race/Hispanic`, 'WHITE') ~ 'WHITE',\n                                             str_detect(`Race/Hispanic`, 'HISPANIC') ~ 'HISPANIC',\n                                             str_detect(`Race/Hispanic`, 'ALL') ~ 'ALL'))\n\nggplot(mdf, mapping = aes(x = Year, y = MeanEstimate, color = `Race/Hispanic`)) + \n  geom_point(na.rm = TRUE) + \n  geom_smooth(na.rm = TRUE, method = 'loess', formula = 'y ~ x') +\n  labs(\n    x = \"Year\",\n    y = \"Average Income Estimate\",\n    title = \"Average Income Estimate By Year And Hispanic Origin\",\n    color = \"Race\"\n  )\n```\n\n::: {.cell-output-display}\n![](challenge6_MatthewNorberg_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nPersonally, I think this view of the data is much easier to digest.  The interesting thing about this is that it shows that the \"ASIAN\" group has the highest average income and it seems to be much higher than the other groups.  I would not have expected this. \n\n## Visualizing Part-Whole Relationships\n\nLet's try to figure out how much data we have on each race category.  We will generate two variations of this diagram.  The first one will contain all of the categories that were presented in the data.  The second will contain the modified categories just as we did in the previous section. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the counts of each category\ndfVals <- df %>% \n  group_by(`Race/Hispanic`) %>%\n  summarise(Count = n())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic piechart\nggplot(dfVals, aes(x=\"\", y=Count, fill=`Race/Hispanic`)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() + \n  labs(\n    title = \"Proportion of Race/Hispanic Information\"\n  )\n```\n\n::: {.cell-output-display}\n![](challenge6_MatthewNorberg_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThis chart is interesting, but I think the same chart with a reduced number of categories would be easier to look at.  This alternative view is generated below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdfVals <- mdf %>% \n  group_by(`Race/Hispanic`) %>%\n  summarise(Count = n())\n\n# Basic piechart\nggplot(mdfVals, aes(x=\"\", y=Count, fill=`Race/Hispanic`)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() + \n  labs(\n    title = \"Proportion of Race/Hispanic Information\"\n  )\n```\n\n::: {.cell-output-display}\n![](challenge6_MatthewNorberg_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nNow we can easily see that most of the data was collected on the \"WHITE\" population.  It also looks like the \"ASIAN\" population had the least amount of data collected on them.  Maybe that explains why their group had the highest average income in the previous section.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "challenge6_MatthewNorberg_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}