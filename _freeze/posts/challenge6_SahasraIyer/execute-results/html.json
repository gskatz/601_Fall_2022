{
  "hash": "3018a8d684f1ca9014b2dab3914e1af6",
  "result": {
    "markdown": "---\ntitle: \"Challenge 6 Instructions\"\nauthor: \"Meredith Rolfe\"\ndescription: \"Visualizing Time and Relationships\"\ndate: \"08/23/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_6\n  - hotel_bookings\n  - air_bnb\n  - fed_rate\n  - debt\n  - usa_households\n  - abc_poll\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(tidyr)\nlibrary(treemap)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least one graph including time (evolution)\n   - try to make them \"publication\" ready (optional)\n   - Explain why you choose the specific graph type\n5)  Create at least one graph depicting part-whole or flow relationships\n   - try to make them \"publication\" ready (optional)\n   - Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n  - debt  ⭐\n  - fed_rate ⭐⭐\n  - abc_poll ⭐⭐⭐\n  - usa_hh ⭐⭐⭐\n  - hotel_bookings ⭐⭐⭐⭐\n  - AB_NYC ⭐⭐⭐⭐⭐\n\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read data into a dataframe\ndata <- read_csv(\"_data/FedFundsRate.csv\")\n\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 10\n   Year Month   Day Federal Fu…¹ Feder…² Feder…³ Effec…⁴ Real …⁵ Unemp…⁶ Infla…⁷\n  <dbl> <dbl> <dbl>        <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1  1954     7     1           NA      NA      NA    0.8      4.6     5.8      NA\n2  1954     8     1           NA      NA      NA    1.22    NA       6        NA\n3  1954     9     1           NA      NA      NA    1.06    NA       6.1      NA\n4  1954    10     1           NA      NA      NA    0.85     8       5.7      NA\n5  1954    11     1           NA      NA      NA    0.83    NA       5.3      NA\n6  1954    12     1           NA      NA      NA    1.28    NA       5        NA\n# … with abbreviated variable names ¹​`Federal Funds Target Rate`,\n#   ²​`Federal Funds Upper Target`, ³​`Federal Funds Lower Target`,\n#   ⁴​`Effective Federal Funds Rate`, ⁵​`Real GDP (Percent Change)`,\n#   ⁶​`Unemployment Rate`, ⁷​`Inflation Rate`\n```\n:::\n\n```{.r .cell-code}\nmin(data$Year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1954\n```\n:::\n\n```{.r .cell-code}\nmax(data$Year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2017\n```\n:::\n:::\n\n\n\n\n### Briefly describe the data\n\nThe data contains the different federal fund rates starting from 1954-2017. It also contains other growth informants such as GDP percent change, unemployment rate, etc. Each case in this data can be uniquely identified by the Year, Month, Day combination, which I have used to create a new \"Date\" column.\n\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform the Year, Month, Day columns into a single Date column\ndata$Date <- as.Date(with(data,paste(Year,Month,Day,sep=\"-\")),\"%Y-%m-%d\")\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 904 × 11\n    Year Month   Day Federal F…¹ Feder…² Feder…³ Effec…⁴ Real …⁵ Unemp…⁶ Infla…⁷\n   <dbl> <dbl> <dbl>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1  1954     7     1          NA      NA      NA    0.8      4.6     5.8      NA\n 2  1954     8     1          NA      NA      NA    1.22    NA       6        NA\n 3  1954     9     1          NA      NA      NA    1.06    NA       6.1      NA\n 4  1954    10     1          NA      NA      NA    0.85     8       5.7      NA\n 5  1954    11     1          NA      NA      NA    0.83    NA       5.3      NA\n 6  1954    12     1          NA      NA      NA    1.28    NA       5        NA\n 7  1955     1     1          NA      NA      NA    1.39    11.9     4.9      NA\n 8  1955     2     1          NA      NA      NA    1.29    NA       4.7      NA\n 9  1955     3     1          NA      NA      NA    1.35    NA       4.6      NA\n10  1955     4     1          NA      NA      NA    1.43     6.7     4.7      NA\n# … with 894 more rows, 1 more variable: Date <date>, and abbreviated variable\n#   names ¹​`Federal Funds Target Rate`, ²​`Federal Funds Upper Target`,\n#   ³​`Federal Funds Lower Target`, ⁴​`Effective Federal Funds Rate`,\n#   ⁵​`Real GDP (Percent Change)`, ⁶​`Unemployment Rate`, ⁷​`Inflation Rate`\n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n## Time Dependent Visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the columns for whom time-dependent visualization will be constructed\nselect(data, c('Date','Effective Federal Funds Rate'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 904 × 2\n   Date       `Effective Federal Funds Rate`\n   <date>                              <dbl>\n 1 1954-07-01                           0.8 \n 2 1954-08-01                           1.22\n 3 1954-09-01                           1.06\n 4 1954-10-01                           0.85\n 5 1954-11-01                           0.83\n 6 1954-12-01                           1.28\n 7 1955-01-01                           1.39\n 8 1955-02-01                           1.29\n 9 1955-03-01                           1.35\n10 1955-04-01                           1.43\n# … with 894 more rows\n```\n:::\n\n```{.r .cell-code}\n# Time series plot\nggplot(data, aes(x=Date, y=data$`Effective Federal Funds Rate`)) + \n  geom_line() + \n  xlab(\"Date\") + \n  ylab(\"Effective Federal Funds Rate\") + \n  ggtitle(\"Date vs Effective Federal Funds Rate\")\n```\n\n::: {.cell-output-display}\n![](challenge6_SahasraIyer_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\nFrom the above plot, we can see that some of the days are missing the federal fund rate values. We will now apply a forward fill mechanism to fill these values and get a continuous visualization. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Since intermittent values are NA, we extrapolate these values basis the previous value in the dataframe.\ndata_filled <- data %>% fill(`Effective Federal Funds Rate`, .direction = 'updown')\nggplot(data_filled, aes(x=Date, y=data_filled$`Effective Federal Funds Rate`)) + \n  geom_line() + \n  xlab(\"Date\") + \n  ylab(\"Effective Federal Funds Rate\") + \n  ggtitle(\"Date vs Effective Federal Funds Rate\")\n```\n\n::: {.cell-output-display}\n![](challenge6_SahasraIyer_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Visualizing Part-Whole Relationships\n\nFor part-whole relationship, I decided to explore the Effective Federal Fund Rate column to get an idea of when this rate was high (specific year). The graph looked exteremly cluttered when I plotted for all years available, so I decided to explore only for years over 1990 using a treemap visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_filtered <- data_filled[data_filled$Year>1990,]\n\nhead(data_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 11\n   Year Month   Day Federal Fu…¹ Feder…² Feder…³ Effec…⁴ Real …⁵ Unemp…⁶ Infla…⁷\n  <dbl> <dbl> <dbl>        <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1  1991     1     1         7         NA      NA    6.91    -1.9     6.4     5.6\n2  1991     1     9         6.75      NA      NA    6.25    NA      NA      NA  \n3  1991     2     1         6.25      NA      NA    6.25    NA       6.6     5.6\n4  1991     3     1         6.25      NA      NA    6.12    NA       6.8     5.2\n5  1991     3     8         6         NA      NA    5.91    NA      NA      NA  \n6  1991     4     1         6         NA      NA    5.91     3.1     6.7     5.1\n# … with 1 more variable: Date <date>, and abbreviated variable names\n#   ¹​`Federal Funds Target Rate`, ²​`Federal Funds Upper Target`,\n#   ³​`Federal Funds Lower Target`, ⁴​`Effective Federal Funds Rate`,\n#   ⁵​`Real GDP (Percent Change)`, ⁶​`Unemployment Rate`, ⁷​`Inflation Rate`\n```\n:::\n\n```{.r .cell-code}\ndata_filtered %>%\n  treemap(index=c(\"Year\"), vSize=\"Effective Federal Funds Rate\", title=\"Effective Federal Funds Rate Comparison, 2000-2017\", palette=\"RdYlBu\")\n```\n\n::: {.cell-output-display}\n![](challenge6_SahasraIyer_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "challenge6_SahasraIyer_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}