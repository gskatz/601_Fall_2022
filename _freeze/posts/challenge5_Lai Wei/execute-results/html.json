{
  "hash": "43f867be18e0db7184685004193d5a80",
  "result": {
    "markdown": "---\ntitle: \"Challenge 5\"\nauthor: \"Lai Wei\"\ndescription: \"Introduction to Visualization\"\ndate: \"11/14/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5\n  - railroads\n  - cereal\n  - air_bnb\n  - pathogen_cost\n  - australian_marriage\n  - public_schools\n  - usa_households\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least two univariate visualizations\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n5)  Create at least one bivariate visualization\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   AB_NYC_2019.csv ⭐⭐⭐\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNYC <- read_csv(\"_data/AB_NYC_2019.csv\") \nNYC\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48,895 × 16\n      id name      host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n   <dbl> <chr>       <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  2539 Clean & …    2787 John    Brookl… Kensin…    40.6   -74.0 Privat…   149\n 2  2595 Skylit M…    2845 Jennif… Manhat… Midtown    40.8   -74.0 Entire…   225\n 3  3647 THE VILL…    4632 Elisab… Manhat… Harlem     40.8   -73.9 Privat…   150\n 4  3831 Cozy Ent…    4869 LisaRo… Brookl… Clinto…    40.7   -74.0 Entire…    89\n 5  5022 Entire A…    7192 Laura   Manhat… East H…    40.8   -73.9 Entire…    80\n 6  5099 Large Co…    7322 Chris   Manhat… Murray…    40.7   -74.0 Entire…   200\n 7  5121 BlissArt…    7356 Garon   Brookl… Bedfor…    40.7   -74.0 Privat…    60\n 8  5178 Large Fu…    8967 Shunic… Manhat… Hell's…    40.8   -74.0 Privat…    79\n 9  5203 Cozy Cle…    7490 MaryEl… Manhat… Upper …    40.8   -74.0 Privat…    79\n10  5238 Cute & C…    7549 Ben     Manhat… Chinat…    40.7   -74.0 Entire…   150\n# … with 48,885 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n```\n:::\n:::\n\n\n### Briefly describe the data\n\n## Tidy Data \n\nUsing colnames() to check columns' names. And there are 15 columns' names in total.And by dim(), getting the dimensions of NYC, there are 261 rows and 16 columns \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(NYC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"id\"                             \"name\"                          \n [3] \"host_id\"                        \"host_name\"                     \n [5] \"neighbourhood_group\"            \"neighbourhood\"                 \n [7] \"latitude\"                       \"longitude\"                     \n [9] \"room_type\"                      \"price\"                         \n[11] \"minimum_nights\"                 \"number_of_reviews\"             \n[13] \"last_review\"                    \"reviews_per_month\"             \n[15] \"calculated_host_listings_count\" \"availability_365\"              \n```\n:::\n\n```{.r .cell-code}\ndim(NYC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 48895    16\n```\n:::\n:::\n\nWe can directly refer to the column, neighbourhood_group by select(). Then we can make a table of neighbourhood_group for easily reading. And proportional table can return the value of occurrence of each value. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(NYC,neighbourhood_group) %>% table() %>% prop.table() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nneighbourhood_group\n        Bronx      Brooklyn     Manhattan        Queens Staten Island \n  0.022313120   0.411166786   0.443010533   0.115880969   0.007628592 \n```\n:::\n:::\n\n\n## Univariate Visualizations\n\n::: {.cell}\n\n```{.r .cell-code}\nNYC_Room <- NYC %>% filter(neighbourhood_group == \"Bronx\") %>%  \n  select(host_name,price,room_type) %>% group_by(room_type) %>% \n  summarise(count=n())\nNYC_Room\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  room_type       count\n  <chr>           <int>\n1 Entire home/apt   379\n2 Private room      652\n3 Shared room        60\n```\n:::\n:::\n\nFrom it, we can get the summary of room type in Bronx area, and use ggplot o to show in bar graph. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(NYC_Room, aes(x = room_type)) + geom_bar(color = \"red\")\n```\n\n::: {.cell-output-display}\n![](challenge5_Lai-Wei_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "challenge5_Lai-Wei_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}