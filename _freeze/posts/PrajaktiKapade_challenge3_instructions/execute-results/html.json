{
  "hash": "01eec86c6c547ebae7d30bdb900236a7",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 Instructions\"\nauthor: \"Prajakti Kapade\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"08/17/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - eggs\n  - australian_marriage\n  - usa_households\n  - sce_labor\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <-read.csv('_data/animal_weight.csv')\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            IPCC.Area Cattle...dairy Cattle...non.dairy Buffaloes\n1 Indian Subcontinent            275                110       295\n2      Eastern Europe            550                391       380\n3              Africa            275                173       380\n4             Oceania            500                330       380\n5      Western Europe            600                420       380\n6       Latin America            400                305       380\n7                Asia            350                391       380\n8         Middle east            275                173       380\n9    Northern America            604                389       380\n  Swine...market Swine...breeding Chicken...Broilers Chicken...Layers Ducks\n1             28               28                0.9              1.8   2.7\n2             50              180                0.9              1.8   2.7\n3             28               28                0.9              1.8   2.7\n4             45              180                0.9              1.8   2.7\n5             50              198                0.9              1.8   2.7\n6             28               28                0.9              1.8   2.7\n7             50              180                0.9              1.8   2.7\n8             28               28                0.9              1.8   2.7\n9             46              198                0.9              1.8   2.7\n  Turkeys Sheep Goats Horses Asses Mules Camels Llamas\n1     6.8  28.0  30.0    238   130   130    217    217\n2     6.8  48.5  38.5    377   130   130    217    217\n3     6.8  28.0  30.0    238   130   130    217    217\n4     6.8  48.5  38.5    377   130   130    217    217\n5     6.8  48.5  38.5    377   130   130    217    217\n6     6.8  28.0  30.0    238   130   130    217    217\n7     6.8  48.5  38.5    377   130   130    217    217\n8     6.8  28.0  30.0    238   130   130    217    217\n9     6.8  48.5  38.5    377   130   130    217    217\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA    2272.    1668.\n2 USA      1990 NAFTA     724.     844.\n3 France   1980 EU        765.    1069.\n4 Mexico   1990 NAFTA     866.    1587.\n5 USA      1980 NAFTA     952.     922.\n6 France   1990 EU       1680.    -134.\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\nThe area is the only variable that is used to decsribe the case, other values are just weights of the animals which need to be pivoted and converted to a single column, so that it can be neat.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            IPCC.Area Cattle...dairy Cattle...non.dairy Buffaloes\n1 Indian Subcontinent            275                110       295\n2      Eastern Europe            550                391       380\n3              Africa            275                173       380\n4             Oceania            500                330       380\n5      Western Europe            600                420       380\n6       Latin America            400                305       380\n7                Asia            350                391       380\n8         Middle east            275                173       380\n9    Northern America            604                389       380\n  Swine...market Swine...breeding Chicken...Broilers Chicken...Layers Ducks\n1             28               28                0.9              1.8   2.7\n2             50              180                0.9              1.8   2.7\n3             28               28                0.9              1.8   2.7\n4             45              180                0.9              1.8   2.7\n5             50              198                0.9              1.8   2.7\n6             28               28                0.9              1.8   2.7\n7             50              180                0.9              1.8   2.7\n8             28               28                0.9              1.8   2.7\n9             46              198                0.9              1.8   2.7\n  Turkeys Sheep Goats Horses Asses Mules Camels Llamas\n1     6.8  28.0  30.0    238   130   130    217    217\n2     6.8  48.5  38.5    377   130   130    217    217\n3     6.8  28.0  30.0    238   130   130    217    217\n4     6.8  48.5  38.5    377   130   130    217    217\n5     6.8  48.5  38.5    377   130   130    217    217\n6     6.8  28.0  30.0    238   130   130    217    217\n7     6.8  48.5  38.5    377   130   130    217    217\n8     6.8  28.0  30.0    238   130   130    217    217\n9     6.8  48.5  38.5    377   130   130    217    217\n```\n:::\n\n```{.r .cell-code}\nnrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nncol(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n\n```{.r .cell-code}\n#no of changes to be made i.e. values to be moved\nnrow(data) * (ncol(data)-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 144\n```\n:::\n:::\n\n\nAny additional comments?\n\nThe table will change into a cleaner table, though there will be very high number of values to be moved.\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing              2272.\n 2 Mexico   1980 NAFTA incoming              1668.\n 3 USA      1990 NAFTA outgoing               724.\n 4 USA      1990 NAFTA incoming               844.\n 5 France   1980 EU    outgoing               765.\n 6 France   1980 EU    incoming              1069.\n 7 Mexico   1990 NAFTA outgoing               866.\n 8 Mexico   1990 NAFTA incoming              1587.\n 9 USA      1980 NAFTA outgoing               952.\n10 USA      1980 NAFTA incoming               922.\n11 France   1990 EU    outgoing              1680.\n12 France   1990 EU    incoming              -134.\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"IPCC.Area\"          \"Cattle...dairy\"     \"Cattle...non.dairy\"\n [4] \"Buffaloes\"          \"Swine...market\"     \"Swine...breeding\"  \n [7] \"Chicken...Broilers\" \"Chicken...Layers\"   \"Ducks\"             \n[10] \"Turkeys\"            \"Sheep\"              \"Goats\"             \n[13] \"Horses\"             \"Asses\"              \"Mules\"             \n[16] \"Camels\"             \"Llamas\"            \n```\n:::\n\n```{.r .cell-code}\ndata<-pivot_longer(data, col = c(\"Cattle...dairy\",\"Cattle...non.dairy\",\"Buffaloes\",\"Swine...market\",\"Swine...breeding\",\"Chicken...Broilers\",\"Chicken...Layers\",\"Ducks\",\"Turkeys\",\"Sheep\",\"Goats\",\"Horses\",\"Asses\",\"Mules\",\"Camels\",\"Llamas\"),\n                 names_to=\"animal_name\",\n                 values_to = \"weight_value\")\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 √ó 3\n   IPCC.Area           animal_name        weight_value\n   <chr>               <chr>                     <dbl>\n 1 Indian Subcontinent Cattle...dairy            275  \n 2 Indian Subcontinent Cattle...non.dairy        110  \n 3 Indian Subcontinent Buffaloes                 295  \n 4 Indian Subcontinent Swine...market             28  \n 5 Indian Subcontinent Swine...breeding           28  \n 6 Indian Subcontinent Chicken...Broilers          0.9\n 7 Indian Subcontinent Chicken...Layers            1.8\n 8 Indian Subcontinent Ducks                       2.7\n 9 Indian Subcontinent Turkeys                     6.8\n10 Indian Subcontinent Sheep                      28  \n# ‚Ä¶ with 134 more rows\n```\n:::\n:::\n\n\nAny additional comments?\nThe table looks like tidier and has lesser columns but more descriptive of the weight each animal has in every area.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}