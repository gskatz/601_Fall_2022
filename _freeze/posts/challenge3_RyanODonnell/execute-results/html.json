{
  "hash": "2a1f785125376894d5145f274185c29b",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 Solution\"\nauthor: \"Ryan O'Donnell\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"08/17/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - eggs\n  - ryan_odonnell\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(summarytools)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\negg <- read_xls(\"_data/organiceggpoultry.xls\", \n                 skip = 5,\n                 col_names = c(\"month_year\", \"egg-xl_12\", \"egg-xl_6\", \"egg-lg_12\", \"egg-lg_6\", \"delete\", \"chx-whole\", \"chx-bnl_breast\",  \"chx-bone_breast\", \"chx-legs\", \"chx-thighs\"),\n                 na = c(\"too few\")) \n\neggs <- egg %>% \n  mutate(delete = NULL) %>%\n  separate(col = month_year,\n           into = c(\"month\", \"year\")) %>%\n  fill(year)\n\nsummary(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    month               year             egg-xl_12        egg-xl_6    \n Length:120         Length:120         Min.   :230.0   Min.   :132.0  \n Class :character   Class :character   1st Qu.:241.5   1st Qu.:135.8  \n Mode  :character   Mode  :character   Median :285.5   Median :185.5  \n                                       Mean   :266.8   Mean   :164.2  \n                                       3rd Qu.:285.5   3rd Qu.:185.5  \n                                       Max.   :290.0   Max.   :188.1  \n                                                                      \n   egg-lg_12        egg-lg_6       chx-whole     chx-bnl_breast \n Min.   :225.0   Min.   :126.0   Min.   :197.5   Min.   :637.5  \n 1st Qu.:233.5   1st Qu.:129.4   1st Qu.:220.5   1st Qu.:645.1  \n Median :267.5   Median :174.5   Median :235.0   Median :645.5  \n Mean   :254.2   Mean   :155.2   Mean   :230.5   Mean   :654.9  \n 3rd Qu.:268.0   3rd Qu.:174.5   3rd Qu.:238.5   3rd Qu.:645.5  \n Max.   :277.5   Max.   :178.0   Max.   :248.0   Max.   :703.8  \n                                                                \n chx-bone_breast    chx-legs       chx-thighs   \n Min.   :390.5   Min.   :193.5   Min.   :199.5  \n 1st Qu.:390.5   1st Qu.:203.5   1st Qu.:215.0  \n Median :390.5   Median :203.5   Median :222.0  \n Mean   :390.5   Mean   :203.1   Mean   :217.8  \n 3rd Qu.:390.5   3rd Qu.:203.5   3rd Qu.:222.0  \n Max.   :390.5   Max.   :203.5   Max.   :222.0  \n NA's   :6                       NA's   :1      \n```\n:::\n\n```{.r .cell-code}\nhead(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 11\n  month    year  egg-x‚Ä¶¬π egg-x‚Ä¶¬≤ egg-l‚Ä¶¬≥ egg-l‚Ä¶‚Å¥ chx-w‚Ä¶‚Åµ chx-b‚Ä¶‚Å∂ chx-b‚Ä¶‚Å∑ chx-l‚Ä¶‚Å∏\n  <chr>    <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Jan      2004     230     132     230     126     198.    646.      NA    194.\n2 February 2004     230     134.    226.    128.    198.    642.      NA    194.\n3 March    2004     230     137     225     131     209     642.      NA    194.\n4 April    2004     234.    137     225     131     212     642.      NA    194.\n5 May      2004     236     137     225     131     214.    642.      NA    194.\n6 June     2004     241     137     231.    134.    216.    641       NA    202.\n# ‚Ä¶ with 1 more variable: `chx-thighs` <dbl>, and abbreviated variable names\n#   ¬π‚Äã`egg-xl_12`, ¬≤‚Äã`egg-xl_6`, ¬≥‚Äã`egg-lg_12`, ‚Å¥‚Äã`egg-lg_6`, ‚Åµ‚Äã`chx-whole`,\n#   ‚Å∂‚Äã`chx-bnl_breast`, ‚Å∑‚Äã`chx-bone_breast`, ‚Å∏‚Äã`chx-legs`\n```\n:::\n:::\n\n\n### Briefly describe the data\n\n*Describe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"*\n\n**organicpoultry.xls** is an Excel file that contains 3 sheets. The first is a compilation of the data collected on the second and third sheet: organic egg prices 2004-2013, and organic poultry prices 2004-2013, respectively. All three sheets have the data presented visually which makes it messy. The first is the tidiest and contains the most information, so that is the sheet I will be working with. \nThe column names were stored across multiple rows and so I renamed them upon import and deleted the empty column between the egg prices and the chicken prices. I also set the NA variable which was stored in this data as \"too few.\" \n\nI also had to split the Month_Year column into two and fill the year down so that there is a year in every row. If the unique case is the \"price\", I will have to pivot the data to be much longer with the new variables being the product. Since there are two major categories of project, I will split this into columns, product category (egg, chicken) and product type (size eggs, dozen or half dozen, parts of the chicken).\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product should look like - that way you will know whether or not your pivoting was successful.*\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.*\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!*\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA     610.   -135. \n2 USA      1990 NAFTA     422.   1068. \n3 France   1980 EU       1453.    330. \n4 Mexico   1990 NAFTA     715.    416. \n5 USA      1980 NAFTA     402.   1045. \n6 France   1990 EU       1354.     60.5\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOur simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(eggs) * (ncol(eggs)-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1200\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n*Any additional comments?*\n\n\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing              610. \n 2 Mexico   1980 NAFTA incoming             -135. \n 3 USA      1990 NAFTA outgoing              422. \n 4 USA      1990 NAFTA incoming             1068. \n 5 France   1980 EU    outgoing             1453. \n 6 France   1980 EU    incoming              330. \n 7 Mexico   1990 NAFTA outgoing              715. \n 8 Mexico   1990 NAFTA incoming              416. \n 9 USA      1980 NAFTA outgoing              402. \n10 USA      1980 NAFTA incoming             1045. \n11 France   1990 EU    outgoing             1354. \n12 France   1990 EU    incoming               60.5\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\n*Document your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?*\n\nA new case will be the price. It will be described by the month, year, product category, and product type. This is tidy because you will easily be able to analyze the price and then group by the different categories and time periods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_pivoted <- pivot_longer(eggs,\n  col = c(`egg-xl_12`, `egg-xl_6`, `egg-lg_12`, `egg-lg_6`, `chx-whole`, `chx-bnl_breast`, `chx-bone_breast`, `chx-legs`, `chx-thighs`),\n  names_to = \"product_category-product_type\",\n  values_to = \"price\") %>%\n  \n  separate(col = `product_category-product_type`,\n           into = c(\"product_category\", \"product_type\"),\n           sep = \"-\")\n  \n\neggs_pivoted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,080 √ó 5\n   month    year  product_category product_type price\n   <chr>    <chr> <chr>            <chr>        <dbl>\n 1 Jan      2004  egg              xl_12         230 \n 2 Jan      2004  egg              xl_6          132 \n 3 Jan      2004  egg              lg_12         230 \n 4 Jan      2004  egg              lg_6          126 \n 5 Jan      2004  chx              whole         198.\n 6 Jan      2004  chx              bnl_breast    646.\n 7 Jan      2004  chx              bone_breast    NA \n 8 Jan      2004  chx              legs          194.\n 9 Jan      2004  chx              thighs         NA \n10 February 2004  egg              xl_12         230 \n# ‚Ä¶ with 1,070 more rows\n```\n:::\n:::\n\n\n*Any additional comments?*\n\nThe new table has 1080 rows, as expected!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}