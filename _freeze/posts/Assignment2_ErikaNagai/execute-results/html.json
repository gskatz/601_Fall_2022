{
  "hash": "1fea5822c6d43915f23f35c082249892",
  "result": {
    "markdown": "---\ntitle: \"Homework2 Erika Nagai\"\nauthor: \"Erika Nagai\"\ndescription: \"Introduction to Visualization\"\ndate: \"10/12/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - hw2\n  - movie\n  - gender\n---\n\n\n## Challenge Overview\n\n-   Read in a dataset from the \\_data folder in the course blog repository, or choose your own data. If you decide to use one of the datasets we have provided, please use a challenging dataset - check with us if you are not sure. \n\n-   Clean the data as needed using dplyr and related tidyverse packages.\n\n-   Provide a narrative about the data set (look it up if you aren't sure what you have got) and the variables in your dataset, including what type of data each variable is. The goal of this step is to communicate in a visually appealing way to non-experts - not to replicate r-code.\n\n-   Identify potential research questions that your dataset can help answer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install libraries\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(summarytools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'summarytools'\n\nThe following object is masked from 'package:tibble':\n\n    view\n```\n:::\n:::\n\n\n## Read in a data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovie = read_csv(\"_data/movies_metadata.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 45466 Columns: 24\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (14): belongs_to_collection, genres, homepage, imdb_id, original_langua...\ndbl   (7): budget, id, popularity, revenue, runtime, vote_average, vote_count\nlgl   (2): adult, video\ndate  (1): release_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nThis movie dataset was generated by Movielens, a (non-profit) movie review website (https://movielens.org/), and was obtained from the following Kaggle link. (https://www.kaggle.com/datasets/rounakbanik/the-movies-dataset?resource=download&select=movies_metadata.csv)\n\nThe movie dataset is contains 45466 movies with a released date between December 9th 1874 and December 16th 2020.\n\nThe data includes the information of genres, revenue, runtime, languages, status (released/in production etc...).\n\nThis dataset includes the following columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(movie)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"adult\"                 \"belongs_to_collection\" \"budget\"               \n [4] \"genres\"                \"homepage\"              \"id\"                   \n [7] \"imdb_id\"               \"original_language\"     \"original_title\"       \n[10] \"overview\"              \"popularity\"            \"poster_path\"          \n[13] \"production_companies\"  \"production_countries\"  \"release_date\"         \n[16] \"revenue\"               \"runtime\"               \"spoken_languages\"     \n[19] \"status\"                \"tagline\"               \"title\"                \n[22] \"video\"                 \"vote_average\"          \"vote_count\"           \n```\n:::\n:::\n\n\nThe data type of each column is as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(movie)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [45,466 × 24] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ adult                : logi [1:45466] FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ belongs_to_collection: chr [1:45466] \"{'id': 10194, 'name': 'Toy Story Collection', 'poster_path': '/7G9915LfUQ2lVfwMEEhDsn3kT4B.jpg', 'backdrop_path\"| __truncated__ NA \"{'id': 119050, 'name': 'Grumpy Old Men Collection', 'poster_path': '/nLvUdqgPgm3F85NMCii9gVFUcet.jpg', 'backdro\"| __truncated__ NA ...\n $ budget               : num [1:45466] 3.0e+07 6.5e+07 0.0 1.6e+07 0.0 6.0e+07 5.8e+07 0.0 3.5e+07 5.8e+07 ...\n $ genres               : chr [1:45466] \"[{'id': 16, 'name': 'Animation'}, {'id': 35, 'name': 'Comedy'}, {'id': 10751, 'name': 'Family'}]\" \"[{'id': 12, 'name': 'Adventure'}, {'id': 14, 'name': 'Fantasy'}, {'id': 10751, 'name': 'Family'}]\" \"[{'id': 10749, 'name': 'Romance'}, {'id': 35, 'name': 'Comedy'}]\" \"[{'id': 35, 'name': 'Comedy'}, {'id': 18, 'name': 'Drama'}, {'id': 10749, 'name': 'Romance'}]\" ...\n $ homepage             : chr [1:45466] \"http://toystory.disney.com/toy-story\" NA NA NA ...\n $ id                   : num [1:45466] 862 8844 15602 31357 11862 ...\n $ imdb_id              : chr [1:45466] \"tt0114709\" \"tt0113497\" \"tt0113228\" \"tt0114885\" ...\n $ original_language    : chr [1:45466] \"en\" \"en\" \"en\" \"en\" ...\n $ original_title       : chr [1:45466] \"Toy Story\" \"Jumanji\" \"Grumpier Old Men\" \"Waiting to Exhale\" ...\n $ overview             : chr [1:45466] \"Led by Woody, Andy's toys live happily in his room until Andy's birthday brings Buzz Lightyear onto the scene. \"| __truncated__ \"When siblings Judy and Peter discover an enchanted board game that opens the door to a magical world, they unwi\"| __truncated__ \"A family wedding reignites the ancient feud between next-door neighbors and fishing buddies John and Max. Meanw\"| __truncated__ \"Cheated on, mistreated and stepped on, the women are holding their breath, waiting for the elusive \\\"good man\\\"\"| __truncated__ ...\n $ popularity           : num [1:45466] 21.95 17.02 11.71 3.86 8.39 ...\n $ poster_path          : chr [1:45466] \"/rhIRbceoE9lR4veEXuwCC2wARtG.jpg\" \"/vzmL6fP7aPKNKPRTFnZmiUfciyV.jpg\" \"/6ksm1sjKMFLbO7UY2i6G1ju9SML.jpg\" \"/16XOMpEaLWkrcPqSQqhTmeJuqQl.jpg\" ...\n $ production_companies : chr [1:45466] \"[{'name': 'Pixar Animation Studios', 'id': 3}]\" \"[{'name': 'TriStar Pictures', 'id': 559}, {'name': 'Teitler Film', 'id': 2550}, {'name': 'Interscope Communicat\"| __truncated__ \"[{'name': 'Warner Bros.', 'id': 6194}, {'name': 'Lancaster Gate', 'id': 19464}]\" \"[{'name': 'Twentieth Century Fox Film Corporation', 'id': 306}]\" ...\n $ production_countries : chr [1:45466] \"[{'iso_3166_1': 'US', 'name': 'United States of America'}]\" \"[{'iso_3166_1': 'US', 'name': 'United States of America'}]\" \"[{'iso_3166_1': 'US', 'name': 'United States of America'}]\" \"[{'iso_3166_1': 'US', 'name': 'United States of America'}]\" ...\n $ release_date         : Date[1:45466], format: \"1995-10-30\" \"1995-12-15\" ...\n $ revenue              : num [1:45466] 3.74e+08 2.63e+08 0.00 8.15e+07 7.66e+07 ...\n $ runtime              : num [1:45466] 81 104 101 127 106 170 127 97 106 130 ...\n $ spoken_languages     : chr [1:45466] \"[{'iso_639_1': 'en', 'name': 'English'}]\" \"[{'iso_639_1': 'en', 'name': 'English'}, {'iso_639_1': 'fr', 'name': 'Français'}]\" \"[{'iso_639_1': 'en', 'name': 'English'}]\" \"[{'iso_639_1': 'en', 'name': 'English'}]\" ...\n $ status               : chr [1:45466] \"Released\" \"Released\" \"Released\" \"Released\" ...\n $ tagline              : chr [1:45466] NA \"Roll the dice and unleash the excitement!\" \"Still Yelling. Still Fighting. Still Ready for Love.\" \"Friends are the people who let you be yourself... and never let you forget it.\" ...\n $ title                : chr [1:45466] \"Toy Story\" \"Jumanji\" \"Grumpier Old Men\" \"Waiting to Exhale\" ...\n $ video                : logi [1:45466] FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ vote_average         : num [1:45466] 7.7 6.9 6.5 6.1 5.7 7.7 6.2 5.4 5.5 6.6 ...\n $ vote_count           : num [1:45466] 5415 2413 92 34 173 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   adult = col_logical(),\n  ..   belongs_to_collection = col_character(),\n  ..   budget = col_double(),\n  ..   genres = col_character(),\n  ..   homepage = col_character(),\n  ..   id = col_double(),\n  ..   imdb_id = col_character(),\n  ..   original_language = col_character(),\n  ..   original_title = col_character(),\n  ..   overview = col_character(),\n  ..   popularity = col_double(),\n  ..   poster_path = col_character(),\n  ..   production_companies = col_character(),\n  ..   production_countries = col_character(),\n  ..   release_date = col_date(format = \"\"),\n  ..   revenue = col_double(),\n  ..   runtime = col_double(),\n  ..   spoken_languages = col_character(),\n  ..   status = col_character(),\n  ..   tagline = col_character(),\n  ..   title = col_character(),\n  ..   video = col_logical(),\n  ..   vote_average = col_double(),\n  ..   vote_count = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmovieSummary = dfSummary(movie)\n```\n:::\n\n\n## Tidy data\n\nThe values in some certain columns such as \"belongs_to_collection\", \"genres\", \"production_companies\", \"production_countries\", \"spoken_languages\" are in a list format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovie %>% select(c(\"belongs_to_collection\", \"genres\", \"production_companies\", \"production_countries\", \"spoken_languages\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 45,466 × 5\n   belongs_to_collection                          genres produ…¹ produ…² spoke…³\n   <chr>                                          <chr>  <chr>   <chr>   <chr>  \n 1 {'id': 10194, 'name': 'Toy Story Collection',… [{'id… [{'nam… [{'iso… [{'iso…\n 2 <NA>                                           [{'id… [{'nam… [{'iso… [{'iso…\n 3 {'id': 119050, 'name': 'Grumpy Old Men Collec… [{'id… [{'nam… [{'iso… [{'iso…\n 4 <NA>                                           [{'id… [{'nam… [{'iso… [{'iso…\n 5 {'id': 96871, 'name': 'Father of the Bride Co… [{'id… [{'nam… [{'iso… [{'iso…\n 6 <NA>                                           [{'id… [{'nam… [{'iso… [{'iso…\n 7 <NA>                                           [{'id… [{'nam… [{'iso… [{'iso…\n 8 <NA>                                           [{'id… [{'nam… [{'iso… [{'iso…\n 9 <NA>                                           [{'id… [{'nam… [{'iso… [{'iso…\n10 {'id': 645, 'name': 'James Bond Collection', … [{'id… [{'nam… [{'iso… [{'iso…\n# … with 45,456 more rows, and abbreviated variable names\n#   ¹​production_companies, ²​production_countries, ³​spoken_languages\n```\n:::\n:::\n\n\n1.  Genre\n\n    First I need to delete \"\\[\" and \"\\]\". I used a useful package that can remove brackets (round, square, curly or any shape), \"qdapRegex\".\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    head(movie$genres)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"[{'id': 16, 'name': 'Animation'}, {'id': 35, 'name': 'Comedy'}, {'id': 10751, 'name': 'Family'}]\"                        \n    [2] \"[{'id': 12, 'name': 'Adventure'}, {'id': 14, 'name': 'Fantasy'}, {'id': 10751, 'name': 'Family'}]\"                       \n    [3] \"[{'id': 10749, 'name': 'Romance'}, {'id': 35, 'name': 'Comedy'}]\"                                                        \n    [4] \"[{'id': 35, 'name': 'Comedy'}, {'id': 18, 'name': 'Drama'}, {'id': 10749, 'name': 'Romance'}]\"                           \n    [5] \"[{'id': 35, 'name': 'Comedy'}]\"                                                                                          \n    [6] \"[{'id': 28, 'name': 'Action'}, {'id': 80, 'name': 'Crime'}, {'id': 18, 'name': 'Drama'}, {'id': 53, 'name': 'Thriller'}]\"\n    ```\n    :::\n    :::\n\n\n2.  **Question**: I had to use this package to remove the swuare brackets but I originally wanted to do so with str_extract or str_replace, but it didn't work because \"\\[ \\]\" have a special meaning in regex. I would appreciate it if you could show me how I could have done it by using str\\_ functions.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(qdapRegex)\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    ```\n    \n    Attaching package: 'qdapRegex'\n    ```\n    :::\n    \n    ::: {.cell-output .cell-output-stderr}\n    ```\n    The following object is masked from 'package:dplyr':\n    \n        explain\n    ```\n    :::\n    \n    ::: {.cell-output .cell-output-stderr}\n    ```\n    The following object is masked from 'package:ggplot2':\n    \n        %+%\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    movie$clean_genres <- rm_square(movie$genres, extract = TRUE)\n    \n    head(movie$clean_genres)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [[1]]\n    [1] \"{'id': 16, 'name': 'Animation'}, {'id': 35, 'name': 'Comedy'}, {'id': 10751, 'name': 'Family'}\"\n    \n    [[2]]\n    [1] \"{'id': 12, 'name': 'Adventure'}, {'id': 14, 'name': 'Fantasy'}, {'id': 10751, 'name': 'Family'}\"\n    \n    [[3]]\n    [1] \"{'id': 10749, 'name': 'Romance'}, {'id': 35, 'name': 'Comedy'}\"\n    \n    [[4]]\n    [1] \"{'id': 35, 'name': 'Comedy'}, {'id': 18, 'name': 'Drama'}, {'id': 10749, 'name': 'Romance'}\"\n    \n    [[5]]\n    [1] \"{'id': 35, 'name': 'Comedy'}\"\n    \n    [[6]]\n    [1] \"{'id': 28, 'name': 'Action'}, {'id': 80, 'name': 'Crime'}, {'id': 18, 'name': 'Drama'}, {'id': 53, 'name': 'Thriller'}\"\n    ```\n    :::\n    :::\n\n\n    I counted the number of \"id\" showed in the \"genre\" column to see how many genres each movie has.\n\n    The maximum number of genres is 8 and there are movies that do NOT have a genre assigned.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    movie$num_genre <- str_count(movie$genres, \"id\")\n    summary(movie$num_genre)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n       Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0.000   1.000   2.000   2.004   3.000   8.000 \n    ```\n    :::\n    :::\n\n\n    Since a single column \"genres\" now contains multiple genres of information, let's split the string so that each column contains only one genre of information.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #str_split(movie$clean_genres, \"\\\\},\")\n    \n    movie <- movie %>% \n      separate(clean_genres, c(\"genre1\", \"genre2\", \"genre3\", \"genre4\", \"genre5\", \"genre6\", \"genre7\", \"genre8\"), \"\\\\},\")\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    ```\n    Warning: Expected 8 pieces. Missing pieces filled with `NA` in 45463 rows [1, 2,\n    3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n    ```\n    :::\n    :::\n\n\n    The values in the genre1 to genre8 columns still contain unnecessary {}, etc., so let's clean them up!\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #\"\\\\{\", \"\\\\}\",\n    \n    \n    # I wanted to as follows but this misses some \"{\" \"\n    # movie$genre1 <- str_replace(movie$genre1, c(\"\\\\{\",\"\\\\}\"), \"\")\n    \n    # remove {\n    \n    \n    \n    \n    \n    movie$genre1 <- str_replace(movie$genre1, \"\\\\{\", \"\")\n    movie$genre2 <- str_replace(movie$genre2, \"\\\\{\", \"\")\n    movie$genre3 <- str_replace(movie$genre3, \"\\\\{\", \"\")\n    movie$genre4 <- str_replace(movie$genre4, \"\\\\{\", \"\")\n    movie$genre5 <- str_replace(movie$genre5, \"\\\\{\", \"\")\n    movie$genre6 <- str_replace(movie$genre6, \"\\\\{\", \"\")\n    movie$genre7 <- str_replace(movie$genre7, \"\\\\{\", \"\")\n    movie$genre8 <- str_replace(movie$genre8, \"\\\\{\", \"\")\n    \n    \n    # remove }\n    movie$genre1 <- str_replace(movie$genre1, \"\\\\}\", \"\")\n    movie$genre2 <- str_replace(movie$genre2, \"\\\\}\", \"\")\n    movie$genre3 <- str_replace(movie$genre3, \"\\\\}\", \"\")\n    movie$genre4 <- str_replace(movie$genre4, \"\\\\}\", \"\")\n    movie$genre5 <- str_replace(movie$genre5, \"\\\\}\", \"\")\n    movie$genre6 <- str_replace(movie$genre6, \"\\\\}\", \"\")\n    movie$genre7 <- str_replace(movie$genre7, \"\\\\}\", \"\")\n    movie$genre8 <- str_replace(movie$genre8, \"\\\\}\", \"\")\n    \n    \n    # remove \"'id':\"\n    movie$genre1 <- str_replace(movie$genre1, \"'id':\", \"\")\n    movie$genre2 <- str_replace(movie$genre2, \"'id':\", \"\")\n    movie$genre3 <- str_replace(movie$genre3, \"'id':\", \"\")\n    movie$genre4 <- str_replace(movie$genre4, \"'id':\", \"\")\n    movie$genre5 <- str_replace(movie$genre5, \"'id':\", \"\")\n    movie$genre6 <- str_replace(movie$genre6, \"'id':\", \"\")\n    movie$genre7 <- str_replace(movie$genre7, \"'id':\", \"\")\n    movie$genre8 <- str_replace(movie$genre8, \"'id':\", \"\")\n    \n    # remove \", 'name':\"\n    movie$genre1 <- str_replace(movie$genre1, \", 'name': \", \"\")\n    movie$genre2 <- str_replace(movie$genre2, \", 'name': \", \"\")\n    movie$genre3 <- str_replace(movie$genre3, \", 'name': \", \"\")\n    movie$genre4 <- str_replace(movie$genre4, \", 'name': \", \"\")\n    movie$genre5 <- str_replace(movie$genre5, \", 'name': \", \"\")\n    movie$genre6 <- str_replace(movie$genre6, \", 'name': \", \"\")\n    movie$genre7 <- str_replace(movie$genre7, \", 'name': \", \"\")\n    movie$genre8 <- str_replace(movie$genre8, \", 'name': \", \"\")\n    ```\n    :::\n\n\n    Next we will make the genre name columns.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    pivot_wider(\n      movie,\n      names_from = genre1, values_from = num_genre\n    )\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    ```\n    Warning: Values from `num_genre` are not uniquely identified; output will contain list-cols.\n    * Use `values_fn = list` to suppress this warning.\n    * Use `values_fn = {summary_fun}` to summarise duplicates.\n    * Use the following dplyr code to identify duplicates.\n      {data} %>%\n        dplyr::group_by(adult, belongs_to_collection, budget, genres, homepage, id, imdb_id, original_language, original_title, overview, popularity, poster_path, production_companies, production_countries, release_date, revenue, runtime, spoken_languages, status, tagline, title, video, vote_average, vote_count, genre2, genre3, genre4, genre5, genre6, genre7, genre8, genre1) %>%\n        dplyr::summarise(n = dplyr::n(), .groups = \"drop\") %>%\n        dplyr::filter(n > 1L)\n    ```\n    :::\n    \n    ::: {.cell-output .cell-output-error}\n    ```\n    Error in `values[spec$.name]`:\n    ! Can't subset columns with `spec$.name`.\n    ✖ Subscript `spec$.name` can't contain the empty string.\n    ✖ It has an empty string at location 12.\n    ```\n    :::\n    :::\n\n\n**Question**: I wanted to make genre options contained in genre 1 - 8 columns like the below image, but I haven't figured out how... I tried to use the Pivot_wider feature, but it didn't work the way I wanted it to.\n\nIs there any function that I could use for this?\n\n![](images/paste-B3340D59.png)\n\nAfter I figure out how to clean \"genre\" columns, I will do the same with the columns \"belongs_to_collection\", \"genres\", \"production_companies\", \"production_countries\", \"spoken_languages\".\n\nThen, I would love to join the bechdel test dataset (The movie has to have at least 2 \\[named\\] female characters, who talk to each other, about something other than a man) by using imdb_id.\n\n## Research questions\n\n-   How does female representation in the movie affects its popularity and profitability (≒ revenue)?\n\n-   How has changed the degree of female representation in the movies worldwide?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}