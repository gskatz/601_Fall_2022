{
  "hash": "d115045eb3c16b45478b2af24ad320e6",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 Instructions\"\nauthor: \"Meredith Rolfe\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"08/17/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - eggs\n  - australian_marriage\n  - usa_households\n  - sce_labor\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n## Eggs_tidy dataset(eggs_tidy.csv)-\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs <- read_csv(\"_data/eggs_tidy.csv\")\neggs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 √ó 6\n   month      year large_half_dozen large_dozen extra_large_half_dozen extra_l‚Ä¶¬π\n   <chr>     <dbl>            <dbl>       <dbl>                  <dbl>     <dbl>\n 1 January    2004             126         230                    132       230 \n 2 February   2004             128.        226.                   134.      230 \n 3 March      2004             131         225                    137       230 \n 4 April      2004             131         225                    137       234.\n 5 May        2004             131         225                    137       236 \n 6 June       2004             134.        231.                   137       241 \n 7 July       2004             134.        234.                   137       241 \n 8 August     2004             134.        234.                   137       241 \n 9 September  2004             130.        234.                   136.      241 \n10 October    2004             128.        234.                   136.      241 \n# ‚Ä¶ with 110 more rows, and abbreviated variable name ¬π‚Äãextra_large_dozen\n```\n:::\n:::\n\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA    1366.    -126.\n2 USA      1990 NAFTA    1557.    1850.\n3 France   1980 EU       2123.     773.\n4 Mexico   1990 NAFTA     950.     299.\n5 USA      1980 NAFTA     702.     266.\n6 France   1990 EU       1123.    3655.\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n:::\n\n\nAny additional comments?\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing              1366.\n 2 Mexico   1980 NAFTA incoming              -126.\n 3 USA      1990 NAFTA outgoing              1557.\n 4 USA      1990 NAFTA incoming              1850.\n 5 France   1980 EU    outgoing              2123.\n 6 France   1980 EU    incoming               773.\n 7 Mexico   1990 NAFTA outgoing               950.\n 8 Mexico   1990 NAFTA incoming               299.\n 9 USA      1980 NAFTA outgoing               702.\n10 USA      1980 NAFTA incoming               266.\n11 France   1990 EU    outgoing              1123.\n12 France   1990 EU    incoming              3655.\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\n\n::: {.cell}\n\n:::\n\n\nAny additional comments?\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    month                year      large_half_dozen  large_dozen   \n Length:120         Min.   :2004   Min.   :126.0    Min.   :225.0  \n Class :character   1st Qu.:2006   1st Qu.:129.4    1st Qu.:233.5  \n Mode  :character   Median :2008   Median :174.5    Median :267.5  \n                    Mean   :2008   Mean   :155.2    Mean   :254.2  \n                    3rd Qu.:2011   3rd Qu.:174.5    3rd Qu.:268.0  \n                    Max.   :2013   Max.   :178.0    Max.   :277.5  \n extra_large_half_dozen extra_large_dozen\n Min.   :132.0          Min.   :230.0    \n 1st Qu.:135.8          1st Qu.:241.5    \n Median :185.5          Median :285.5    \n Mean   :164.2          Mean   :266.8    \n 3rd Qu.:185.5          3rd Qu.:285.5    \n Max.   :188.1          Max.   :290.0    \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 6\n  month     year large_half_dozen large_dozen extra_large_half_dozen extra_lar‚Ä¶¬π\n  <chr>    <dbl>            <dbl>       <dbl>                  <dbl>       <dbl>\n1 January   2004             126         230                    132         230 \n2 February  2004             128.        226.                   134.        230 \n3 March     2004             131         225                    137         230 \n4 April     2004             131         225                    137         234.\n5 May       2004             131         225                    137         236 \n6 June      2004             134.        231.                   137         241 \n# ‚Ä¶ with abbreviated variable name ¬π‚Äãextra_large_dozen\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(eggs) * (ncol(eggs)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 360\n```\n:::\n:::\n\n\nIn the data set I can see that the data set has 120 rows and 6 columns. I think after pivoting to have the month, year, size of the egg and the quanity of the eggs.\n\nAfter arranging, the data like this it will be easy to see those changes which are made throughout the year and also the changes during the range of 2004-2013. It will help understand the differences between the large, extra large eggs as well as whether they were being sold in dozens or not.\n\nAfter pivoting, I think data will be 4 times longer data. Also, the total number of columns to be decreased by 1 because we want to remove the 4 size-quantity pairings names and replace them with month, year, size, quantity, average price.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs%>%\n  pivot_longer(cols=contains(\"large\"),\n               names_to = c(\"size\", \"quantity\"),\n               names_sep=\"_\",\n               values_to = \"cost\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 480 √ó 5\n   month     year size  quantity  cost\n   <chr>    <dbl> <chr> <chr>    <dbl>\n 1 January   2004 large half      126 \n 2 January   2004 large dozen     230 \n 3 January   2004 extra large     132 \n 4 January   2004 extra large     230 \n 5 February  2004 large half      128.\n 6 February  2004 large dozen     226.\n 7 February  2004 extra large     134.\n 8 February  2004 extra large     230 \n 9 March     2004 large half      131 \n10 March     2004 large dozen     225 \n# ‚Ä¶ with 470 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(longer)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in nrow(longer): object 'longer' not found\n```\n:::\n\n```{.r .cell-code}\nncol(longer)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ncol(longer): object 'longer' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(longer, \n       avg_USD = cost / 100\n       )%>%\n  select(!contains (\"price\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mutate(longer, avg_USD = cost/100): object 'longer' not found\n```\n:::\n:::\n\n\nAs we thought earlier, I see that the data is 4 times longer than and the number of columns has been reduced by one. So, this helps in understanding the data. the above table shows the prices in dollar which I change for better understanding.\n",
    "supporting": [
      "Manan_Patel_challenge3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}