{
  "hash": "9edc32ec470565dd5305e5c673ebe1bc",
  "result": {
    "markdown": "---\ntitle: \"Sarah McAlpine - Challenge 7\"\nauthor: \"Sarah McAlpine\"\ndesription: \"Homework Challenge 7\"\ndate: \"11/2/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_7\n  - sarahmcalpine\n  - airbnb\n  - ggplot2\n  - summarytools\n  - treemap\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(summarytools)\nlibrary(treemap)\nlibrary(viridis)\nlibrary(wesanderson)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in library(wesanderson): there is no package called 'wesanderson'\n```\n:::\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n## Tree Maps\nNot very interesting with this summary data.\n\n::: {.cell}\n\n```{.r .cell-code}\n#initial read-in \nairbnb_orig <- read_csv(\"_data/AB_NYC_2019.csv\",\n                        show_col_types = FALSE)\n\n# prep data for graph\nairbnb_medianpriced <- airbnb_orig %>%\n  filter(price>0) %>%\n  group_by(room_type, neighbourhood_group) %>%\n    summarize(median(price))%>%\n  mutate(neighbourhood_group = fct_relevel(neighbourhood_group,\n                                           \"Manhattan\",\n                                           \"Brooklyn\",\n                                           \"Queens\",\n                                           \"Bronx\",\n                                           \"Staten Island\"\n                                           )) \n\n#how do I do this next bit without starting a new pipe?\nairbnb_medianpriced <- airbnb_medianpriced %>%\n  rename(median_price = \"median(price)\") \n```\n:::\n\nThese treemaps tell a simple, predictable story. The data I'm using is too simple for this graph type. I think I'll try violin plots to see the range and density of prices. I played around with applying different color palettes.\n\n::: {.cell}\n\n```{.r .cell-code}\nzissou <- wes_palette(\"Zissou1\", 5, type = \"discrete\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in wes_palette(\"Zissou1\", 5, type = \"discrete\"): could not find function \"wes_palette\"\n```\n:::\n\n```{.r .cell-code}\nmoonrise <- wes_palette(\"Moonrise3\", 5, type = \"discrete\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in wes_palette(\"Moonrise3\", 5, type = \"discrete\"): could not find function \"wes_palette\"\n```\n:::\n\n```{.r .cell-code}\nroyal2 <- wes_palette(\"Royal2\", 5, type = \"discrete\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in wes_palette(\"Royal2\", 5, type = \"discrete\"): could not find function \"wes_palette\"\n```\n:::\n\n```{.r .cell-code}\ndar2 <- wes_palette(\"Darjeeling2\", 5, type = \"discrete\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in wes_palette(\"Darjeeling2\", 5, type = \"discrete\"): could not find function \"wes_palette\"\n```\n:::\n\n```{.r .cell-code}\nairbnb_medianpriced %>%\ntreemap(room_type,\n        index= c(\"neighbourhood_group\", \"room_type\"),\n        vSize = \"median_price\",\n        type = \"index\",\n        title = \"Median Listing Price by Neighborhood, Airbnb NYC 2019\",\n        overlap.labels = 0,\n        palette = (moonrise))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in treemap(., room_type, index = c(\"neighbourhood_group\", \"room_type\"), : object 'moonrise' not found\n```\n:::\n\n```{.r .cell-code}\nairbnb_medianpriced %>%\ntreemap(room_type,\n        index= c(\"neighbourhood_group\", \"room_type\"),\n        vSize = \"median_price\",\n        type = \"index\",\n        title = \"Median Listing Price by Neighborhood, Airbnb NYC 2019\",\n        palette = viridis(n=6, option = \"A\"))\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/treemap color play-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#try again, swapping room and neighborhood group\nairbnb_medianpriced %>%\ntreemap(room_type,\n        index= c(\"room_type\",\"neighbourhood_group\"),\n        vSize = \"median_price\",\n        type = \"index\",\n        title = \"Median Listing Price by Neighborhood, Airbnb NYC 2019\",\n        palette = (\"Set2\")\n) \n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/treemap color play-2.png){width=672}\n:::\n:::\n\nHow do I adjust so that the labels don't overlap? I used `overlap.labels = 0` on the first one, but that just suppressed the \"Entire home/apt\" label instead of moving one or the other.\n\n::: {.cell}\n\n```{.r .cell-code}\nairbnb_medianpriced %>%\ntreemap(room_type,\n        index= c(\"neighbourhood_group\", \"room_type\"),\n        vSize = \"median_price\",\n        type = \"index\",\n        title = \"Median Listing Price by Neighborhood, Airbnb NYC 2019\",\n        overlap.labels = 0,\n        palette = c(\"#FFCE30\", \"#E83845\", \"#E389B9\", \"#746AB0\", \"#288BA8\"))\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/Custom colors-1.png){width=672}\n:::\n:::\n\n\n## Violin Plots With and Without Outliers\n\n::: {.cell}\n\n```{.r .cell-code}\n#initial violin plot\nairbnb_orig %>%  \n  ggplot(aes(x=room_type, y=price, fill=neighbourhood_group)) + \n  geom_violin(width = 1, size = .5, \n              scale = \"area\",\n              trim = TRUE)+\n  coord_flip()+\n  labs(x=\"room type\", title = \"With Outliers\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/violins-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#create is_outlier function\nis_outlier <- function(x) {\n  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))\n}\n#apply the function, removing outliers\nairbnb_trim <- airbnb_orig %>%\n  filter(!is_outlier(price))\n\n#confirm decrease in rows\n#airbnb_trim\n\n#set up df for this plot\nairbnb_priced <- airbnb_orig %>%\n  filter(price>0, price<800) %>%\n  group_by(room_type, neighbourhood_group) \n\n# violin plot without outliers\nairbnb_priced %>%  \n  ggplot(aes(x=room_type, y=price, fill=neighbourhood_group)) + \n  geom_violin(width = 1, size = .5, \n              scale = \"area\",\n              trim = TRUE)+\n  coord_flip()+\n  labs(x=\"room type\", title = \"Without Outliers\")\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/violins-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# \n# airbnb_priced %>% \n# #  filter(price<300) %>%\n#   ggplot(aes(x=room_type, y=price, fill=neighbourhood_group)) + \n#   geom_violin(width = 1, size = .5, \n#               scale = \"area\",\n#               trim = TRUE)+\n#   #coord_flip()+\n#   xlab(\"room type\")+\n#   facet_wrap(vars(room_type), scales = \"free_x\")\n```\n:::\n\nThis violin plot shows the density of prices of each rental, by both room type and by borough, but the scale is so various that it's hard to really compare. Next I will try facet wrap and two rotations of the axes to see which is better to read. \n\n## Violin Plots with Facet Wrap\n\n::: {.cell}\n\n```{.r .cell-code}\n#horizontal violin plot\nairbnb_trim %>% \n  ggplot(aes(x=room_type, y=price, fill=neighbourhood_group)) + \n  geom_violin(width = 1, size = .5, \n              scale = \"area\",\n              trim = TRUE)+\n  coord_flip()+\n  xlab(\"room type\")+\n  facet_wrap(vars(room_type), scales = \"free_x\")+\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/violins facet wrap-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# vertical violin plot\nairbnb_trim %>% \n  ggplot(aes(x=room_type, y=price, fill=neighbourhood_group)) + \n  geom_violin(width = 1, size = .5, \n              scale = \"area\",\n              trim = TRUE)+\n  facet_wrap(vars(room_type), scales = \"free_x\")+\n  theme_bw()+\n  labs(x=\"Room Type\", y = \"Price\", fill= \"Borough\", title = \"NYC Airbnb Prices by Borough and Room Type\", subtitle= \"2019\")\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/violins facet wrap-2.png){width=672}\n:::\n:::\n\nThe vertical violin plot tells a clear story. I've added a title to make it \"publication ready.\"\n\n## Grouped Bars\n\n::: {.cell}\n\n```{.r .cell-code}\nairbnb_medianpriced %>%\n  ggplot(aes(x = room_type, y = median_price, fill = neighbourhood_group)) +\n  geom_bar(position= \"dodge\", stat = \"identity\") +\n  xlab(\"room type\") +\n  ylab(\"median price per night\")+\n # scale_y_reverse() + \n  #coord_flip()+\n  scale_fill_viridis_d()\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/grouped bars-1.png){width=672}\n:::\n\n```{.r .cell-code}\nairbnb_medianpriced %>%\n  ggplot(aes(x = reorder(neighbourhood_group, median_price), \n             y = median_price, \n             fill = room_type)) +\n  geom_bar(\n    position= \"dodge\", \n    stat = \"identity\")+\n  labs(x=\"Borough\", \n       y = \"Median Price per Night\", \n       title = \"Median NYC Airbnb Prices by Borough and Room Type (2019)\", \n       fill = \"Room Type\") +\n  scale_fill_viridis_d()\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/grouped bars-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#new copy to try colors\nairbnb_medianpriced %>%\n  ggplot(aes(x = reorder(neighbourhood_group, median_price), \n    y = median_price,   \n    fill = room_type)) +\n  geom_bar(position= \"dodge\", stat = \"identity\") +\n  labs(x=\"Borough\", y = \"Median Price per Night\", title = \"Median NYC Airbnb Prices by Borough and Room Type (2019)\", fill = \"Room Type\") +\n  coord_flip()+\n  scale_fill_viridis_d()\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/grouped bars-3.png){width=672}\n:::\n:::\n\nThese last two graphs show the clear distinctions among the median prices by room type, and while both show the differences across boroughs, the final graph tells the clearest story. I used fct_level to change the order of boroughs, but now I would like the amounts to go largest to smallest, and so I'd like to reverse the order of room types to mirror how they appear in the legend. \n\n\n## Experiments with Geom_Point\n\n::: {.cell}\n\n```{.r .cell-code}\n# experiment i coded at 9pm\nairbnb_orig %>%\n  group_by(room_type)%>%\n  #how to rename a column within a pipe? maybe this is why prof Rolfe says to do it while tidying, in the read-in chunk\n  ggplot(aes(x=neighbourhood_group, y=price)) +\n  geom_point(alpha=.1, size=10)\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nairbnb_trim%>%\n group_by(room_type, neighbourhood_group)%>%\n  ggplot(aes(x=neighbourhood_group, y=price)) +\n  geom_point(alpha=.5, size=5)+\n # theme_minimal()+\n  facet_wrap(\"room_type\")+\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n\n```{.r .cell-code}\n #+ labs(style=\"dodge\")\n\nairbnb_trim%>%\n group_by(room_type, neighbourhood_group)%>%\n  ggplot(aes(x=neighbourhood_group, y=price)) +\n  geom_point(alpha=.5, size=5)+\n # theme_minimal()+\n  facet_wrap(\"room_type\")+\n  geom_text(aes(\"neighbourhood_group\", label = price),\n            position = position_dodge(width=1))\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-8-3.png){width=672}\n:::\n:::\n\n## Box Plot Over Geom_Point: MY BEST SO FAR!\n\n::: {.cell}\n\n```{.r .cell-code}\n# basic geom_point\nairbnb_trim%>%\n group_by(room_type, neighbourhood_group)%>%\n  ggplot(aes(x=neighbourhood_group, y=price)) +\n  geom_point(alpha=.08, size=5, color = \"#00A699\")+\n  facet_wrap(\"room_type\")+\n  scale_x_discrete(guide = guide_axis(n.dodge=2))+\n  labs(x=\"Boroughs\",y=\"price per night\", title = \"NYC Airbnb Rental Prices 2019 by Borough\")+\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Add a boxplot on top!\nairbnb_trim%>%\n group_by(room_type, neighbourhood_group)%>%\n  ggplot(aes(x=neighbourhood_group, y=price)) +\n  geom_point(alpha=.08, size=5, color = \"#00A699\")+\n  facet_wrap(\"room_type\")+\n  #scale_x_discrete(guide = guide_axis(n.dodge=2))+\n  labs(x=\"Boroughs\",y=\"price per night\", title = \"NYC Airbnb Rental Prices 2019 by Borough\")+\n  theme_light()+\n  geom_boxplot()+\n  theme(axis.text.x = element_text(angle = 30))\n```\n\n::: {.cell-output-display}\n![](SarahMcAlpine_hw7_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n:::\n\nWow. This is an incredible improvement with the single line:\n`+  geom_boxplot()`. I now have a very good idea what prices these three types of rentals go for across the boroughs.\n  \n\n",
    "supporting": [
      "SarahMcAlpine_hw7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}