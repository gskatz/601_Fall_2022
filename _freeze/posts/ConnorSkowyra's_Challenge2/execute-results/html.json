{
  "hash": "24d778523b635e7fec504e2e69ac9575",
  "result": {
    "markdown": "---\ntitle: \"Challenge 2\"\nauthor: \"Connor Skowyra\"\ndesription: \"Data wrangling: using group() and summarise()\"\ndate: \"08/16/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_2\n  - railroads\n  - faostat\n  - hotel_bookings\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Reading State County 2012\n\n> library(readxl)\n> StateCounty2012.csv <- read_excel(\"posts/_data/StateCounty2012.xls\")\n\n## Reading Birds\n\n> library(readr)\n> Birds.csv <- read_csv(\"posts/_data/Birds.csv\")\n\n## Connor's Answer to Reading the data\n\nThe data for all sets were either created in Excel or CSV. To understand the data sets, first, we must load the data to be analyzed.\n\n> library(tidyverse)\n> load(Birds.csv)\n\nWe can create a summary to tell us the min and max as well as mean and median for the data.\n\nAn example is: summary(Birds.csv)\n\nTo find out how many columns and rows are in the dataset, we can use the dim() code to help find this answer.\n\nAn example is dim(Birds.csv)\n\nOn the left side of the answer is the amount of rows, which is 30,977, while on the right is the amount of columns, which is 14.\n\n## Provide Grouped Summary Statistics\n\nConduct some exploratory data analysis, using dplyr commands such as `group_by()`, `select()`, `filter()`, and `summarise()`. Find the central tendency (mean, median, mode) and dispersion (standard deviation, mix/max/quantile) for different subgroups within the data set.\n\n## Exploratory Data Analysis\n\nI decided to research the amounts of chickens in Poland by year. The reason I decided on this research is that I am Polish, I found it interesting to see the amount of chickens in Poland per year and how the values changes. Using Filters, Arrange, and Select functions, I manipulated the data to show me the only important columns to this project which are the area, item, year, and value.\n\nfilter(Birds.csv, `Item` == 'Chickens' & `Area` == 'Poland') %>% arrange(`Year`) %>% select(Area,Item,Year,Value)\n\nIn the data, the value of chickens begin to increase on a yearly basis. The main reasoning for this fact is the modernization of Poland. The modernization of Poland comes with improved ways to take care of chickens, more people to feed due to a higher population, and higher GDP capita per person due to an economic boom through the years after Europe is rebuilt after World War II.\n\nFinally, we need to summarize the data to be easily shared and discussed between groups of people with the intent of making decisions around the chicken population of Poland.\n\n## Mean and Median\n\n> Birds %>% filter(`Item` == 'Chickens' & `Area` == 'Poland') %>% group_by(Area) %>% select(Area,Item,Year,Value) %>% summarise(mean_value = mean(Value, na.rm=TRUE), median_value = median(Value, na.rm=TRUE))\n\n## Min/Max, SD, IQR\n\n> Birds %>% filter(`Item` == 'Chickens' & `Area` == 'Poland') %>% group_by(Area) %>% select(Area,Item,Year,Value) %>% summarise(min_value = min(Value, na.rm=TRUE), max_value = max(Value, na.rm=TRUE), sd_value= sd(Value, na.rm=TRUE), IQR_value = IQR(Value, na.rm = TRUE))\n\nUsing this code, we found the mean to be 85,845 chickens and median of 72.520 chickens in Poland for the last 50 years. Now, let's compare the mean and median to a similar Eastern European country, Ukraine.\n\nBirds %>% filter(`Item` == 'Chickens' & `Area` == 'Ukraine') %>% group_by(Area) %>% select(Area,Item,Year,Value) %>% summarise(mean_value = mean(Value, na.rm=TRUE), median_value = median(Value, na.rm=TRUE))\n\nTo find the difference between Poland and Ukraine's Chicken, I subtracted the means and medians to give a final statement, Ukraine has 67,548 chickens more than that Poland on average over the last 50 years.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}