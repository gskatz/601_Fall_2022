{
  "hash": "6eb0e9cb4202a369fd9ecd73f193f9ac",
  "result": {
    "markdown": "---\ntitle: \"Challenge 7 Instructions\"\nauthor: \"Meredith Rolfe\"\ndescription: \"Visualizing Multiple Dimensions\"\ndate: \"08/24/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_7\n  - hotel_bookings\n  - australian_marriage\n  - air_bnb\n  - eggs\n  - abc_poll\n  - faostat\n  - usa_households\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  Recreate at least two graphs from previous exercises, but introduce at least one additional dimension that you omitted before using ggplot functionality (color, shape, line, facet, etc) The goal is not to create unneeded [chart ink (Tufte)](https://www.edwardtufte.com/tufte/), but to concisely capture variation in additional dimensions that were collapsed in your earlier 2 or 3 dimensional graphs.\n\n-   Explain why you choose the specific graph type\n\n5)  If you haven't tried in previous weeks, work this week to make your graphs \"publication\" ready with titles, captions, and pretty axis labels and other viewer-friendly features\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code. And anyone not familiar with Edward Tufte should check out his [fantastic books](https://www.edwardtufte.com/tufte/books_vdqi) and [courses on data visualizaton.](https://www.edwardtufte.com/tufte/courses)\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   eggs ⭐\n-   abc_poll ⭐⭐\n-   australian_marriage ⭐⭐\n-   hotel_bookings ⭐⭐⭐\n-   air_bnb ⭐⭐⭐\n-   us_hh ⭐⭐⭐⭐\n-   faostat ⭐⭐⭐⭐⭐\n\n## Eggs data set- (eggs_tidy.csv)\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs <- read_csv(\"_data/eggs_tidy.csv\")\nhead(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  month     year large_half_dozen large_dozen extra_large_half_dozen extra_lar…¹\n  <chr>    <dbl>            <dbl>       <dbl>                  <dbl>       <dbl>\n1 January   2004             126         230                    132         230 \n2 February  2004             128.        226.                   134.        230 \n3 March     2004             131         225                    137         230 \n4 April     2004             131         225                    137         234.\n5 May       2004             131         225                    137         236 \n6 June      2004             134.        231.                   137         241 \n# … with abbreviated variable name ¹​extra_large_dozen\n```\n:::\n:::\n\n\n### Briefly describe the data\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolumn = names(eggs)\ncolumn <- column[!column %in% c(\"year\",\"month\")]\ncolumn\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"large_half_dozen\"       \"large_dozen\"            \"extra_large_half_dozen\"\n[4] \"extra_large_dozen\"     \n```\n:::\n:::\n\n\nHere, names() function returns the names of the columns in a data frame. The %in% operator is used to test whether the elements of the column vector are contained in the c(\"year\",\"month\") vector, which is a vector of character strings containing the values year and month. So the column vector will only contain the names of columns that are not year or month.\n\nTo find the total sales for each year, we can group the data by year and use a summary function to calculate the total sales for each group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs <- eggs %>%\n     pivot_longer(eggs, cols=column, names_to = \"carton_type\", values_to = \"sales\")\nhead(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  month     year carton_type            sales\n  <chr>    <dbl> <chr>                  <dbl>\n1 January   2004 large_half_dozen        126 \n2 January   2004 large_dozen             230 \n3 January   2004 extra_large_half_dozen  132 \n4 January   2004 extra_large_dozen       230 \n5 February  2004 large_half_dozen        128.\n6 February  2004 large_dozen             226.\n```\n:::\n:::\n\n\n## Visualization with Multiple Dimensions\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup <- eggs %>%\n  group_by(year) %>%\n  summarise(\n    sum = sum(sales)\n  )\ngroup\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n    year    sum\n   <dbl>  <dbl>\n 1  2004  8805.\n 2  2005  8862 \n 3  2006  8867.\n 4  2007  9018.\n 5  2008 10226 \n 6  2009 11046 \n 7  2010 10968.\n 8  2011 10974.\n 9  2012 10997.\n10  2013 11084.\n```\n:::\n:::\n\n\nIn this eggs dataset is first grouped by the year column using the group_by() function then for each group a new column named sum is created that contains the sum of the sales column for that group. The resulting dataset is saved in the group variable then we used summarise() function.\n\nI restructured the data so that each row represents a month, year, egg carton type, and the corresponding sales of that type of carton. This new format will make it easier to conduct further analysis and group the data.\n\nLet's create a simple line graph showing the sales made over the years-\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a line plot of the sum column against the year column\nggplot(group, aes(x = year, y = sum)) +\n  geom_line(color = \"red\") +  # set the line color to red\n  theme_minimal() +  # use the minimal theme for the plot\n  theme(\n    plot.background = element_rect(fill = \"lightblue\"),  # set the background color to light blue\n    panel.grid = element_line(color = \"grey\")  # set the grid lines to grey\n  )\n```\n\n::: {.cell-output-display}\n![](Manan_Patel_challenge7_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nTo get the total sales, group the data by year and carton type-\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_by_y <- eggs %>%\n  group_by(year, carton_type) %>%\n  summarise(\n    sum = sum(sales)\n  )\ngroup_by_y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 3\n# Groups:   year [10]\n    year carton_type              sum\n   <dbl> <chr>                  <dbl>\n 1  2004 extra_large_dozen      2848.\n 2  2004 extra_large_half_dozen 1631.\n 3  2004 large_dozen            2764.\n 4  2004 large_half_dozen       1563.\n 5  2005 extra_large_dozen      2892 \n 6  2005 extra_large_half_dozen 1626 \n 7  2005 large_dozen            2802 \n 8  2005 large_half_dozen       1542 \n 9  2006 extra_large_dozen      2897.\n10  2006 extra_large_half_dozen 1626 \n# … with 30 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(group_by_y, aes(x=year, y=sum, fill=carton_type)) +\n  geom_col(color=\"black\", size=0.5) +\n  theme(text = element_text(family=\"Courier\")) +\n  geom_vline(xintercept=c(2010, 2015, 2020), color=\"red\", linetype=\"dashed\", size=1) +\n  scale_fill_brewer(type=\"seq\", palette=\"Blues\")\n```\n\n::: {.cell-output-display}\n![](Manan_Patel_challenge7_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nNow we will create a graph showing the data grouped by year and carton type, with the total sales-\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Here we create a new plot with the group_by_y dataframe as the data source\nggplot(data=group_by_y, aes(x=year, y=sum, color= carton_type)) +\n  geom_line() +\n  geom_point() +\n  # Add labels for the x-axis, y-axis, and plot title\n  labs(\n    x = \"Year\",\n    y = \"Total Sales\",\n    color = \"Carton Type\",\n    title = \"Total Sales By Carton Type Across Years\"\n  ) +\n  guides(color = guide_legend(title=\"Carton Type\")) +\n  # Use the theme_minimal function to create a minimal theme\n  theme_minimal() +\n  theme(\n    text = element_text(family=\"Arial\", size=16, color=\"darkblue\"), # Set font, size, and color of text\n    panel.background = element_rect(fill=\"lightblue\") # Set fill color of background\n  )\n```\n\n::: {.cell-output-display}\n![](Manan_Patel_challenge7_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nTo create a horizontal stacked bar chart and convert the year variable to a categorical type we will,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we will create a new dataframe with the year column as a character\ncatyear <- group_by_y %>%\n  mutate(year=as.character(year))\n\n# now we create a new plot with the catyear dataframe as the data source\nggplot(catyear, aes(x = sum, y = year)) +\n  # then add a stacked bar chart to the plot\n  geom_bar(\n    aes(color = carton_type, fill = carton_type), # Color and fill bars based on carton_type\n    stat = \"identity\", # Set the statistic to identity to create a stacked bar chart\n    position = \"dodge\" # Set the position to dodge to stack the bars\n  ) + \n  # Add labels for the x-axis, y-axis, and plot title\n  labs(\n    x = \"Total Sales\",\n    y = \"Year\",\n    title = \"Total Sales Across Years Stacked By Carton Type\"\n  ) +\n  # Use the theme_minimal function to create a minimal theme with no background annotations or grid lines\n  theme_minimal() +\n  # Use the theme function to customize the font, size, and color of the text in the plot, and the background color\n  theme(\n    text = element_text(family=\"Arial\", size=16, color=\"darkblue\"), # Set font, size, and color of text\n    panel.background = element_rect(fill=\"yellow\") # Set fill color of background\n  )\n```\n\n::: {.cell-output-display}\n![](Manan_Patel_challenge7_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = catyear, mapping = aes(x=year, y=sum, fill = year)) +\n  geom_bar(stat = \"identity\", position = \"stack\") + \n  labs(\n    x = \"Year\",\n    y = \"Sale\",\n    fill = \"Year\",\n    title = \"Total egg sale by Year\"\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"lightblue\"),\n    panel.border = element_rect(color = \"black\", fill = NA, size = 2)\n  )\n```\n\n::: {.cell-output-display}\n![](Manan_Patel_challenge7_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = catyear, mapping = aes(x=carton_type, y=sum, fill = year)) +\n  geom_bar(stat = \"identity\", position = \"stack\") + \n  labs(\n    x = \"egg and carton size\",\n    y = \"sale\",\n    fill = \"Year\",\n    title = \"Total egg sales by category and month\"\n  )+\n  theme(\n    plot.background = element_rect(fill = \"lightblue\"),\n    panel.border = element_rect(color = \"black\", fill = NA, size = 1),\n    text = element_text(family = \"Arial\")\n  )\n```\n\n::: {.cell-output-display}\n![](Manan_Patel_challenge7_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Manan_Patel_challenge7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}