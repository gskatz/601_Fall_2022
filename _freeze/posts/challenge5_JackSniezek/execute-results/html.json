{
  "hash": "464378d99af073e056b15b148ff5b1f1",
  "result": {
    "markdown": "---\ntitle: \"Challenge 5\"\nauthor: \"Jack Sniezek\"\ndescription: \"Introduction to Visualization\"\ndate: \"12/06/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5\n  - cereal\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least two univariate visualizations\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n5)  Create at least one bivariate visualization\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   cereal.csv ⭐\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncereal <- read_csv(\"_data/cereal.csv\")\ncereal\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 4\n   Cereal                Sodium Sugar Type \n   <chr>                  <dbl> <dbl> <chr>\n 1 Frosted Mini Wheats        0    11 A    \n 2 Raisin Bran              340    18 A    \n 3 All Bran                  70     5 A    \n 4 Apple Jacks              140    14 C    \n 5 Captain Crunch           200    12 C    \n 6 Cheerios                 180     1 C    \n 7 Cinnamon Toast Crunch    210    10 C    \n 8 Crackling Oat Bran       150    16 A    \n 9 Fiber One                100     0 A    \n10 Frosted Flakes           130    12 C    \n11 Froot Loops              140    14 C    \n12 Honey Bunches of Oats    180     7 A    \n13 Honey Nut Cheerios       190     9 C    \n14 Life                     160     6 C    \n15 Rice Krispies            290     3 C    \n16 Honey Smacks              50    15 A    \n17 Special K                220     4 A    \n18 Wheaties                 180     4 A    \n19 Corn Flakes              200     3 A    \n20 Honeycomb                210    11 C    \n```\n:::\n\n```{.r .cell-code}\nsummary(cereal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Cereal              Sodium          Sugar           Type          \n Length:20          Min.   :  0.0   Min.   : 0.00   Length:20         \n Class :character   1st Qu.:137.5   1st Qu.: 4.00   Class :character  \n Mode  :character   Median :180.0   Median : 9.50   Mode  :character  \n                    Mean   :167.0   Mean   : 8.75                     \n                    3rd Qu.:202.5   3rd Qu.:12.50                     \n                    Max.   :340.0   Max.   :18.00                     \n```\n:::\n:::\n\n\n## Briefly describe the data\n\nThe cereal dataset is made up of 4 variables: Cereal, Sodium content, Sugar content, and Type(Adult or Child). There are 20 cereal types.\n\n## Tidy Data (as needed)\n\nThe data appears to be tidy already, there is no missing data.\n\n## Univariate Visualizations\n\nMy first visualization is to put the sugar levels of Children's cereals into a bar graph. I felt like a bar graph was the best way to view which cereals had the most/least sugar as well as which ones were similar.\n\nThe second visualization I did was to use a bar graph showing the sodium levels of all cereals. Again, I thought this was the best type of graph to show visually which cereals were similar and different.\n\n::: {.cell}\n\n```{.r .cell-code}\ncereal %>%\n  filter(Type == \"C\") %>% \n  arrange(Sugar) %>%   \n  mutate(Cereal=factor(Cereal, levels=Cereal)) %>%\nggplot(aes(x=Cereal, y=Sugar)) + \n  geom_bar(stat = \"identity\", fill = \"darkorchid\") +\n  theme_minimal() +\n  coord_flip() +\n    ggtitle(\"Sugar Level of Children's Cereals\")\n```\n\n::: {.cell-output-display}\n![](challenge5_JackSniezek_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncereal %>%\n  mutate(Cereal = factor(Cereal))%>%\n  ggplot(aes(x=Cereal, y = Sugar)) +\n  geom_bar(stat = \"identity\", fill = \"dodgerblue\") +\n  theme_light() +\n  coord_flip() +\n  ggtitle(\"Sodium Levels of Cereals\") +\n  labs(y = \"Sugar Content\", x = \"Sodium Content\")\n```\n\n::: {.cell-output-display}\n![](challenge5_JackSniezek_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\n## Bivariate Visualization(s)\n\nMy Bivariate visualization was comparing the sugar content of cereals to the sodium content of cereals. I did this by using a scatterplot to represent the data points with Sugar as the y axis and Sodium as the x axis. I felt like this was the best way to compare cereals and view the similarities and differences in each cereal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncereal%>%\n  ggplot(aes(x = Sugar,y = Sodium)) +\n  geom_point(color = \"green\") +\n  ggtitle(\"Sugar Compared to Sodium Levels in Cereals\") +\n  labs(y = \"Sugar Content\", x = \"Sodium Content\")\n```\n\n::: {.cell-output-display}\n![](challenge5_JackSniezek_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nAdditional Thoughts:\n\n1. When I work on the next challenges I want to think about labeling the data within the chart, such as the scatterplot points and maybe even the bars in a bar graph if it is fitting.\n\n2. I want to think about making data points different colors and adding a legend in the next challenges\n\n3. Surprised that Raisin Bran is the worst cereal for both categories, its not even a great tasting cereal\n",
    "supporting": [
      "challenge5_JackSniezek_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}