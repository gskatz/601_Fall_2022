{
  "hash": "f36fd5e057a84cfaa1612c22097419ea",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 Instructions\"\nauthor: \"Amer Abuhasan\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"08/17/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - eggs\n  - australian_marriage\n  - usa_households\n  - sce_labor\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n eggs<- read_csv(\"_data/eggs_tidy.csv\")\neggs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 √ó 6\n   month      year large_half_dozen large_dozen extra_large_half_dozen extra_l‚Ä¶¬π\n   <chr>     <dbl>            <dbl>       <dbl>                  <dbl>     <dbl>\n 1 January    2004             126         230                    132       230 \n 2 February   2004             128.        226.                   134.      230 \n 3 March      2004             131         225                    137       230 \n 4 April      2004             131         225                    137       234.\n 5 May        2004             131         225                    137       236 \n 6 June       2004             134.        231.                   137       241 \n 7 July       2004             134.        234.                   137       241 \n 8 August     2004             134.        234.                   137       241 \n 9 September  2004             130.        234.                   136.      241 \n10 October    2004             128.        234.                   136.      241 \n# ‚Ä¶ with 110 more rows, and abbreviated variable name ¬π‚Äãextra_large_dozen\n```\n:::\n\n```{.r .cell-code}\n# Data set of large and extra large in one column \n\neggs_long<-eggs%>%\n  pivot_longer(cols=contains(\"large\"), \n               names_to = \"eggType\",\n               values_to = \"avgPrice\"\n  )\n\neggs_long<- eggs_long%>%\n  mutate(size = case_when(startsWith(eggType, \"extra\")~\"extra_large\",startsWith(eggType, \"large\")~\"large\"))\n\n\n\n\n#boxplot for large eggs and there weights \nggplot(eggs_long, aes(x=size, y=avgPrice, col=size)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](AmerAbuhasan_challenge3_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#boxplot + Facet grid for large eggs by year and weight \nggplot(large, aes(x=\"\", y=weight)) + geom_boxplot()+ facet_grid(large~year)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(large, aes(x = \"\", y = weight)): object 'large' not found\n```\n:::\n\n```{.r .cell-code}\n#egg count per month \neggs %>% \n  count(month)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 2\n   month         n\n   <chr>     <int>\n 1 April        10\n 2 August       10\n 3 December     10\n 4 February     10\n 5 January      10\n 6 July         10\n 7 June         10\n 8 March        10\n 9 May          10\n10 November     10\n11 October      10\n12 September    10\n```\n:::\n\n```{.r .cell-code}\n#egg count per year \neggs %>%\n  count(year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 √ó 2\n    year     n\n   <dbl> <int>\n 1  2004    12\n 2  2005    12\n 3  2006    12\n 4  2007    12\n 5  2008    12\n 6  2009    12\n 7  2010    12\n 8  2011    12\n 9  2012    12\n10  2013    12\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nthe data contained in the first code is a pivot to tidy the table and to select avg price of the values. \n\n#second code \nThe second code is creating a boxplot diagram for the large eggs and the weights \n\n#the third code \nIncludes a facet grid for all years by egg weights for large eggs \n\n#4th code \nFor count of eggs per month \n\n#5th code \nCount of eggs per year \n\n\n\n\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, df1, df2, ncp, log = FALSE) \n{\n    if (missing(ncp)) \n        .Call(C_df, x, df1, df2, log)\n    else .Call(C_dnf, x, df1, df2, ncp, log)\n}\n<bytecode: 0x000001bff0754d30>\n<environment: namespace:stats>\n```\n:::\n\n```{.r .cell-code}\ndf<-tibble(eggs = rep(c(\"large\", \"extra_large\", \"year\"),2),\n           year = rep(c(2004,2013), 3), \n           trade = rep(c(),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 4\n  eggs         year outgoing incoming\n  <chr>       <dbl>    <dbl>    <dbl>\n1 large        2004    1651.   1364. \n2 extra_large  2013    1724.   -340. \n3 year         2004     942.   1489. \n4 large        2013     803.    -95.8\n5 extra_large  2004    1144.    214. \n6 year         2013    1299.    638. \n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n:::\n\n\nAny additional comments?\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 4\n   eggs         year trade_direction trade_value\n   <chr>       <dbl> <chr>                 <dbl>\n 1 large        2004 outgoing             1651. \n 2 large        2004 incoming             1364. \n 3 extra_large  2013 outgoing             1724. \n 4 extra_large  2013 incoming             -340. \n 5 year         2004 outgoing              942. \n 6 year         2004 incoming             1489. \n 7 large        2013 outgoing              803. \n 8 large        2013 incoming              -95.8\n 9 extra_large  2004 outgoing             1144. \n10 extra_large  2004 incoming              214. \n11 year         2013 outgoing             1299. \n12 year         2013 incoming              638. \n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\nAny additional comments?\n",
    "supporting": [
      "AmerAbuhasan_challenge3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}