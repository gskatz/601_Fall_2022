{
  "hash": "cd28e99433cc306e21302dfe0e99ef15",
  "result": {
    "markdown": "---\ntitle: \"Challenge 5 Adam Maciaszek\"\nauthor: \"Adam Maciaszek\"\ndescription: \"Introduction to Visualization\"\ndate: \"10/16/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5\n  - railroads\n  - usa_households\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readxl)\nlibrary(summarytools)\nlibrary(usmap)\nlibrary(tigris)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in library(tigris): there is no package called 'tigris'\n```\n:::\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least two univariate visualizations\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n5)  Create at least one bivariate visualization\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset <- data.frame()\nfile_name <- \"_data/USA Households by Total Money Income, Race, and Hispanic Origin of Householder 1967 to 2019.xlsx\"\ncnames <- read_excel(file_name, sheet = 1, skip = 4, n_max = 0) %>% names()\ncnames[2:9] <- gsub('[\\r\\nto\\r\\n]+', '-',cnames[2:9])\ncnames <- c(\"Year\",\"Number_thousands\",\"Total\",cnames[2:10],\"Median\",\"Error_of_Median\",\"Mean\",\"Error_of_Mean\")\ndataset <- read_excel(file_name, sheet = 1, skip = 5,col_names = cnames)\n```\n:::\n\n\n### Briefly describe the data\nEach Demographic in the data set is sepereated in sections and lists all the years recorded for that demographic from 1967 to 2019. For each row each income level is recorded as a percentage of the total number and the mean and median for that year is also recorded along with their respective errors\n\n## Mutating Data\nThe sets of data which are seperated by demographic need to have a dedicated column which will have the demographic of that recording as its value. These lines are blank aside from labeling the demographic in the first column so you can collect and mark which rows belong to which demographic. The extra lines of information explaining the table at the need to be removed.\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_name_rows <- which(is.na(dataset$Total))\nrace_name_rows <- race_name_rows[1:13]\nrace_names <- c()\nfor (x in dataset[race_name_rows,1]){\n     x <- gsub('[0-9]+', '', x)\n    race_names <- c(race_names,x)\n}\n\nrace_values=c(NA)\nindex<-1\nnum_rows<-0\nfor (x in race_names){\n    if (index>12) {break}\n    num_rows<- race_name_rows[index+1]-race_name_rows[index]\n    for (y in 1:num_rows){\n        race_values <- c(race_values,x)}\n    index <- index + 1\n}\n\ndataset$\"Mean\" <- as.numeric(as.character(dataset$\"Mean\"))\ndataset$\"Median\"  <- as.numeric(as.character(dataset$\"Median\"))\ndataset$\"Error_of_Median\"  <- as.numeric(as.character(dataset$\"Error_of_Median\"))\ndataset$\"Error_of_Mean\"  <- as.numeric(as.character(dataset$\"Error_of_Mean\"))\n\ndataset <- dataset[-c(354:383),]\ndataset$Race <- race_values\ndataset <- dataset[-which(is.na(dataset$Total)),]\ndataset <- dataset %>% select(-\"Total\")\ndataset <- dataset %>% separate(Year, c('Year', 'Year2'))\ndataset <- dataset %>% select(-Year2)\n```\n:::\n\n### Seperating Means and Medians\nFor the data to be tidy  it needs to be separated into each observation and the mean and median would need to repeated for each observation of income level which is extraneous. This data is still useful so it is separated into its own table.\n\n::: {.cell}\n\n```{.r .cell-code}\nmedians_means <- dataset %>% select(\"Year\",\"Race\",\"Mean\",\"Error_of_Mean\",\"Median\",\"Error_of_Median\")\ndataset <- dataset %>% select(-\"Mean\",-\"Error_of_Mean\",-\"Median\",-\"Error_of_Median\")\ndataset <- dataset %>% \n  pivot_longer(\n    cols=cnames[4:12], \n    names_to = \"income_level\", \n    values_to = \"percent\", \n    values_drop_na = TRUE\n  )\ndataset$Number_thousands  <- as.numeric(as.character(dataset$Number_thousands ))\ndataset$percent  <- as.numeric(as.character(dataset$percent))\ndataset$Number_thousands <- dataset$Number_thousands * dataset$percent/100\ndataset <- dataset %>% select(-percent)\ndataset$Number_thousands <- dataset$Number_thousands %>% replace_na(0)\n```\n:::\n\n### Graphing the data\n\n## Univariate Visualizations\n\n::: {.cell}\n\n```{.r .cell-code}\n#options(repr.plot.width = 20, repr.plot.height =20)\nggplot(medians_means, aes(x = Year, y = Mean,ymin = Mean-Error_of_Mean, ymax = Mean+Error_of_Mean, group=Race, color=Race)) + geom_errorbar(width = 0.2) + geom_line() + scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ggtitle(\"Mean Income Levels From (1967-2019)\")\n```\n\n::: {.cell-output-display}\n![](challenge5_AdamMaciaszek_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(medians_means, aes(x = Year, y = Median,ymin = Median-Error_of_Median, ymax = Median+Error_of_Median, group=Race, color=Race)) + geom_errorbar(width = 0.2) + geom_line() + scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ggtitle(\"Median Income Levels From (1967-2019)\")\n```\n\n::: {.cell-output-display}\n![](challenge5_AdamMaciaszek_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n## Bivariate Visualization(s)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nonly_race_income <- dataset %>% select(-Year)\ninvisible(only_race_income %>% group_by(Race,income_level) %>% summarise(across(Number_thousands, sum)))\nonly_race_income$income_level = factor(only_race_income$income_level, levels = rev(cnames[4:12]))\nggplot(only_race_income, aes(fill=Race, y=income_level, x=Number_thousands)) + geom_bar(position=\"dodge\", stat=\"identity\")+ ggtitle(\"Total Number Of Demographic Per Income Bracket From (1967-2019)\")\n```\n\n::: {.cell-output-display}\n![](challenge5_AdamMaciaszek_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n### TOTAL RAILROAD EMPLOYMENT BY STATE AND COUNTY\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset <- data.frame()\nfile_name <- \"_data/StateCounty2012.xls\"\ndataset <- read_excel(file_name, skip = 2)\ndataset <- dataset %>% select(-\"...2\",-\"...4\")\ndataset <- as.data.frame(dataset)\ndataset <- dataset %>% rename(\"state\" = \"STATE\",\"counties\"=\"COUNTY\",\"Total\"=\"TOTAL\")\n```\n:::\n\nThe second set of data I worked with was the 2012 numbers for railroad employment. The lists all of the counties and districts which there are people employed by the railroad.\n\n## Tidying and cleaning\nIn order to graph this data some data needs to be stripped such as the totals in Canada  as well as military bases which cannot be shown in a heat map of america. All of the state totals are aggrogate data and do not need to be included for this data set.\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset <- dataset[-which(is.na(dataset$counties), arr.ind=TRUE),]\ndataset <- dataset[which(dataset$state!='AE'),]\ndataset <- dataset[which(dataset$state!='AP'),]\ndata_states <- dataset %>% group_by(state) %>% summarise(across(\"Total\", sum))\n```\n:::\n\n## Adding Fips Information\nThe usa map package to display county information need to have a specific code known as fips since many Counties have the same name. Using the tigris package I could use the state name and county name to query the fips code and then add that info to the table. Unfortunately 30 of the items in this table were formatted differently or spelled differently from the fips record and I had to add them in manually\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_county <- dataset\nget_fips <- function(X,Y){\n    ding <- lookup_code(state = X, county = Y)\n    lister <- str_split(ding,\"'\")\n    outie <- paste(lister[[1]][[2]],lister[[1]][[4]], sep = \"\")\n}\nfips_val=c()\nfor(i in 1:nrow(dataset)) {\n    fips_val <- c(fips_val,get_fips(dataset[i,1],dataset[i,2]))\n}\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in lookup_code(state = X, county = Y): could not find function \"lookup_code\"\n```\n:::\n\n```{.r .cell-code}\ndata_county$fips <- fips_val\ndata_county_bad <-  data_county[which(data_county$fips==\"\", arr.ind=TRUE),]\ndata_county <- data_county[-which(data_county$fips==\"\", arr.ind=TRUE),]\nfips_val2 <- c(01115,05123,11001,12109,12111,17043,17099,17163,18091,18141,22087,22089,22093,22095,22097,22099,22101,22103,24510,24033,24035,24037,26147,26149,27137,29510,29186,29183,29185,29187,29189,32510,36089,51760,55109)\ndata_county_bad$fips <- fips_val2\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `$<-.data.frame`(`*tmp*`, fips, value = c(1115, 5123, 11001, : replacement has 35 rows, data has 0\n```\n:::\n\n```{.r .cell-code}\ndata_county <- rbind(data_county, data_county_bad)\n```\n:::\n\n### Graphing\n\n## State by state heatmap\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_usmap(regions = \"counties\",data = data_county, values = \"Total\", color = NA) + \n  scale_fill_continuous(low = \"white\", high = \"blue\",name = \"Total\",na.value = 'white', label = scales::comma) + \n  theme(plot.background = element_rect(fill = \"grey\"),panel.background = element_rect(color=NA, fill = \"grey\"),legend.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](challenge5_AdamMaciaszek_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n## County by county heatmap\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_usmap(data = data_states, values = \"Total\") + \n  scale_fill_continuous(low = \"white\", high = \"blue\",name = \"Total\", label = scales::comma) + \n  theme(plot.background = element_rect(fill = \"grey\"),panel.background = element_rect(color=NA, fill = \"grey\"),legend.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](challenge5_AdamMaciaszek_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::",
    "supporting": [
      "challenge5_AdamMaciaszek_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}