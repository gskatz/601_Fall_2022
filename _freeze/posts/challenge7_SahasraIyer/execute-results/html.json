{
  "hash": "a630c7b7cb3545a29929ea8293c1c17b",
  "result": {
    "markdown": "---\ntitle: \"Challenge 7 Instructions\"\nauthor: \"Meredith Rolfe\"\ndescription: \"Visualizing Multiple Dimensions\"\ndate: \"08/24/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_7\n  - hotel_bookings\n  - australian_marriage\n  - air_bnb\n  - eggs\n  - abc_poll\n  - faostat\n  - usa_households\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  Recreate at least two graphs from previous exercises, but introduce at least one additional dimension that you omitted before using ggplot functionality (color, shape, line, facet, etc) The goal is not to create unneeded [chart ink (Tufte)](https://www.edwardtufte.com/tufte/), but to concisely capture variation in additional dimensions that were collapsed in your earlier 2 or 3 dimensional graphs.\n   - Explain why you choose the specific graph type\n5) If you haven't tried in previous weeks, work this week to make your graphs \"publication\" ready with titles, captions, and pretty axis labels and other viewer-friendly features\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code. And anyone not familiar with Edward Tufte should check out his [fantastic books](https://www.edwardtufte.com/tufte/books_vdqi) and [courses on data visualizaton.](https://www.edwardtufte.com/tufte/courses)\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n  - eggs ⭐\n  - abc_poll ⭐⭐\n  - australian_marriage ⭐⭐\n  - hotel_bookings ⭐⭐⭐\n  - air_bnb  ⭐⭐⭐\n  - us_hh ⭐⭐⭐⭐\n  - faostat ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read data into a dataframe\ndata <- read_csv(\"_data/eggs_tidy.csv\")\n\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  month     year large_half_dozen large_dozen extra_large_half_dozen extra_lar…¹\n  <chr>    <dbl>            <dbl>       <dbl>                  <dbl>       <dbl>\n1 January   2004             126         230                    132         230 \n2 February  2004             128.        226.                   134.        230 \n3 March     2004             131         225                    137         230 \n4 April     2004             131         225                    137         234.\n5 May       2004             131         225                    137         236 \n6 June      2004             134.        231.                   137         241 \n# … with abbreviated variable name ¹​extra_large_dozen\n```\n:::\n:::\n\n\n\n### Briefly describe the data\n\nThe data looks to be describing the sales of different egg carton types for each month and year. Every case is uniquely identified by a year and month combination. \n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_names = names(data)\ncol_names <- col_names[!col_names %in% c(\"year\",\"month\")]\ncol_names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"large_half_dozen\"       \"large_dozen\"            \"extra_large_half_dozen\"\n[4] \"extra_large_dozen\"     \n```\n:::\n\n```{.r .cell-code}\n# Group the data by year to get total sales per year\ndata <- data %>%\n     pivot_longer(data, cols=col_names, \n                   names_to = \"carton_type\",\n                   values_to = \"sales\")\n\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  month     year carton_type            sales\n  <chr>    <dbl> <chr>                  <dbl>\n1 January   2004 large_half_dozen        126 \n2 January   2004 large_dozen             230 \n3 January   2004 extra_large_half_dozen  132 \n4 January   2004 extra_large_dozen       230 \n5 February  2004 large_half_dozen        128.\n6 February  2004 large_dozen             226.\n```\n:::\n\n```{.r .cell-code}\ngrouped_data <- data %>%\n  group_by(year) %>%\n  summarise(\n    total_sales = sum(sales)\n  )\n\ngrouped_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n    year total_sales\n   <dbl>       <dbl>\n 1  2004       8805.\n 2  2005       8862 \n 3  2006       8867.\n 4  2007       9018.\n 5  2008      10226 \n 6  2009      11046 \n 7  2010      10968.\n 8  2011      10974.\n 9  2012      10997.\n10  2013      11084.\n```\n:::\n:::\n\nI pivoted the data, so that each case represents the month, year, egg carton type and the corresponding sales of that carton type. This representation would make further analysis and groupings much easier. \n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n::: {.cell}\n\n:::\n\n\n## Visualization with Multiple Dimensions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simple line plot of sales made across the years\nggplot(grouped_data, aes(x=year, y=total_sales)) + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![](challenge7_SahasraIyer_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Group the data by year and carton type, to get total sales\ngrouped_data_by_y <- data %>%\n  group_by(year, carton_type) %>%\n  summarise(\n    total_sales = sum(sales)\n  )\n\ngrouped_data_by_y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 3\n# Groups:   year [10]\n    year carton_type            total_sales\n   <dbl> <chr>                        <dbl>\n 1  2004 extra_large_dozen            2848.\n 2  2004 extra_large_half_dozen       1631.\n 3  2004 large_dozen                  2764.\n 4  2004 large_half_dozen             1563.\n 5  2005 extra_large_dozen            2892 \n 6  2005 extra_large_half_dozen       1626 \n 7  2005 large_dozen                  2802 \n 8  2005 large_half_dozen             1542 \n 9  2006 extra_large_dozen            2897.\n10  2006 extra_large_half_dozen       1626 \n# … with 30 more rows\n```\n:::\n\n```{.r .cell-code}\n# Graph of data grouped by year and carton type, for total sales\nggplot(data=grouped_data_by_y, \n       aes(x=year, y=total_sales, color= carton_type)) +\n  geom_line() + \n  geom_point() + \n  labs(\n    x = \"Year\",\n    y = \"Total Sales\",\n    color = \"Carton Type\",\n    title = \"Total Sales By Carton Type Across Years\"\n  ) + \n  guides(color = guide_legend(title=\"Carton Type\"))\n```\n\n::: {.cell-output-display}\n![](challenge7_SahasraIyer_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Convert year to category type to create a horizontal stacked bar chart\nyear_to_cat <- grouped_data_by_y %>%\n  mutate(year=as.character(year))\n\nggplot(year_to_cat, aes(x = total_sales, y = year)) +\n  geom_bar(\n    aes(color = carton_type, fill = carton_type),\n    stat = \"identity\", position = \"dodge\"\n    ) + \n  labs(\n    x = \"Total Sales\",\n    y = \"Year\",\n    title = \"Total Sales Across Years Stacked By Carton Type\"\n  )\n```\n\n::: {.cell-output-display}\n![](challenge7_SahasraIyer_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n:::\n",
    "supporting": [
      "challenge7_SahasraIyer_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}