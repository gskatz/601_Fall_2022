{
  "hash": "57e0ca976495c2cb707a53f2b8daff53",
  "result": {
    "markdown": "---\ntitle: \"Challenge 7\"\nauthor: \"Owen Tibby\"\ndescription: \"Visualizing Multiple Dimensions\"\ndate: \"11/24/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_7\n  - australian_marriage\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(readr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  Recreate at least two graphs from previous exercises, but introduce at least one additional dimension that you omitted before using ggplot functionality (color, shape, line, facet, etc) The goal is not to create unneeded [chart ink (Tufte)](https://www.edwardtufte.com/tufte/), but to concisely capture variation in additional dimensions that were collapsed in your earlier 2 or 3 dimensional graphs.\n\n-   Explain why you choose the specific graph type\n\n5)  If you haven't tried in previous weeks, work this week to make your graphs \"publication\" ready with titles, captions, and pretty axis labels and other viewer-friendly features\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code. And anyone not familiar with Edward Tufte should check out his [fantastic books](https://www.edwardtufte.com/tufte/books_vdqi) and [courses on data visualizaton.](https://www.edwardtufte.com/tufte/courses)\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   eggs ⭐\n-   abc_poll ⭐⭐\n-   australian_marriage ⭐⭐\n-   hotel_bookings ⭐⭐⭐\n-   air_bnb ⭐⭐⭐\n-   us_hh ⭐⭐⭐⭐\n-   faostat ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\naustralian_marriage_tidy <- read_csv(\"~/Github/601_Fall_2022/posts/_data/australian_marriage_tidy.csv\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: '~/Github/601_Fall_2022/posts/_data/australian_marriage_tidy.csv' does not exist.\n```\n:::\n\n```{.r .cell-code}\ntable2 <- australian_marriage_law_postal_survey_2017_response_final <- read_excel(\"~/Github/601_Fall_2022/posts/_data/australian_marriage_law_postal_survey_2017_-_response_final.xls\", \n    sheet = \"Table 1\", col_names = FALSE, \n    skip = 4)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: `path` does not exist: '~/Github/601_Fall_2022/posts/_data/australian_marriage_law_postal_survey_2017_-_response_final.xls'\n```\n:::\n\n```{.r .cell-code}\ndf <- australian_marriage_tidy\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'australian_marriage_tidy' not found\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nThe Australian marriage data set represents data gathered from a November 2017 postal survey of Australian public opinion on the legality of same-sex marriage. The survey was administered to registered voters across all 150 Federal Electoral Divisions in Australian states/territories . Respondents received one question to which an answer was either yes, no or response not clear.\n\n## Tidy Data (as needed)\n\nAs seen below, the data is tidy and only contains 16 observations of 4 variables (16 x 4).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in object[[i]]: object of type 'closure' is not subsettable\n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Pivoting responses to be independent variables\ndf <- df %>%\n  pivot_wider(names_from = resp, values_from = c(percent,count)) %>% \n  mutate(`Total responses`= (`count_yes` + `count_no`))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"pivot_wider\"): no applicable method for 'pivot_wider' applied to an object of class \"function\"\n```\n:::\n\n```{.r .cell-code}\n#Recoding names of the Australian Territories\ndf$territory <-  recode(df$territory, `New South Wales`= \"NSW\", `Northern Territory(b)` = \"N. Ter(b)\", `Australian Capital Territory(c)`= \"Cap. Ter(c)\", `Western Australia`= \"W. Aus\", `South Australia`= \"S. Aus\", `Victoria`= \"Vict.\", `Queensland`= \"Qnld\", `Tasmania`= \"Tas\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in df$territory: object of type 'closure' is not subsettable\n```\n:::\n\n```{.r .cell-code}\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, df1, df2, ncp, log = FALSE) \n{\n    if (missing(ncp)) \n        .Call(C_df, x, df1, df2, log)\n    else .Call(C_dnf, x, df1, df2, ncp, log)\n}\n<bytecode: 0x000001f0658c97f0>\n<environment: namespace:stats>\n```\n:::\n:::\n\n\n## Visualization with Multiple Dimensions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Respondents to postal survey by province\nggplot(df, aes(x =reorder(territory, -`Total responses`), y = `Total responses`)) +\ngeom_bar(stat = \"identity\", fill= \"dark blue\") +\nlabs(x= \" Austrailian Territory\", y= \"Total Respondents\" )+\nggtitle(\"Graph 1.1: Respondents by Territory\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `ggplot()`:\n! `data` cannot be a function.\nℹ Have you misspelled the `data` argument in `ggplot()`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Respondents Not in Favor of Same-Sex Marriage\nggplot(df, aes(x =reorder(territory, -`percent_no`), y =`count_no`)) +\ngeom_bar(stat = \"identity\", fill= \"dark red\") +\nlabs(x= \" Austrailian Territory\", y= \"Number of Respondents\" )+\nggtitle(\"Graph 1.2: Respondents Not in Favour of Same-Sex Marriage\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `ggplot()`:\n! `data` cannot be a function.\nℹ Have you misspelled the `data` argument in `ggplot()`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Co-relation between Approval percentage and Number of respondents\nggplot(df, aes(x =`percent_no`, y= `Total responses`, colour=territory )) +\ngeom_point() +\ngeom_smooth(color= 'blue',method='lm', formula= y~x)+\nlabs(x= \" Disapproval %\", y= \"Number of Respondents\", colour= \"Territory\" )+\nggtitle(\"Graph 1.3: Total Respondents vs Disapproval %\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `ggplot()`:\n! `data` cannot be a function.\nℹ Have you misspelled the `data` argument in `ggplot()`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n  #Recoding names of the Australian Territories\n\n\naustralian_marriage_tidy$territory <-  recode(australian_marriage_tidy$territory, `New South Wales`= \"NSW\", `Northern Territory(b)` = \"N. Ter\", `Australian Capital Territory(c)`= \"Cap. Ter\", `Western Australia`= \"W. Aus\", `South Australia`= \"S. Aus\", `Victoria`= \"Vict.\", `Queensland`= \"Qnld\", `Tasmania`= \"Tas\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in recode(australian_marriage_tidy$territory, `New South Wales` = \"NSW\", : object 'australian_marriage_tidy' not found\n```\n:::\n\n```{.r .cell-code}\n#Approval/ Disapproval of same-sex marriage by Australian Territory\naustralian_marriage_tidy %>% \n  ggplot() + aes(x=territory, y= percent, fill= resp)+\n  geom_bar(stat=\"identity\", color= \"blue\")+\n  facet_wrap(vars(resp))+\n  ggtitle(\"Graph 1.4: Approval % by Australian Territory\")+\n  labs(y= \"Percentage\", x= \"Australian Territory\", fill= \"Response\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(.): object 'australian_marriage_tidy' not found\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}