---
title: "Challenge 3 Instructions"
author: "Meredith Rolfe"
desription: "Tidy Data: Pivoting"
date: "08/17/2022"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - challenge_3
  - animal_weights
  - eggs
  - australian_marriage
  - usa_households
  - sce_labor
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readxl)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Today's challenge is to:

1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)
2.  identify what needs to be done to tidy the current data
3.  anticipate the shape of pivoted data
4.  pivot the data into tidy format using `pivot_longer`

## Read in data

Read in one (or more) of the following datasets, using the correct R package and command.

-   animal_weights.csv ‚≠ê
-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê
-   australian_marriage\*.xls ‚≠ê‚≠ê‚≠ê
-   USA Households\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê
-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü

```{r}
# Reading animal_weight.csv into a dataframe
animal_wt = read_csv("_data/animal_weight.csv")


# Displaying the top 5 rows in the dataframe
head(animal_wt, 5)


# Checking for any NaN values in columns
apply(animal_wt, 2, anyNA)

# Column names of the dataframe
colnames(animal_wt)
```

### Briefly describe the data

Describe the data, and be sure to comment on why you are planning to pivot it to make it "tidy"

The data looks to be sourced to collect data for different breeds of farm-bred animals, both animals and poultry (cattle, chicken, buffaloes, etc.) and their corresponding weights. It also contains the area that these animals are native to. Pivoting this data will tidy it up, as the only differentiator for all the rows is the weight value, which can be converted to a single column. 

## Anticipate the End Result

The first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.

One easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.

Suppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!

### Example: find current and future data dimensions

Lets see if this works with a simple example.

```{r}
#| tbl-cap: Example

df<-tibble(country = rep(c("Mexico", "USA", "France"),2),
           year = rep(c(1980,1990), 3), 
           trade = rep(c("NAFTA", "NAFTA", "EU"),2),
           outgoing = rnorm(6, mean=1000, sd=500),
           incoming = rlogis(6, location=1000, 
                             scale = 400))
df

#existing rows/cases
nrow(df)

#existing columns/cases
ncol(df)

#expected rows/cases
nrow(df) * (ncol(df)-3)

# expected columns 
3 + 2
```

Or simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.

### Challenge: Describe the final dimensions

Document your work here.

```{r}
head(animal_wt, 9)

# Existing rows
nrow(animal_wt)

# Existing cols
ncol(animal_wt)

```

Any additional comments?

## Pivot the Data

Now we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a "sanity" check.

### Example

```{r}
#| tbl-cap: Pivoted Example

df<-pivot_longer(df, col = c(outgoing, incoming),
                 names_to="trade_direction",
                 values_to = "trade_value")
df
```

Yes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!

### Challenge: Pivot the Chosen Data

Document your work here. What will a new "case" be once you have pivoted the data? How does it meet requirements for tidy data?

Every row is uniquely identified by 1 variable i.e. the country column which represents the area that the particular animal belongs to.
Thus we have k-1 = 17-1 = 16 variables that are being pivoted. 
16 columns consist of the animal weights of animals of different breeds belonging to a particular sub-region, which will all be pivoted and transformed to a single weight column, which will make the data neat.
The new dataframe will be expected to consist of n * (k-1) rows = 9 * (17 - 1) rows = 144 rows



```{r}
# Fetching column names of the animal_wt dataframe
col_names <- names(animal_wt)

# Printing column names
col_names

# Pivoting the dataframe
pivoted_animal_wt <- pivot_longer(animal_wt, cols=col_names[-1], 
                          names_to = "animal_breed",
                          values_to = "weight")
pivoted_animal_wt


dim(pivoted_animal_wt)
```

Any additional comments?

The pivoted dataframe looks much tidier with a more descriptive view of the animal weight of each animal belonging to a sub-region.

Reading and analysing the file eggs_tidy.csv.
Every row is uniquely identified by 2 variables i.e. the month and year columns which represent the month and year for the cost of different egg brackets.
Thus we have k-2 = 6-2 = 4 variables that are being pivoted. 
4 columns consist of the different egg bracket costs for the particular moth and year, which will all be pivoted and transformed to a single cost column, which will make the data neat.
The new dataframe will be expected to consist of n * (k-1) rows = 120 * (6 - 2) rows = 480 rows

```{r}
# Read the csv file
egg_data <- read_csv("_data/eggs_tidy.csv", show_col_types = FALSE)

# Displaying top 5 rows in the dataframe
tail(egg_data, 5)

# Dimensions of the dataframe
dim(egg_data)

# Get column names of the dataframe
col_names <- names(egg_data)

# Exclude month and year columns from pivoting, as they uniquely identify each row case
col_names <- col_names[!col_names %in% c("month","year")]

# Pivoting longer for tidier dataframe
pivoted_egg_data <- pivot_longer(egg_data, cols=col_names, 
                          names_to = "egg_qty",
                          values_to = "cost")

pivoted_egg_data

# Dimensions of pivoted dataframe
dim(pivoted_egg_data)
```
As above, the pivoted dataframe looks much tidier with a more descriptive view of the egg quantity (carton type) and their corresponding costs.

