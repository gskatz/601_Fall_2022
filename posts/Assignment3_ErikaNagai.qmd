---
title: "Assignment3 Erika Nagai"
author: "Erika Nagai"
description: "Female representation in movie stories"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    code-copy: true
    code-tools: true
categories:
  - hw2
  - hw3
  - movie
  - gender
  - bechdel test
  - female representation
  - Erika Nagai
editor: 
  markdown: 
    wrap: 72
---

## Introduction

Even though half of moviegoers in the United States is women, their
story is not represented as much as that of men. Only 35% of the main
characters in the best movies of 2021 were female, and male characters
outnumbered female characters in 85% of the films. (Women and Hollywood,
2022) Also lacking are women behind the scenes in the film business. In
2021, just 12% of the top 100 films are directed by women.(Lauzen, n.d.)

In this project, I focused on analyzing female representation in the
movie stories rather than in their production. I used the data from
three major movie databases, The Movie Database (TMDb), MovieLens, Open
Movie Database (OMDb) and Bechdel Test, one of the most common criterion
to measure female presentation.

I would like to answer the following questions in this analysis:

1.  **Is female representation in movie stories improving over time?**

2.  **What genres are doing better than others in terms of female
    representation?**

3.  **Are movies with good female representation more popular?**

4.  **Do movies with good female representation more money?**

This analysis intends to document all the data cleaning process, which
is quite long. If you are curious only about the analysis results,
please skip to [Data Analysis and Visualization] part.

```{r}
# install libraries

library(tidyverse)
library(ggplot2)
library(stringr)
library(tidyr)
library(dplyr)
library(summarytools)
library(plyr)
library(lubridate)
library(ggridges)
```

## Read in data

For this analysis, I used the following different datasets.

### **(1) "The Movie Dataset" from Kaggle** :

This dataset was obtained from Kaggle "The Movie
Dataset"(<https://www.kaggle.com/datasets/rounakbanik/the-movies-dataset?resource=download&select=movies_metadata.csv>).

```{r}

#(1) movies_metadata.csv obtained from Kaggle
movie = read_csv("_data/movies_metadata.csv")
```

### **(2) Bechdel test** API:

I generated the data by using bechdel test API
<https://bechdeltest.com/api/v1/doc>.

```{r}

#(2) bechdel test obtained by using bechdel API

library(rjson)
library(jsonlite)

#json_file <- "http://bechdeltest.com/api/v1/getAllMovies"
#bechdel <- read_json(path = json_file, simplifyVector = TRUE)
#bechdel$titleId <- paste("tt",bechdel$imdbid, sep = "")

#write.csv(bechdel, file = "_data/bechdel.csv")
bechdel <- read_csv("_data/bechdel.csv")

```

### **(3) Open Movie Database (OMDb)**:

This dataset was generated by using Open Movie Database (OMDb) API
<https://www.omdbapi.com/>. OMDb provides the detail information such as
director, writer, nominated award, the number/score of reviews on imdb
etc... if you provide the name or imdb id of movies. I decided to use
this database because it gives me the data related to movies popularity
and financial success of the films, which "The Movie Dataset" doesn't
include.

OMDb doesn't give you a list of all movies registered on it. Instead,
you need to provide the exact movie title or the imdb id to get the list
of information. Thus, I will use this API once I have the data that join
movies_metadata.csv and bechdel test. (Please refer to "[Read in data /
Describe data (OMDb)](#read-in-data-describe-data-omdb)" for this
process.)

## Describe data

### (1) TMDb

This data was originally created from The Movie Database
(<https://www.themoviedb.org/>) and MovieLens
(<https://movielens.org/>).This movie dataset was generated by
Movielens, a (non-profit) movie review website
(<https://movielens.org/>), and was obtained from the following Kaggle
link.
(<https://www.kaggle.com/datasets/rounakbanik/the-movies-dataset?resource=download&select=movies_metadata.csv>)

The movie dataset contains 45466 movies with a released date between
December 9th 1874 and December 16th 2020.

The data includes the general information of movies, such as genres,
revenue, runtime, languages, status (released/in production etc...).

```{r}
print(summarytools::dfSummary(movie),
      varnumbers = FALSE,
      plain.ascii  = FALSE,
      style        = "grid",
      graph.magnif = 0.80,
      valid.col    = FALSE,
      method = 'render',
      table.classes = 'table-condensed')
```

### (2) Bechdel test

This data (`bechdel`) dataset documents the Bechdel test rating of 9630
movies released between 1874 and 2022.

According to "Merriam-Webster", Bechdel test is "*a set of criteria used
as a test to evaluate a work of fiction (such as a film) on the basis of
its inclusion and representation of female characters*"
(<https://www.merriam-webster.com/dictionary/Bechdel%20Test>)

A movie passes Bechdel test when **it has at least two female featured
characters that talk each other about other than a man (men)**.

In `bechdel`, Bechdel test rating is registered in a following manner.

0 \~ No two female characters

1 \~ Two female characters but don't talk each other

2 \~ Two female characters talk each other about a man (men)

3 \~ Passes bechdel test: Two female characters talk each other about
other than a man (men)

Apart from Bechdel ratings, this dataset (`bechdel`) contains the
released year, title of movies, and id. id that starts with "tt"
followed by 7 digits is imdb id and can work as a foreign key when
joining this data with `movie` dataset.

```{r}
print(summarytools::dfSummary(bechdel),
      varnumbers = FALSE,
      plain.ascii  = FALSE,
      style        = "grid",
      graph.magnif = 0.80,
      valid.col    = FALSE,
      method = 'render',
      table.classes = 'table-condensed')
```

## Tidy data

### (1) TMDb data

### **Checking missing values**

First of all, I took a look at missing values (NA values) in the data.

```{r}
movie %>% select(everything()) %>%
  summarise_all(funs(sum(is.na(.)))) %>%
  t()
```

### **Deleting unnecessary columns**

I deleted several columns, which seem to irrelevant for this analysis or
have too many missing values.\
- `adult`: This information doesn't add any significant meaning as
almost all of observations have FALSE value for this column\
- `homepage`: URL of homepage. Unnecessary for this analysis\
- `belong_to_collection`: Has 40000+ missing values - poster_path\
- `video`: This information doesn't add any significant meaning as
almost all of observations have FALSE value for this column

\- `popularity`: This information may be interesting, however, it is not
clear how this popularity is measured or where it was generated.
Therefore, I decided to use popularity data from OMDb.

\- `vote_average`: Same as `popularity`

\-`vote_count`: Same as `popularity`

Then, I changed the order of the columns. Each row represents a movie so
the movie title should be the first column.

```{r}
movie <- movie %>% select(-c("adult", "homepage", "belongs_to_collection", "poster_path", "video", "popularity", "vote_average", "vote_count"))

col_order <- c("title", "original_title", "tagline", "imdb_id", "id", "overview", "production_companies", "production_countries", "status", "release_date", "runtime", "revenue", "budget", "original_language", "spoken_languages", "genres")
movie <- movie[, col_order]

colnames(movie)[5] <- "movielens_id"

```

### **Cleaning data in JSON nested list format**

The values in some certain columns such as "genres",
"production_companies", "production_countries","spoken_languages" are in
a JSON list format for example:

> " \[{'id': XXXX, 'content(name/genre/title)': XXX}, {'id': XXXX,
> 'content(name/genre/title): XXX}\] "

```{r}
movie %>% select(c("genres", "production_companies", "production_countries", "spoken_languages"))

# These columns include [] {} and ' in their values so I made a function remove_simbols that removes these unnecessary symbols.
remove_symbols <- function(x) {
  removed_x <- str_remove_all(x, "\\{|\\}|\\[|\\}|\\]|'|,|id|name|:| ")
  return(removed_x)
}
```

#### (1). Tidying `Genres`

Each movie contains information on one or more (up to 8) genres in a
single column. To organize the information, the multiple genres
contained in `genre` are split by "\]," so that each genre is contained
in eight new columns, genre1-genre8. Then, I removed unnecessary symbols
such as ,.

```{r}

# Separating the `genre` by "},"
movie <- movie %>% 
  separate(genres, c("genre1", "genre2", "genre3", "genre4", "genre5", "genre6", "genre7", "genre8"), "\\},", remove = FALSE)

# Remove unnecessary symbols from each columns

movie$genre1 <- remove_symbols(movie$genre1)
movie$genre2 <- remove_symbols(movie$genre2)
movie$genre3 <- remove_symbols(movie$genre3)
movie$genre4 <- remove_symbols(movie$genre4)
movie$genre5 <- remove_symbols(movie$genre5)
movie$genre6 <- remove_symbols(movie$genre6)
movie$genre7 <- remove_symbols(movie$genre7)
movie$genre8 <- remove_symbols(movie$genre8)

movie %>% 
  select(matches("[1-9]"))

```

I managed to separate the genre information above. Now all values in
genre1-genre8 has a value in the format of "number name of genre"
(example: 35Comedy)

However, there are 2,445 observations whose genre value doesn't fit the
above format. Most of them don't have any genre assigned so their
`genre1` values are empty or blank, which means they don't have any
genre assigned to them.

```{r}
movie %>% filter(!str_detect(genre1, "^[0-9]")) %>% select(starts_with("genre"))
```

However, looking at them closely, there are three observations whose
`genre` value that is NOT blank but have strange strings.

The values in these observations such as "Carousel Production" and
"Aniplex" don't look like a name of genres but that of production
studios. Also their `original_title` values don't look like a title of
movies but information of languages. It seems like these observations
were not correctly read in because their values in other columns look
weird.

Since these observations are not reliable, I decided to delete them from
this dataset.

```{r}
movie %>% filter(!str_detect(genre1, "^[0-9]") &!str_detect(genre1, "^[ \t\n]*$")) %>% #^[ \t\n]*$ is a regular expression for blank.
  select(c(original_title, title, production_countries, genre1:genre8))

movie_clean1 <- movie %>% filter(!str_detect(genre1, "^[A-Z]"))
```

Genre information is more organized but is still not easy to be
analyzed. Thus, I decided to make dummy variables of each genre.

For example, if movie A is categorized as "comedy" and "adventure", the
line of movie A should have 1 in "comedy" column and "adventure"
respectively and 0 in columns of other genres.

```{r}

#https://community.rstudio.com/t/creating-dummy-columns-based-on-multiple-columns/58145/3
movie_clean1 <- movie_clean1 %>% 
  pivot_longer(cols = matches("genre[1-9]")) %>%
  add_column(count = 1) %>%
  arrange(value) %>%
  filter(str_detect(value, "^[0-9]")) %>%
  mutate(value1 = str_replace_all(value, "[0-9]+", "")) %>%
  select(-c(value, name)) %>%
  arrange(title) %>%
  pivot_wider(
    names_from = value1, 
    values_from = count, 
    values_fill = list(count=0),
    values_fn = list(count = mean)) %>%
  arrange(title)

# I also deleted genre "TVMovie" and "Foreign" because they're more format or origin country information rather than genre.
movie_clean1 <- movie_clean1 %>% select(-c("TVMovie","Foreign"))

```

#### (2). Tyding `Production_countries`

The values in `production_countries` are written in the following way.
\>\[{'iso_3166_1': 'abbreviation of country','name': 'full country
name'}\]

When there are more than one country in the value, I took the first
country in account for this analysis.

```{r}
movie_clean1$production_countries <- remove_symbols(movie_clean1$production_countries)
movie_clean1$production_countries <- str_extract(movie_clean1$production_countries,"(?<=_1)\\w{2}")

movie_clean1 %>% select(production_countries)
```

#### (3). Tyding `production_companies` & `spoken_languages`

The values in both of `production_companies` and `spoken_languages` are
in the following format.

> \> \[{'name': 'XXXX', 'id': ---}\] \> \[{'iso_639_1':'XXXX',
> 'name':"----}\]

I only need the information that is written as XXXX in this format.

```{r}

movie_clean1$production_companies <-str_remove_all(movie_clean1$production_companies, "'id': [0-9]*|'name':|\\[|\\]|'|\\{|,") %>%
  str_replace_all("\\},", ",") %>%
  str_replace_all(" \\} ", ",")%>%
  str_remove(" \\}")

movie_clean1$spoken_languages <-str_remove_all(movie_clean1$spoken_languages, "'iso_639_1':|'name': '\\w+'|\\[|\\]|'|\\{|,") %>%
  str_replace_all(" \\} ", ",") %>%
  str_remove_all(" \\}")

movie_clean1 %>% select(production_companies, spoken_languages)


```

### Adding a new column

A new column `years` was created to group years by decade.

```{r}
movie_clean1 <- movie_clean1 %>% 
  mutate(
    years = case_when(
    lubridate::year(release_date) < 1920 ~ "Before 1920",
    lubridate::year(release_date) >= 1920 & lubridate::year(release_date) < 1930 ~ "1920s",
    lubridate::year(release_date) >= 1930 & lubridate::year(release_date) < 1940 ~ "1930s",
    lubridate::year(release_date) >= 1940 & lubridate::year(release_date) < 1950 ~ "1940s",
    lubridate::year(release_date) >= 1950 & lubridate::year(release_date) < 1960 ~ "1950s",
    lubridate::year(release_date) >= 1960 & lubridate::year(release_date) < 1970 ~ "1960s",
    lubridate::year(release_date) >= 1970 & lubridate::year(release_date) < 1980 ~ "1970s",
    lubridate::year(release_date) >= 1980 & lubridate::year(release_date) < 1990 ~ "1990s",
    lubridate::year(release_date) >= 1990 & lubridate::year(release_date) < 2000 ~ "1990s",
    lubridate::year(release_date) >= 2000 & lubridate::year(release_date) < 2010 ~ "2000s",
    TRUE ~ "2010s"
  )
  )
```

Now, the dataset is cleaner. Look at the summary again.

```{r}
print(summarytools::dfSummary(movie_clean1),
      varnumbers = FALSE,
      plain.ascii  = FALSE,
      style        = "grid",
      graph.magnif = 0.80,
      valid.col    = FALSE,
      method = 'render',
      table.classes = 'table-condensed')

```

### (2) Bechdel data

#### Removing and Mutating Columns

`imdbid` and `titleId` are duplicated because titleId is "tt+imdbid".
`movie_clean1` dataframe has IDs in the same format (starting with tt)
as `titleId` of `bechdel` dataframe so I deleted `imdbid` column.

Also, `year` and `title` information is available in movie dataframe,
thus I deleted them.

I made a new column `bechdel_pass` where 1 means the movie passes
bechdel test and 0 means otherwise.

```{r}
#

bechdel <- bechdel %>% select(-c("imdbid","...1","title"))
colnames(bechdel) <- c("year", "bechdel_rating", "id", "titleid")

summary(bechdel)
# Changing the column order
col_order <- c("id", "titleid","year", "bechdel_rating")
bechdel <- bechdel[, col_order]

# Mutate a new column bechdel_pass
bechdel <- bechdel %>% mutate(
  bechdel_pass = case_when(
    bechdel_rating == 3 ~ 1,
    TRUE ~ 0
  )
)

# Change data types of columns
bechdel$bechdel_rating <- factor(bechdel$bechdel_rating, levels = c("0", "1", "2", "3"))
bechdel$bechdel_pass <- factor(bechdel$bechdel_pass, levels = c("0", "1"))
```

### Sense Check

This data look quite clean, however, I looked at the summary for sense
check, then I realized that the minimum number of year is 1010, which is
weird. "Inazuma Eleven The Movie" was released in 2010, but it seems to
have been mistakenly recorded as 1010. So I manually corrected the data.

```{r}
summary(bechdel)

bechdel %>% 
  filter(year < 1800)

bechdel$year[bechdel$year == 1010] <- 2010
```

## Join datasets

We have two dataframes `movie` and `bechdel` , which have imdb id as a
foreign key.

```{r}
movie_bechdel_join <- inner_join(movie_clean1, bechdel, 
                                 by=c("imdb_id" = "titleid"),
                                 copy = TRUE)

glimpse(movie_bechdel_join)
```

## Read in data / Describe data (OMDb) {#read-in-data-describe-data-omdb}

As we have a joined data, I read in the movie popularity data from OMDb
using OMDb API.

`omdb_df` has 5 columns

-   imdbID: can be used as a foreign key when joining with other
    dataframes

-   Director: Director's name

-   Metascore: Review scores from 0 to 100 on the metacritic website
    (<https://www.metacritic.com/movie>). They are weighted averages.
    and reviews by certain reviewers are given more weight, however the
    detail is not revealed.

-   imdbRating: Review scores from 0 to 10 on IMDb website
    (<https://www.imdb.com/>). They are weighted averages.

-   imdbVotes: Number of votes on IMDb website.

```{r}

# Generating OMDb dataframe
# imdb_id_list <- c()
# 
# for (i in c(1:length(movie_bechdel_join$imdb_id))) {
#   imdb_id_list[[i]] <- movie_bechdel_join$imdb_id[i]
# }
# 
# omdb_list <- lapply(imdb_id_list, function(movie_id) {
#   actor_vector <- find_by_id(movie_id)
#   actor_vector
# })
# 
# omdb_df <- tibble(place = omdb_list) %>%
#   unnest_wider(place) %>%
#   select(c("imdbID", "Director", "Metascore", "imdbRating", "imdbVotes", "BoxOffice")) %>% unnest() %>% distinct()

#write.csv(omdb_df, "_data/omdb.csv")
omdb_df <- read_csv("_data/omdb.csv")
omdb_df$Metascore <- as.numeric(omdb_df$Metascore)
omdb_df$BoxOffice <- omdb_df$BoxOffice %>%
  str_replace_all(",", "") %>% 
  str_extract("[0-9]*(?=$)") %>% 
  as.numeric()

omdb_df <- omdb_df %>% select(-...1)
glimpse(omdb_df)
```

Now I have the data from OMDb as `omdb_df`. Let's join
`movie_bechdel_join` and `omdb_df.`

```{r}
data <- inner_join(movie_bechdel_join, omdb_df, 
                                 by=c("imdb_id" = "imdbID"),
                                 copy = TRUE)

```

## Data Analysis and Visualization

### Is female representation in movie stories improving over time?

To find out the answer for this questions, I looked at the result of the
Bechdel test.

The number of movies that pass the Bechdel test increases over time,
especially after around 1980 as the total number of released movies
increased.

```{r}


movie_bechdel_join %>%
  filter(lubridate::year(release_date) > 1920) %>%
  group_by(year = lubridate::year(release_date), bechdel_rating) %>%
  dplyr::summarize(n_total = n()) %>%
  ggplot(aes(x=year, y= n_total, fill = bechdel_rating)) + geom_area(stat = "identity") +
  scale_fill_manual(values = c("gray0", "gray40", "gray80", "orange"),
                    labels=c("No 2 female characters", "2 female characters", "That talk each other", "Other than a man (Passes Bechdel Test)")) +
  labs(x= "year", y = "Total number of movies", title = "The number of movies by Bechdel test ratings")+
  scale_x_continuous(n.breaks=14) +
  theme(legend.position="bottom") +
  guides(fill = guide_legend(nrow = 2))
  

```

**However, the total number of released movies is increasing as well. Is
the percentage of films that pass the Bechdel test increasing?**

In 1920's, which is 100 years ago, less than 20% of films passed Bechdel
test. There was a big increase in percentage of Bechdel test passing
movies in 1930's. However, the percentage of films passing Bechdel test
was stagnant a bit lower than 50% from 1930's to 1950's. Somehow, from
1950 to 1970, the representation of women in film went backwards, with
less than 45% of films meeting the requirements of the Bechdel test;
from the 1970s to the present, the percentage of films that pass the
Bechdel test has continued to increase, reaching approximately 70% now.
Although the representation of women seems to have improved since 1970,
it has not improved dramatically compared to the 1930s and 1940s.

```{r}

data %>%
  filter(lubridate::year(release_date) > 1920) %>%
  group_by(years, bechdel_rating) %>%
  dplyr::summarize(n_total = n()) %>%
  ggplot(aes(x=years, y= n_total, fill = bechdel_rating)) + geom_bar(stat = "identity", position="fill") +
  scale_fill_manual(values = c("gray0", "gray40", "gray80", "orange"),
                    labels=c("0.No two female characters", "1.Two female characters", "2.That talk each other", "3.Other than a man (Passes Bechdel Test)")) +
  labs(x="year", y="percentage", title = "% of movies that pass/don't pass Bechdel Test") +
  scale_y_continuous(n.breaks=10) +
  theme(legend.position="bottom") +
  guides(fill = guide_legend(ncol = 2))
```

If we look at the number of each year, we can see that some years in
1930's and 1940's did as good as in 2010s. For example, 1943 - 1944 had
a quite high percentage of Bechdel Test passing rate.

```{r}
data %>%
  filter(lubridate::year(release_date) > 1920) %>%
  group_by(year = lubridate::year(release_date), bechdel_rating) %>%
  dplyr::summarize(n_total = n()) %>%
  ggplot(aes(x=year, y= n_total, fill = bechdel_rating)) + geom_area(stat = "identity", position = "fill") +
  scale_fill_manual(values = c("gray0", "gray40", "gray80", "orange"),
                    labels=c("No 2 female characters", "2 female characters", "That talk each other", "Other than a man (Passes Bechdel Test)")) +
  labs(x= "year", y = "Total number of movies", title = "The number of movies by Bechdel test ratings")+
  scale_x_continuous(n.breaks=14) +
  theme(legend.position="bottom") +
  guides(fill = guide_legend(nrow = 2))
```

Perhaps the percentage of films that pass the Bechdel test has not
changed too dramatically compared to 70 years ago. However, **a
breakdown of the Bechdel test criteria for films that do not pass the
Bechdel Test shows a different trend compared to 70 years ago**.

Currently, most of not-bechdel-passing films fail to Bechdel test
because there are more than one female character but they don't talk
each other. There are few movies (still corresponding nearly 10% of
total movies released every year) that don't have two female characters.

It has not been always the case. In 1920s, quite many movies didn't even
have two featured female characters.

```{r}
data %>%
  filter(lubridate::year(release_date) > 1920 & bechdel_pass=="0") %>%
  group_by(years, bechdel_rating) %>%
  dplyr::summarize(n_total = n()) %>%
  ggplot(aes(x=years, y= n_total, fill = bechdel_rating)) + geom_bar(stat = "identity", position="fill") +
  scale_fill_manual(values = c("gray0", "gray40", "gray80", "orange"),
                    labels=c("0.No two female characters", "1.Two female characters", "2.That talk each other about men", "3.Other than a man (Passes Bechdel Test)")) +
  labs(x="year", y="percentage", title = "% of movies that do NOT pass Bechdel test by Bechdel test criteria") +
  scale_y_continuous(n.breaks=10) +
  theme(legend.position="bottom") +
  guides(fill = guide_legend(nrow = 2))
```

### **What category represents women better?**

I focused on 6514 movies released between 1970 and 2022 because there is
a small number of movies released before 1970 (25 or less movies a year)
and it's better to focus on the priod where more movies were released to
observe the trend.

The degree to which women are portrayed in a film's story varies widely
from genre to genre.

For example, many movies in Comedy, Animation, Drama, Family, Fantasy,
Romance, and Music pass the Bechdel test, while Action, Adventure,
Crime, History, War, and Western The percentage of films that pass the
Bechdel test is about 50% or less.

```{r}

viz_by_genre <- data %>%
  pivot_longer(cols = c(War:Music),names_to = "genre_name", values_drop_na = TRUE) %>%
  filter(value == 1) 

viz_by_genre %>%
  filter(lubridate::year(release_date) > 1970) %>%
  group_by(year = lubridate::year(release_date), bechdel_rating, genre_name) %>%
  dplyr::summarize(n_total = n()) %>%
  ggplot(aes(x=year, y= n_total, fill = bechdel_rating)) + 
  geom_bar(stat = "identity", position = "fill") +
  facet_wrap(~genre_name, ncol = 3)+
  scale_fill_manual(values = c("gray0", "gray40", "gray80", "orange"),
                    labels=c("No two female characters", "Two female characters", "That talk each other", "Other than a man (Passes Bechdel Test)")) +
  labs(x = "year", y = "proportion", title = "Proportion of movies that pass / don't pass Bechdel test by categories")+
  scale_x_continuous(n.breaks=7) +
  theme(legend.position="bottom") +
  guides(fill = guide_legend(nrow = 2))
  

```

```{r}
viz_by_genre %>%
  filter(lubridate::year(release_date)>1970) %>%
  group_by(bechdel_rating, genre_name) %>%
  dplyr::summarize(number = n()) %>%
  ggplot(aes(x=genre_name, y=number, fill=as.character(bechdel_rating))) +
  geom_bar(stat="identity", position = "fill") +
  scale_fill_manual(values = c("gray0", "gray40", "gray80", "orange"),
                    labels=c("No two female characters", "Two female characters", "That talk each other", "Other than a man (Passes Bechdel Test)")) +
  coord_flip() +
  labs(x="Genre", y="%")

```

### **Why do movies do NOT pass Bechdel test?**

```{r}

viz_by_genre %>%
  filter(lubridate::year(release_date)>1970 & bechdel_pass == "0") %>%
  group_by(bechdel_rating, genre_name) %>%
  dplyr::summarize(number = n()) %>%
  ggplot(aes(x=genre_name, y=number, fill=as.character(bechdel_rating))) +
  geom_bar(stat="identity", position = "fill") +
  scale_fill_manual(values = c("gray0", "gray40", "gray80", "orange"),
                    labels=c("No two female characters", "Two female characters", "That talk each other", "Other than a man (Passes Bechdel Test)")) +
  coord_flip()+
  labs(x="Genre", y="%")
```

### **Do movies with good female representation succeed in gaining more popularity on online review site?**

I compared **Metascore** and **IMDb** ratings of the films that pass and
don't pass Bechdel test.

The movies that don't pass Bechdel test seem to score higher on
**Metascore**, however the difference is quite small, and there seems to
be no relationship between whether a film passes the bechdel test and
its reputation (Metascore).

```{r}
data %>%
  filter(lubridate::year(release_date) > 1970) %>%
  ggplot(aes(x=bechdel_pass, y=Metascore)) + 
  geom_boxplot() +
  scale_x_discrete(labels=c("0: Don't pass Bechel", "1: Pass Bechdel")) +
  labs(x="Bechdel Test")
```

T-test shows that there is no statistically significant difference in
Metascores of the movies that pass and that don't pass Bechdel test.

```{r}
ttest_pass <- data %>% 
  filter(bechdel_pass == "1" & lubridate::year(release_date) > 1970) %>%
  select(c("bechdel_pass", "imdbRating", "imdbVotes", "Metascore", "BoxOffice"))

ttest_not_pass <- data %>%
  filter(bechdel_pass == "0" & lubridate::year(release_date) > 1970) %>%
  select(c("bechdel_pass", "imdbRating", "imdbVotes", "Metascore", "BoxOffice"))

t.test(ttest_pass$Metascore, ttest_not_pass$Metascore)
```

Then, I compared the IMDb scores of the movies that pass and don't pass
Bechdel test. Those don't pass Bechdel test seem to score a bit higher.

```{r}
data %>%
  filter(lubridate::year(release_date) > 1970) %>%
  ggplot(aes(x=bechdel_pass, y=imdbRating)) + 
  geom_boxplot() +
  scale_x_discrete(labels=c("0: Don't pass Bechel", "1: Pass Bechdel")) +
  labs(x="Bechdel Test", y="IMDb Rating")
```

T-test shows that the movies that do not meet Bechdel test criteria
score statistically higher than those that do.

```{r}

t.test(ttest_pass$imdbRating, ttest_not_pass$imdbRating)
```

### **Do movies with good female representation succeed in making more money?**

```{r}
data %>%
  filter(lubridate::year(release_date) > 1970) %>%
  ggplot(aes(x=as.character(bechdel_pass), y=BoxOffice)) + geom_boxplot() 

```

```{r}
t.test(ttest_pass$BoxOffice, ttest_not_pass$BoxOffice)
```

## Conclusion & Discussion

**% of the movies that pass Bechdel test:**

Compared to 100 years ago, the rate of movies that pass Bechdel test
significantly increased, however,

## Contact

The dataset that I used for this analysis can be found on my GitHub
(<https://github.com/Enagai-nagai/601_Fall_2022/tree/template/posts/_data>).

I'm interested in analyzing and visualizing data related to
entertainment industry, behavior on digital platforms, and gender
issues,

If you have any comments or questions, please contact me through Email.

-   enagai ★ umass.edu (please replace ★ with \@)

-   nagainagai.e ★ gmail.com (please replace ★ with \@)

## References

*Study: Women made up 34% of speaking roles in 2021's top films,
majority of those characters were white*. Women and Hollywood. (2022,
March 15). Retrieved December 13, 2022, from
https://womenandhollywood.com/study-women-made-up-34-of-speaking-roles-in-2021s-top-films-majority-of-those-characters-were-white/#:\~:text=In%202021's%20top%20films%2C%20females,and%2037%20percent%20in%202019.
