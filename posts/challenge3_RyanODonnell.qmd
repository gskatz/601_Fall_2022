---
title: "Challenge 3 Solution"
author: "Ryan O'Donnell"
desription: "Tidy Data: Pivoting"
date: "08/17/2022"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - challenge_3
  - eggs
  - ryan_odonnell
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readxl)
library(summarytools)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Today's challenge is to:

1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)
2.  identify what needs to be done to tidy the current data
3.  anticipate the shape of pivoted data
4.  pivot the data into tidy format using `pivot_longer`

## Read in data

Read in one (or more) of the following datasets, using the correct R package and command.

-   animal_weights.csv ‚≠ê
-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê
-   australian_marriage\*.xls ‚≠ê‚≠ê‚≠ê
-   USA Households\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê
-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü

```{r}
egg <- read_xls("_data/organiceggpoultry.xls", 
                 skip = 5,
                 col_names = c("month_year", "egg-xl_12", "egg-xl_6", "egg-lg_12", "egg-lg_6", "delete", "chx-whole", "chx-bnl_breast",  "chx-bone_breast", "chx-legs", "chx-thighs"),
                 na = c("too few")) 

eggs <- egg %>% 
  mutate(delete = NULL) %>%
  separate(col = month_year,
           into = c("month", "year")) %>%
  fill(year)

summary(eggs)
head(eggs)
```

### Briefly describe the data

*Describe the data, and be sure to comment on why you are planning to pivot it to make it "tidy"*

**organicpoultry.xls** is an Excel file that contains 3 sheets. The first is a compilation of the data collected on the second and third sheet: organic egg prices 2004-2013, and organic poultry prices 2004-2013, respectively. All three sheets have the data presented visually which makes it messy. The first is the tidiest and contains the most information, so that is the sheet I will be working with. 
The column names were stored across multiple rows and so I renamed them upon import and deleted the empty column between the egg prices and the chicken prices. I also set the NA variable which was stored in this data as "too few." 

I also had to split the Month_Year column into two and fill the year down so that there is a year in every row. If the unique case is the "price", I will have to pivot the data to be much longer with the new variables being the product. Since there are two major categories of project, I will split this into columns, product category (egg, chicken) and product type (size eggs, dozen or half dozen, parts of the chicken).

## Anticipate the End Result

The first step in pivoting the data is to try to come up with a concrete vision of what the end product should look like - that way you will know whether or not your pivoting was successful.*

One easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.*

Suppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!*

### Example: find current and future data dimensions

Lets see if this works with a simple example.

```{r}
#| tbl-cap: Example

df<-tibble(country = rep(c("Mexico", "USA", "France"),2),
           year = rep(c(1980,1990), 3), 
           trade = rep(c("NAFTA", "NAFTA", "EU"),2),
           outgoing = rnorm(6, mean=1000, sd=500),
           incoming = rlogis(6, location=1000, 
                             scale = 400))
df

#existing rows/cases
nrow(df)

#existing columns/cases
ncol(df)

#expected rows/cases
nrow(df) * (ncol(df)-3)

# expected columns 
3 + 2
```

Our simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.

### Challenge: Describe the final dimensions

Document your work here.

```{r}
#existing rows/cases
nrow(eggs)

#existing columns/cases
ncol(eggs)

#expected rows/cases
nrow(eggs) * (ncol(eggs)-1)

# expected columns 
1 + 2

```

*Any additional comments?*



## Pivot the Data

Now we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a "sanity" check.

### Example

```{r}
#| tbl-cap: Pivoted Example

df<-pivot_longer(df, col = c(outgoing, incoming),
                 names_to="trade_direction",
                 values_to = "trade_value")
df
```

Yes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!

### Challenge: Pivot the Chosen Data

*Document your work here. What will a new "case" be once you have pivoted the data? How does it meet requirements for tidy data?*

A new case will be the price. It will be described by the month, year, product category, and product type. This is tidy because you will easily be able to analyze the price and then group by the different categories and time periods.

```{r}
eggs_pivoted <- pivot_longer(eggs,
  col = c(`egg-xl_12`, `egg-xl_6`, `egg-lg_12`, `egg-lg_6`, `chx-whole`, `chx-bnl_breast`, `chx-bone_breast`, `chx-legs`, `chx-thighs`),
  names_to = "product_category-product_type",
  values_to = "price") %>%
  
  separate(col = `product_category-product_type`,
           into = c("product_category", "product_type"),
           sep = "-")
  

eggs_pivoted

```

*Any additional comments?*

The new table has 1080 rows, as expected!
