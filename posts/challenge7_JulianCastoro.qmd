---
title: "Challenge 7 Instructions"
author: "Julian Castoro"
description: "Visualizing Multiple Dimensions"
date: "11/2/2022"
format:
  html:
    toc: true
    code-copy: true
    code-tools: true
categories:
  - challenge_7
  - debt
  - Julian Castoro
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)
library(ggforce)
library(plotly)
library(readxl)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Today's challenge is to:

1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)
2)  tidy data (as needed, including sanity checks)
3)  mutate variables as needed (including sanity checks)
4)  Recreate at least two graphs from previous exercises, but introduce at least one additional dimension that you omitted before using ggplot functionality (color, shape, line, facet, etc) The goal is not to create unneeded [chart ink (Tufte)](https://www.edwardtufte.com/tufte/), but to concisely capture variation in additional dimensions that were collapsed in your earlier 2 or 3 dimensional graphs.
   - Explain why you choose the specific graph type
5) If you haven't tried in previous weeks, work this week to make your graphs "publication" ready with titles, captions, and pretty axis labels and other viewer-friendly features


## Read in data

I chose to use the debt dataset from last weeks challenge, it was not listed as a dataset in the template but the challenge says to rework a previous exercise so I am assuming this is ok.


```{r}
RawData <- read_excel("_data/debt_in_trillions.xlsx")
head(RawData)
```

### Briefly describe the data

The data represents the year and quarter in the US and the associated debt spread of its citizens during that time period.

```{r}
splitData<- RawData %>%
  separate(`Year and Quarter`,c('Year','Quarter'),sep = ":")
head(splitData)

```

I pivot the data here so that I could filter by debt type.

```{r}
longerSplitData<- splitData%>%
  pivot_longer(!c(Year,Quarter), names_to = "DebtType",values_to = "DebtPercent" )

longerSplitData

```

## Visualization with Multiple Dimensions

I wanted to rework my second and third from the last exercise, I feel like looking back on them now I am realizing they are more of exploratory graphs and not necessarily "report ready" so I wanted to revisit them and spruce them up a bit.

Below I will show what they originally looked like and discuss what I want to change.


Second Chart original:
```{r}
longerSplitDataPlot <- longerSplitData%>%
  ggplot(mapping=aes(x = Year, y = DebtPercent))


longerSplitDataPlot + 
  geom_point(aes(color = DebtType))
  

```
The objective of this chart was to show the different debt types and how they fluctuated throughout the years. While I had a legend, some color and axis titles I feel like the value of anything other than total and Mortgages are lost.

In order to improve this chart I will add a title and think of a way to shine some more light on the other debt types.


```{r}


longerSplitDataPlot + 
  geom_point(aes(color = DebtType))+
  labs(title = "Total National Debt most closely follows Mortgages",subtitle="Student and Auto drive the secondary category" ,caption = "data from posts/_data")+
  theme(legend.position = "bottom")+
  facet_zoom(y = DebtType == !c("Mortgage","Total"),ylim = c(0,2))


```








Third chart:
This chart really doesn't show anything and without the free scale on each axis it is tough to see any patterns. I wanted to experiment with some themese here and give this chart a title as well as adjust the axis so you can see how each type of debt flwos throughout the year.
```{r}

longerSplitDataPlot+
  geom_point() +
  facet_wrap(~DebtType) +
  scale_x_discrete(breaks = c('03','06','09',12,15,18,21))

 
```


```{r}

longerSplitDataPlot+
  geom_point(aes(color = Quarter,alpha=0.9,)) +
  facet_wrap(~DebtType,scales = "free_y") +
  scale_x_discrete(breaks = c('03','06','09',12,15,18,21))+
  theme_light() +
  guides(alpha="none") +
  labs(title = "Debt Types per year" ,caption = "data from posts/_data")
```
