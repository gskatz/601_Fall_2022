---
title: "Challenge 4 Solutions"
author: "Vishnupriya Varadharaju"
desription: "More data wrangling: pivoting"
date: "11/23/2022"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - challenge_4
  - abc_poll
  - eggs
  - fed_rates
  - hotel_bookings
  - debt
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(lubridate)

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

 Working with the Hotel Bookings Dataset
 
## Read in data

```{r}
# Reading in the CSV data
h_book <- read_csv("_data/hotel_bookings.csv", show_col_types = FALSE)

h_book
```


```{r}
# To check the number of unique values in all the columns
rapply(h_book,function(x)length(unique(x)))

# To check the unique values of hotel
unique(h_book$hotel)

```


### Briefly describe the data

The following dataset has 119390 observations and 32 different fields. This is basically the data from two hotels - City Hotel & Resort Hotel. Each entry corresponds to a booking made by a customer. There are various information that are recorded with each booking. It includes the arrival date, number of days of stay, meal, type of room reserved, customer type, reservation status, number of adult/children and many more. The data consists of entries from countries all over the world.
 

## Tidy Data (as needed)

```{r}
# in country we can see that there is a field call NULL that can be removed
table(h_book$country)

h_book <- h_book %>% 
  filter(!(country == "NULL"))
```

In country, there are entries called NULL, which can be removed as it may not be useful for the analysis.

```{r}
# to check the different types of the fields
head(h_book)

sapply(h_book, class)
```

From the above analysis, we can see that two fields, Agents and Company have numerical values in them, but have the datatype marked as character. These NULL entries can be changed to NA and the datatype can be changed to numeric. Also, the arrival date in year, month and date can be combined into a single field called as arrival date. 


## Identify variables that need to be mutated


```{r}
# combining the arrival date into a single field
# to find the total number of guests in the hotel - add adults, children and babies

h_book_mut <- h_book %>% 
  mutate(arrival_date = str_c(arrival_date_day_of_month,
                              arrival_date_month,
                              arrival_date_year, sep="/"),
         arrival_date = dmy(arrival_date),
         total_guests = adults + children + babies) %>% 
  select(-c(arrival_date_day_of_month,arrival_date_month,arrival_date_year))

h_book_mut

# finding the date ranges of the arrival date of this data

summary(h_book_mut$arrival_date)

```
From above, we can see that the arrival dates lie between July 2015 - August 2017.



The lead time can tell us when the whole hotel reservation started. The booking date can be calculated by subtracting the lead time from the arrival date.

```{r}
h_book_mut <- h_book_mut %>%
  mutate(booking_date = arrival_date - lead_time)

h_book_mut
```

We can also find the number of days after the booking, when the reservation got cancelled

```{r}
unique(h_book$reservation_status)

# we can find the number of days after booking when the status was changed to cancelled
h_book_canc <- h_book_mut %>%
  filter(reservation_status == 'Canceled') %>%
  mutate(canc_time = booking_date - reservation_status_date)

h_book_canc %>%
  summarise(min = min(canc_time), max = max(canc_time), mean = mean(canc_time), median = median(canc_time))
```


Changing the datatype of agent and company from char to numeric

```{r}
# mutating the datatype of the agent and company field from char to numeric

h_book_mut <- h_book_mut %>%
  mutate(across(c(agent, company),~ replace(.,str_detect(., "NULL"), NA))) %>% mutate_at(vars(agent, company),as.numeric)

is.numeric(h_book_mut$agent)
is.numeric(h_book_mut$company)
```


